[{"filePath":"/Users/yasinhossain/quran-app/.storybook/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/.storybook/preview.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":29,"fix":{"range":[123,141],"text":"@/app/globals.css"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":27,"fix":{"range":[152,168],"text":"@/app/theme.css"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { withThemeByClassName } from '@storybook/addon-themes';\n\nimport type { Preview } from '@storybook/react';\n\nimport '../app/globals.css';\nimport '../app/theme.css';\n\nconst preview: Preview = {\n  parameters: {\n    layout: 'centered',\n  },\n  decorators: [\n    withThemeByClassName({\n      themes: {\n        light: '',\n        dark: 'dark',\n      },\n      defaultTheme: 'light',\n    }),\n  ],\n};\n\nexport default preview;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/BookmarkFolderClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/__tests__/BookmarkFolderClient.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":64,"fix":{"range":[154,177],"text":"@/app/(features)/bookmarks/[folderId]/BookmarkFolderClient"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render } from '@testing-library/react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport { BookmarkFolderClient } from '../BookmarkFolderClient';\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: jest.fn() }),\n}));\n\njest.mock('@/app/(features)/layout/context/HeaderVisibilityContext', () => ({\n  useHeaderVisibility: () => ({ isHidden: false }),\n}));\n\njest.mock('@/app/providers/SidebarContext', () => ({\n  useSidebar: () => ({ isBookmarkSidebarOpen: false, setBookmarkSidebarOpen: jest.fn() }),\n}));\n\njest.mock('../components/Sidebar', () => ({\n  Sidebar: () => <div />,\n}));\n\njest.mock('../components/SettingsSidebar', () => ({\n  SettingsSidebar: () => <div />,\n}));\n\njest.mock('../../components/BookmarkVerseList', () => ({\n  BookmarkVerseList: () => <div />,\n}));\n\njest.mock('../hooks', () => ({\n  useBookmarkFolderData: () => ({\n    folder: { name: 'Test Folder' },\n    bookmarks: [],\n    verses: [],\n    loadingVerses: new Set(),\n  }),\n  useBookmarkFolderPanels: () => ({\n    isTranslationPanelOpen: false,\n    setIsTranslationPanelOpen: jest.fn(),\n    isWordPanelOpen: false,\n    setIsWordPanelOpen: jest.fn(),\n    selectedTranslationName: '',\n    selectedWordLanguageName: '',\n  }),\n}));\n\ndescribe('BookmarkFolderClient logging', () => {\n  it('logs render with folderId', () => {\n    const debugSpy = jest.spyOn(logger, 'debug').mockImplementation(() => {});\n\n    render(<BookmarkFolderClient folderId=\"1\" />);\n\n    expect(debugSpy).toHaveBeenCalledWith('BookmarkFolderClient rendering', {\n      folderId: '1',\n    });\n    debugSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BookmarkFolderView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BookmarkVersesContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72,"fix":{"range":[141,175],"text":"@/app/(features)/bookmarks/components/BookmarkVerseList"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { BreadcrumbNavigation } from './BreadcrumbNavigation';\nimport { BookmarkVerseList } from '../../components/BookmarkVerseList';\n\nimport type { Verse } from '@/types';\n\ninterface BookmarkVersesContentProps {\n  onNavigateToBookmarks: () => void;\n  folderName: string;\n  activeVerseId?: string;\n  verses: Verse[];\n  displayVerses: Verse[];\n  loadingVerses: Set<string>;\n}\n\nexport const BookmarkVersesContent = ({\n  onNavigateToBookmarks,\n  folderName,\n  activeVerseId,\n  verses,\n  displayVerses,\n  loadingVerses,\n}: BookmarkVersesContentProps): React.JSX.Element => (\n  <div>\n    <BreadcrumbNavigation\n      onNavigateToBookmarks={onNavigateToBookmarks}\n      folderName={folderName}\n      activeVerseId={activeVerseId}\n      verses={verses}\n    />\n    <BookmarkVerseList\n      verses={displayVerses}\n      isLoading={loadingVerses.size > 0 && verses.length === 0}\n      error={null}\n    />\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BreadcrumbNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/FolderNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/SettingsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/Sidebar.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":80,"fix":{"range":[82,120],"text":"@/app/(features)/bookmarks/components/BookmarkFolderSidebar"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { BookmarkFolderSidebar } from '../../components/BookmarkFolderSidebar';\n\nimport type { Bookmark, Folder } from '@/types';\n\ninterface SidebarProps {\n  bookmarks: Bookmark[];\n  folder: Folder;\n  activeVerseId?: string;\n  onVerseSelect: (verseId: string) => void;\n  onBack: () => void;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const Sidebar = ({\n  bookmarks,\n  folder,\n  activeVerseId,\n  onVerseSelect,\n  onBack,\n  isOpen,\n  onClose,\n}: SidebarProps): React.JSX.Element => (\n  <BookmarkFolderSidebar\n    bookmarks={bookmarks}\n    folder={folder}\n    {...(activeVerseId && { activeVerseId })}\n    onVerseSelect={onVerseSelect}\n    onBack={onBack}\n    isOpen={isOpen}\n    onClose={onClose}\n  />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/BookmarkFolderSidebar.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":77,"fix":{"range":[108,143],"text":"@/app/(features)/bookmarks/components/BookmarkFolderSidebar"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { fireEvent, render, screen } from '@testing-library/react';\n\nimport { BookmarkFolderSidebar } from '../components/BookmarkFolderSidebar';\n\nconst bookmarks = [\n  { verseId: '1', verseKey: '1:1', surahName: 'Al-Fatihah', createdAt: 0 },\n  { verseId: '2', verseKey: '2:255', surahName: 'Al-Baqarah', createdAt: 0 },\n];\n\njest.mock('@/app/providers/BookmarkContext', () => ({\n  useBookmarks: () => ({\n    folders: [{ id: 'folder1', name: 'Folder 1', bookmarks }],\n    chapters: [],\n    updateBookmark: jest.fn(),\n  }),\n}));\n\njest.mock('../hooks/useBookmarkVerse', () => ({\n  useBookmarkVerse: (bookmark: unknown) => ({ bookmark, isLoading: false, error: null }),\n}));\n\njest.mock('@/app/(features)/layout/context/HeaderVisibilityContext', () => ({\n  useHeaderVisibility: () => ({ isHidden: false }),\n}));\n\ndescribe('BookmarkFolderSidebar', () => {\n  it('highlights active verse and handles verse selection', () => {\n    const handleVerseSelect = jest.fn();\n\n    render(\n      <BookmarkFolderSidebar\n        bookmarks={bookmarks}\n        folder={{ id: 'folder1', name: 'Folder 1', bookmarks }}\n        activeVerseId=\"1\"\n        onVerseSelect={handleVerseSelect}\n        isOpen\n        onClose={jest.fn()}\n      />\n    );\n\n    const activeButton = screen.getByText('1:1').closest('button');\n    expect(activeButton).toHaveClass('bg-accent/10');\n\n    const secondButton = screen.getByText('2:255').closest('button') as HTMLButtonElement;\n    fireEvent.click(secondButton);\n    expect(handleVerseSelect).toHaveBeenCalledWith('2');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/Bookmarks.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":65,"fix":{"range":[149,178],"text":"@/app/(features)/bookmarks/components/BookmarksHeader"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":67,"fix":{"range":[215,245],"text":"@/app/(features)/bookmarks/components/BookmarksSidebar"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { render, screen } from '@testing-library/react';\n\nimport { mockTag, type MockProps } from '@/tests/mocks';\n\nimport { BookmarksHeader } from '../components/BookmarksHeader';\nimport { BookmarksSidebar } from '../components/BookmarksSidebar';\n\n// Mock the BookmarkContext\njest.mock('@/app/providers/BookmarkContext', () => ({\n  useBookmarks: () => ({\n    folders: [\n      { id: '1', name: 'Test Folder 1', bookmarks: [] },\n      { id: '2', name: 'Test Folder 2', bookmarks: [] },\n    ],\n    chapters: [\n      { id: 1, name_simple: 'Al-Fatihah', verses_count: 7 },\n      { id: 2, name_simple: 'Al-Baqarah', verses_count: 286 },\n    ],\n  }),\n}));\n\n// Mock framer-motion to avoid animation issues in tests\njest.mock('framer-motion', () => ({\n  motion: {\n    div: mockTag('div'),\n  },\n  AnimatePresence: ({ children }: MockProps) => <>{children}</>,\n}));\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation((query) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\nconst testNavigationItemAccessibility = (item: Element | null): void => {\n  expect(item).toBeInTheDocument();\n  if (item) {\n    expect(item).toHaveClass('transition-colors');\n  }\n};\n\ndescribe('BookmarksHeader', () => {\n  const renderBookmarksHeader = (): {\n    mockOnSidebarToggle: jest.Mock;\n    mockOnNewFolderClick: jest.Mock;\n    mockOnSearchChange: jest.Mock;\n  } => {\n    const mockOnSidebarToggle = jest.fn();\n    const mockOnNewFolderClick = jest.fn();\n    const mockOnSearchChange = jest.fn();\n\n    render(\n      <BookmarksHeader\n        searchTerm=\"\"\n        onSearchChange={mockOnSearchChange}\n        onNewFolderClick={mockOnNewFolderClick}\n        onSidebarToggle={mockOnSidebarToggle}\n      />\n    );\n\n    return { mockOnSidebarToggle, mockOnNewFolderClick, mockOnSearchChange };\n  };\n\n  it('should render without errors', () => {\n    renderBookmarksHeader();\n\n    expect(screen.getByText('Bookmarks')).toBeInTheDocument();\n    expect(screen.getByText('New Folder')).toBeInTheDocument();\n    expect(screen.getByPlaceholderText('Search Bookmarks')).toBeInTheDocument();\n  });\n\n  it('should have proper touch targets for buttons', () => {\n    renderBookmarksHeader();\n    const newFolderButton = screen.getByRole('button', { name: 'New Folder' });\n    expect(newFolderButton).toHaveClass('min-h-touch');\n  });\n\n  it('should apply responsive classes consistently', () => {\n    renderBookmarksHeader();\n    const newFolderButton = screen.getByRole('button', { name: 'New Folder' });\n\n    expect(newFolderButton).toHaveClass('touch-manipulation');\n    expect(newFolderButton).toHaveClass('select-none');\n  });\n});\n\ndescribe('BookmarksSidebar', () => {\n  it('should render all navigation items', () => {\n    render(<BookmarksSidebar activeSection=\"bookmarks\" />);\n\n    expect(screen.getByText('Bookmark')).toBeInTheDocument();\n    expect(screen.getByText('Pins')).toBeInTheDocument();\n    expect(screen.getByText('Last Reads')).toBeInTheDocument();\n  });\n\n  it('should have accessible navigation items', () => {\n    render(<BookmarksSidebar activeSection=\"bookmarks\" />);\n\n    const pinnedItem = screen.getByText('Pins').closest('div');\n    const lastReadItem = screen.getByText('Last Reads').closest('div');\n\n    testNavigationItemAccessibility(pinnedItem);\n    testNavigationItemAccessibility(lastReadItem);\n\n    const bookmarkItem = screen.getByText('Bookmark');\n    const navBookmarkItem = bookmarkItem.closest('div');\n    expect(navBookmarkItem).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/LastReadPage.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":46,"fix":{"range":[180,197],"text":"@/app/(features)/bookmarks/last-read/page"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react';\nimport React from 'react';\n\nimport { mockTag, type MockProps } from '@/tests/mocks';\n\nimport LastReadPage from '../last-read/page';\n\nconst push = jest.fn();\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push }),\n}));\n\njest.mock('../components/BookmarksSidebar', () => ({\n  BookmarksSidebar: ({ onSectionChange }: { onSectionChange: (section: string) => void }) => (\n    <nav>\n      <button onClick={() => onSectionChange('bookmarks')}>Bookmarks</button>\n      <button onClick={() => onSectionChange('pinned')}>Pins</button>\n      <button onClick={() => onSectionChange('last-read')}>Last Read</button>\n    </nav>\n  ),\n}));\n\nlet lastRead: Record<string, number> = { '1': 3 };\nlet chapters = [{ id: 1, name_simple: 'Al-Fatihah', verses_count: 7 }];\n\njest.mock('@/app/providers/BookmarkContext', () => ({\n  useBookmarks: () => ({\n    lastRead,\n    chapters,\n  }),\n}));\n\njest.mock('@/app/(features)/layout/context/HeaderVisibilityContext', () => ({\n  useHeaderVisibility: () => ({ isHidden: false }),\n}));\n\njest.mock('framer-motion', () => ({\n  motion: {\n    div: mockTag('div'),\n    aside: mockTag('aside'),\n  },\n  AnimatePresence: ({ children }: MockProps) => <>{children}</>,\n}));\n\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\nbeforeEach(() => {\n  push.mockClear();\n  lastRead = { '1': 3 };\n  chapters = [{ id: 1, name_simple: 'Al-Fatihah', verses_count: 7 }];\n});\n\ndescribe('Last Read Page', () => {\n  it('renders last read progress and handles navigation', async () => {\n    render(<LastReadPage />);\n    expect(await screen.findByRole('heading', { name: 'Last Read' })).toBeInTheDocument();\n    expect(await screen.findByText(/Verse 3 of 7/)).toBeInTheDocument();\n    fireEvent.click(screen.getByText('Pins'));\n    expect(push).toHaveBeenCalledWith('/bookmarks/pinned');\n  });\n\n  it('shows empty state message', async () => {\n    lastRead = {};\n    render(<LastReadPage />);\n    expect(await screen.findByText('No Recent Activity')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/PinnedPage.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":45,"fix":{"range":[182,196],"text":"@/app/(features)/bookmarks/pinned/page"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen, fireEvent } from '@testing-library/react';\nimport React from 'react';\n\nimport { mockTag, type MockProps } from '@/tests/mocks';\n\nimport PinnedAyahPage from '../pinned/page';\n\nconst push = jest.fn();\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push }),\n}));\n\njest.mock('../components/BookmarksSidebar', () => ({\n  BookmarksSidebar: ({ onSectionChange }: { onSectionChange: (section: string) => void }) => (\n    <nav>\n      <button onClick={() => onSectionChange('bookmarks')}>Bookmarks</button>\n      <button onClick={() => onSectionChange('last-read')}>Last Read</button>\n      <button onClick={() => onSectionChange('pinned')}>Pins</button>\n    </nav>\n  ),\n}));\n\nconst removeBookmark = jest.fn();\nlet pinnedVerses = [{ verseId: '1', createdAt: 0 }];\n\njest.mock('@/app/providers/BookmarkContext', () => ({\n  useBookmarks: () => ({\n    pinnedVerses,\n    removeBookmark,\n    chapters: [\n      { id: 1, name_simple: 'Al-Fatihah', verses_count: 7 },\n      { id: 2, name_simple: 'Al-Baqarah', verses_count: 286 },\n    ],\n  }),\n}));\n\njest.mock('@/app/(features)/layout/context/HeaderVisibilityContext', () => ({\n  useHeaderVisibility: () => ({ isHidden: false }),\n}));\n\njest.mock('../components/BookmarkCard', () => ({\n  BookmarkCard: ({ bookmark }: { bookmark: { verseId: string } }) => {\n    const { removeBookmark } = require('@/app/providers/BookmarkContext').useBookmarks();\n    return (\n      <div>\n        <span>{`Verse ${bookmark.verseId}`}</span>\n        <button onClick={() => removeBookmark(bookmark.verseId, 'pinned')}>Remove</button>\n      </div>\n    );\n  },\n}));\n\njest.mock('framer-motion', () => ({\n  motion: {\n    div: mockTag('div'),\n    aside: mockTag('aside'),\n  },\n  AnimatePresence: ({ children }: MockProps) => <>{children}</>,\n}));\n\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\nbeforeEach(() => {\n  pinnedVerses = [{ verseId: '1', createdAt: 0 }];\n  push.mockClear();\n  removeBookmark.mockClear();\n});\n\ndescribe('Pinned Ayah Page', () => {\n  it('renders pinned verses and handles navigation', () => {\n    render(<PinnedAyahPage />);\n    expect(screen.getByText('Pinned Ayahs')).toBeInTheDocument();\n    expect(screen.getByText('Verse 1')).toBeInTheDocument();\n    fireEvent.click(screen.getByText('Last Read'));\n    expect(push).toHaveBeenCalledWith('/bookmarks/last-read');\n  });\n\n  it('removes a pinned verse', () => {\n    render(<PinnedAyahPage />);\n    fireEvent.click(screen.getByText('Remove'));\n    expect(removeBookmark).toHaveBeenCalledWith('1', 'pinned');\n  });\n\n  it('shows empty state message', () => {\n    pinnedVerses = [];\n    render(<PinnedAyahPage />);\n    expect(screen.getByText('No Pinned Verses')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/UseBookmarkFolderData.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[115,156],"text":"@/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderData"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  __verseCache,\n  VERSE_CACHE_LIMIT,\n  clearCache,\n  // Exported for testing\n  getVerseWithCache,\n} from '../[folderId]/hooks/useBookmarkFolderData';\n\nimport type { Verse } from '@/types';\n\njest.mock('@/lib/api', () => ({\n  getVerseByKey: jest.fn(async (key: string) => ({ verse_key: key }) as Verse),\n  getVerseById: jest.fn(async (id: string) => ({ verse_key: id }) as Verse),\n}));\n\ndescribe('verse cache', () => {\n  beforeEach(() => {\n    clearCache();\n  });\n\n  it('evicts oldest entry when cache limit exceeded', async () => {\n    for (let i = 0; i < VERSE_CACHE_LIMIT; i++) {\n      await getVerseWithCache(String(i), 1);\n    }\n\n    expect(__verseCache.size).toBe(VERSE_CACHE_LIMIT);\n\n    await getVerseWithCache('overflow', 1);\n\n    expect(__verseCache.size).toBe(VERSE_CACHE_LIMIT);\n    expect(__verseCache.has('0-1')).toBe(false);\n    expect(__verseCache.has('overflow-1')).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":62,"fix":{"range":[448,473],"text":"@/app/(features)/bookmarks/hooks/useBookmarkAudio"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":62,"fix":{"range":[510,535],"text":"@/app/(features)/bookmarks/hooks/useBookmarkVerse"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport React, { memo, useCallback } from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { LoadingError } from '@/app/shared/LoadingError';\nimport { ContentBookmarkCard } from '@/app/shared/ui/cards/ContentBookmarkCard';\nimport { Bookmark } from '@/types';\n\nimport { useBookmarkAudio } from '../hooks/useBookmarkAudio';\nimport { useBookmarkVerse } from '../hooks/useBookmarkVerse';\nimport { ErrorFallback, LoadingFallback } from './shared/BookmarkCardComponents';\n\ninterface BookmarkCardProps {\n  bookmark: Bookmark;\n  folderId: string;\n  onRemove?: () => void;\n}\n\nconst useBookmarkHandlers = (\n  enrichedBookmark: Bookmark,\n  folderId: string,\n  onRemove?: () => void\n): {\n  handleRemoveBookmark: () => void;\n  handleNavigateToVerse: () => void;\n  isVerseBookmarked: boolean;\n} => {\n  const { removeBookmark, isBookmarked } = useBookmarks();\n  const router = useRouter();\n\n  const handleRemoveBookmark = useCallback((): void => {\n    removeBookmark(enrichedBookmark.verseId, folderId);\n    onRemove?.();\n  }, [removeBookmark, enrichedBookmark.verseId, folderId, onRemove]);\n\n  const handleNavigateToVerse = useCallback((): void => {\n    if (!enrichedBookmark.verseKey) return;\n    const [surahId] = enrichedBookmark.verseKey.split(':');\n    router.push(`/surah/${surahId}#verse-${enrichedBookmark.verseId}`);\n  }, [enrichedBookmark.verseKey, enrichedBookmark.verseId, router]);\n\n  const isVerseBookmarked = isBookmarked(enrichedBookmark.verseId);\n\n  return { handleRemoveBookmark, handleNavigateToVerse, isVerseBookmarked };\n};\n\nconst useBookmarkCardState = (\n  enrichedBookmark: Bookmark,\n  isLoading: boolean\n): { isDataLoading: boolean } => {\n  const isDataLoading =\n    isLoading ||\n    !enrichedBookmark.verseText ||\n    !enrichedBookmark.translation ||\n    !enrichedBookmark.verseKey ||\n    !enrichedBookmark.surahName ||\n    !enrichedBookmark.verseApiId;\n\n  return { isDataLoading };\n};\n\nexport const BookmarkCard = memo(function BookmarkCard({\n  bookmark,\n  folderId,\n  onRemove,\n}: BookmarkCardProps): React.JSX.Element {\n  const { settings } = useSettings();\n  const { chapters } = useBookmarks();\n  const { bookmark: enrichedBookmark, isLoading, error } = useBookmarkVerse(bookmark, chapters);\n\n  const { handlePlayPause, isPlaying, isLoadingAudio } = useBookmarkAudio(\n    enrichedBookmark,\n    enrichedBookmark.verseApiId\n  );\n\n  const { handleRemoveBookmark, handleNavigateToVerse, isVerseBookmarked } = useBookmarkHandlers(\n    enrichedBookmark,\n    folderId,\n    onRemove\n  );\n\n  const { isDataLoading } = useBookmarkCardState(enrichedBookmark, isLoading);\n\n  return (\n    <LoadingError\n      isLoading={isDataLoading}\n      error={error}\n      loadingFallback={<LoadingFallback />}\n      errorFallback={<ErrorFallback error={error} verseId={bookmark.verseId} />}\n    >\n      <ContentBookmarkCard\n        bookmark={enrichedBookmark}\n        isPlaying={isPlaying}\n        isLoadingAudio={isLoadingAudio}\n        onPlayPause={handlePlayPause}\n        isBookmarked={isVerseBookmarked}\n        onBookmark={handleRemoveBookmark}\n        onNavigateToVerse={handleNavigateToVerse}\n        settings={{\n          arabicFontFace: settings.arabicFontFace,\n          arabicFontSize: settings.arabicFontSize,\n          tajweed: settings.tajweed,\n        }}\n      />\n    </LoadingError>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkFolderContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":68,"fix":{"range":[203,231],"text":"@/app/(features)/bookmarks/hooks/useFolderNavigation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React, { useState } from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { Bookmark, Folder } from '@/types';\n\nimport { useFolderNavigation } from '../hooks/useFolderNavigation';\nimport { FolderItem } from './shared/folder';\n\ninterface BookmarkFolderContentProps {\n  bookmarks: Bookmark[];\n  folder: Folder;\n  activeVerseId?: string;\n  onVerseSelect?: (verseId: string) => void;\n}\n\nexport const BookmarkFolderContent = ({\n  bookmarks,\n  folder,\n  activeVerseId,\n  onVerseSelect,\n}: BookmarkFolderContentProps): React.JSX.Element => {\n  const { folders } = useBookmarks();\n  const [expandedFolderId, setExpandedFolderId] = useState<string | null>(folder.id);\n\n  const { handleFolderSelect } = useFolderNavigation(folder.id);\n\n  const toggleFolder = (folderId: string): void => {\n    setExpandedFolderId((currentId) => (currentId === folderId ? null : folderId));\n  };\n\n  const FolderListItem = ({ folderItem }: { folderItem: Folder }): React.JSX.Element => {\n    const isExpanded = expandedFolderId === folderItem.id;\n    const isCurrentFolder = folderItem.id === folder.id;\n    const folderBookmarks = isCurrentFolder ? bookmarks : folderItem.bookmarks;\n\n    return (\n      <FolderItem\n        key={folderItem.id}\n        folderItem={folderItem}\n        isExpanded={isExpanded}\n        isCurrentFolder={isCurrentFolder}\n        folderBookmarks={folderBookmarks}\n        onToggle={toggleFolder}\n        onSelect={handleFolderSelect}\n        activeVerseId={activeVerseId}\n        onVerseSelect={onVerseSelect}\n      />\n    );\n  };\n\n  return (\n    <div className=\"flex-1 p-4\">\n      <div className=\"space-y-3\">\n        {folders.map((folderItem) => (\n          <FolderListItem key={folderItem.id} folderItem={folderItem} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkFolderSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkListView.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":70,"fix":{"range":[344,373],"text":"@/app/(features)/bookmarks/hooks/useBookmarkListState"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport { Folder, Bookmark } from '@/types';\n\nimport { VerseList } from './bookmark-list-view/VerseList';\nimport {\n  BookmarkListContent,\n  BookmarkListHeader,\n  EmptyBookmarkState,\n} from './shared/BookmarkListComponents';\nimport { useBookmarkListState } from '../hooks/useBookmarkListState';\n\ninterface BookmarkListViewProps {\n  folder: Folder;\n  onBack?: () => void;\n  bookmarks?: Bookmark[];\n  showAsVerseList?: boolean;\n}\n\nexport const BookmarkListView = ({\n  folder,\n  onBack,\n  bookmarks: externalBookmarks,\n  showAsVerseList = false,\n}: BookmarkListViewProps): React.JSX.Element => {\n  const { bookmarks, listHeight, handleRemoveBookmark } = useBookmarkListState(\n    folder,\n    externalBookmarks\n  );\n\n  if (showAsVerseList) {\n    return (\n      <VerseList\n        bookmarks={bookmarks}\n        folder={folder}\n        listHeight={listHeight}\n        onRemoveBookmark={handleRemoveBookmark}\n      />\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      transition={{ duration: 0.3 }}\n      className=\"max-w-4xl mx-auto\"\n    >\n      <BookmarkListHeader folder={folder} bookmarkCount={bookmarks.length} onBack={onBack} />\n      {bookmarks.length > 0 ? (\n        <BookmarkListContent\n          bookmarks={bookmarks}\n          folder={folder}\n          listHeight={listHeight}\n          itemSize={180}\n          onRemoveBookmark={handleRemoveBookmark}\n        />\n      ) : (\n        <EmptyBookmarkState onBack={onBack} />\n      )}\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkVerseSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkedVersesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CircularProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CreateFolderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CreateMemorizationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/DeleteFolderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/EmptyStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderSettingsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderVerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahOption.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahSearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-list-view/VerseList.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":90,"fix":{"range":[143,175],"text":"@/app/(features)/bookmarks/components/shared/BookmarkListComponents"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { Bookmark, Folder } from '@/types';\n\nimport { BookmarkListContent, SimpleEmptyState } from '../shared/BookmarkListComponents';\n\ninterface VerseListProps {\n  bookmarks: Bookmark[];\n  folder: Folder;\n  listHeight: number;\n  onRemoveBookmark: (verseId: string) => void;\n}\n\nexport const VerseList = ({\n  bookmarks,\n  folder,\n  listHeight,\n  onRemoveBookmark,\n}: VerseListProps): React.JSX.Element =>\n  bookmarks.length > 0 ? (\n    <BookmarkListContent\n      bookmarks={bookmarks}\n      folder={folder}\n      listHeight={listHeight}\n      itemSize={140}\n      onRemoveBookmark={onRemoveBookmark}\n    />\n  ) : (\n    <SimpleEmptyState />\n  );\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/SidebarHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/VerseItem.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":65,"fix":{"range":[236,264],"text":"@/app/(features)/bookmarks/hooks/useBookmarkVerse"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { LoadingError } from '@/app/shared/LoadingError';\nimport { Bookmark } from '@/types';\n\nimport { useBookmarkVerse } from '../../hooks/useBookmarkVerse';\n\ninterface VerseItemProps {\n  bookmark: Bookmark;\n  isActive: boolean;\n  onSelect: () => void;\n}\n\nexport const VerseItem = ({ bookmark, isActive, onSelect }: VerseItemProps): React.JSX.Element => {\n  const { chapters } = useBookmarks();\n  const { bookmark: enrichedBookmark, isLoading, error } = useBookmarkVerse(bookmark, chapters);\n  const ayahNumber = enrichedBookmark.verseKey?.split(':')[1];\n\n  return (\n    <LoadingError\n      isLoading={isLoading || !enrichedBookmark.verseKey || !enrichedBookmark.surahName}\n      error={error}\n      loadingFallback={\n        <div className=\"p-3 border-b border-border\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-surface-hover rounded w-16 mb-2\"></div>\n            <div className=\"h-3 bg-surface-hover rounded w-24\"></div>\n          </div>\n        </div>\n      }\n      errorFallback={\n        <div className=\"p-3 border-b border-border text-center text-error text-sm\">\n          Failed to load\n        </div>\n      }\n    >\n      <button\n        onClick={onSelect}\n        className={`w-full text-left p-3 border-b border-border hover:bg-surface-hover transition-colors ${\n          isActive ? 'bg-accent/10 border-l-4 border-l-accent' : ''\n        }`}\n      >\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-accent\">{enrichedBookmark.verseKey}</span>\n            <span className=\"text-xs text-muted\">\n              {new Date(bookmark.createdAt).toLocaleDateString()}\n            </span>\n          </div>\n          <p className=\"text-sm font-medium text-foreground truncate\">\n            {enrichedBookmark.surahName}\n          </p>\n          <p className=\"text-xs text-muted truncate\">Ayah {ayahNumber}</p>\n        </div>\n      </button>\n    </LoadingError>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/VerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/ChildrenSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/FolderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/NavigationSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/FolderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/QuickSuggestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/MemorizationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/EstimatedDaysInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/PlanNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/PlanStatistics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/SurahSelectionSection.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":53,"fix":{"range":[74,93],"text":"@/app/(features)/bookmarks/components/SurahSelector"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":46,"fix":{"range":[132,140],"text":"@/app/(features)/bookmarks/components/create-memorization-modal/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport React from 'react';\n\nimport { SurahSelector } from '../../SurahSelector';\n\nimport type { PlanFormData } from '../types';\nimport type { Chapter } from '@/types';\n\ninterface SurahSelectionSectionProps {\n  formData: PlanFormData;\n  onFormDataChange: (updates: Partial<PlanFormData>) => void;\n  chapters: Chapter[];\n}\n\nexport const SurahSelectionSection = ({\n  formData,\n  onFormDataChange,\n  chapters,\n}: SurahSelectionSectionProps): React.JSX.Element => (\n  <div className=\"grid grid-cols-2 gap-4\">\n    <div className=\"space-y-2\">\n      <div className=\"block text-sm font-semibold text-foreground\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-5 h-5 bg-accent/10 rounded flex items-center justify-center\">\n            <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n          </div>\n          Start Surah\n        </div>\n      </div>\n      <SurahSelector\n        selectedSurahId={formData.startSurah}\n        onSurahSelect={(id) => onFormDataChange({ startSurah: id })}\n        chapters={chapters}\n      />\n    </div>\n\n    <div className=\"space-y-2\">\n      <div className=\"block text-sm font-semibold text-foreground\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-5 h-5 bg-accent/10 rounded flex items-center justify-center\">\n            <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n          </div>\n          End Surah\n        </div>\n      </div>\n      <SurahSelector\n        selectedSurahId={formData.endSurah}\n        onSurahSelect={(id) => onFormDataChange({ endSurah: id })}\n        chapters={chapters}\n      />\n    </div>\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/FolderPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalBody.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/WarningMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/useDeleteFolder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/EmptyBookmarksComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/EmptySearchComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/SettingsForm.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":66,"fix":{"range":[74,106],"text":"@/app/(features)/bookmarks/components/folder-settings/ColorSelector"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":70,"fix":{"range":[142,176],"text":"@/app/(features)/bookmarks/components/folder-settings/FolderNameInput"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":64,"fix":{"range":[209,240],"text":"@/app/(features)/bookmarks/components/folder-settings/IconSelector"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":64,"fix":{"range":[273,304],"text":"@/app/(features)/bookmarks/components/folder-settings/ModalActions"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\n\nimport React from 'react';\n\nimport { ColorSelector } from '../folder-settings/ColorSelector';\nimport { FolderNameInput } from '../folder-settings/FolderNameInput';\nimport { IconSelector } from '../folder-settings/IconSelector';\nimport { ModalActions } from '../folder-settings/ModalActions';\n\ninterface SettingsFormProps {\n  mode: 'edit' | 'rename' | 'customize';\n  name: string;\n  setName: (name: string) => void;\n  selectedColor: string;\n  setSelectedColor: (color: string) => void;\n  selectedIcon: string;\n  setSelectedIcon: (icon: string) => void;\n  isSubmitting: boolean;\n  onClose: () => void;\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n}\n\nexport const SettingsForm = ({\n  mode,\n  name,\n  setName,\n  selectedColor,\n  setSelectedColor,\n  selectedIcon,\n  setSelectedIcon,\n  isSubmitting,\n  onClose,\n  handleSubmit,\n}: SettingsFormProps): React.JSX.Element => (\n  <form onSubmit={handleSubmit}>\n    <FolderNameInput name={name} setName={setName} />\n    {mode === 'customize' && (\n      <>\n        <ColorSelector selectedColor={selectedColor} setSelectedColor={setSelectedColor} />\n        <IconSelector selectedIcon={selectedIcon} setSelectedIcon={setSelectedIcon} />\n      </>\n    )}\n    <ModalActions isSubmitting={isSubmitting} onClose={onClose} />\n  </form>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/useFolderSettingsModalAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/ColorSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/FolderNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/IconSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/useFolderSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/HeaderActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/HeaderTitleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/SortDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarkCardComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarkListComponents.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":48,"fix":{"range":[264,279],"text":"@/app/(features)/bookmarks/components/BookmarkCard"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport React from 'react';\nimport { FixedSizeList as List } from 'react-window';\n\nimport { ArrowLeftIcon } from '@/app/shared/icons';\nimport { Bookmark, Folder } from '@/types';\n\nimport { BookmarkCard } from '../BookmarkCard';\n\ninterface EmptyBookmarkStateProps {\n  onBack?: () => void;\n}\n\ninterface BookmarkListHeaderProps {\n  folder: Folder;\n  bookmarkCount: number;\n  onBack?: () => void;\n}\n\ninterface BookmarkListContentProps {\n  bookmarks: Bookmark[];\n  folder: Folder;\n  listHeight: number;\n  itemSize: number;\n  onRemoveBookmark: (verseId: string) => void;\n}\n\nconst BookmarkIcon = (): React.JSX.Element => (\n  <svg className=\"w-8 h-8 text-muted\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n      d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\"\n    />\n  </svg>\n);\n\nexport const EmptyBookmarkState = ({ onBack }: EmptyBookmarkStateProps): React.JSX.Element => (\n  <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"text-center py-16\">\n    <div className=\"w-16 h-16 bg-surface rounded-full flex items-center justify-center mx-auto mb-4\">\n      <BookmarkIcon />\n    </div>\n    <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Bookmarks</h3>\n    <p className=\"text-muted max-w-md mx-auto mb-4\">\n      This folder is empty. Start bookmarking verses while reading to add them here.\n    </p>\n    {onBack && (\n      <button\n        onClick={onBack}\n        className=\"px-4 py-2 bg-accent text-on-accent rounded-lg hover:bg-accent/90 transition-colors\"\n      >\n        Back to Folders\n      </button>\n    )}\n  </motion.div>\n);\n\nexport const SimpleEmptyState = (): React.JSX.Element => (\n  <div className=\"text-center py-16\">\n    <div className=\"max-w-sm mx-auto\">\n      <div className=\"w-16 h-16 bg-surface rounded-full flex items-center justify-center mx-auto mb-4\">\n        <BookmarkIcon />\n      </div>\n      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Bookmarks</h3>\n      <p className=\"text-muted mb-4\">\n        This folder is empty. Add some bookmarked verses to see them here.\n      </p>\n    </div>\n  </div>\n);\n\nexport const BookmarkListHeader = ({\n  folder,\n  bookmarkCount,\n  onBack,\n}: BookmarkListHeaderProps): React.JSX.Element | null => {\n  if (!onBack) return null;\n\n  return (\n    <div className=\"mb-8 flex items-center gap-4\">\n      <button\n        onClick={onBack}\n        className=\"rounded-full p-2 text-muted hover:bg-surface-hover hover:text-accent transition-colors\"\n        aria-label=\"Go back to folders\"\n      >\n        <ArrowLeftIcon size={20} />\n      </button>\n      <div className=\"flex-1\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-1\">{folder.name}</h1>\n        <p className=\"text-muted\">\n          {bookmarkCount} {bookmarkCount === 1 ? 'verse' : 'verses'} bookmarked\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport const BookmarkListContent = ({\n  bookmarks,\n  folder,\n  listHeight,\n  itemSize,\n  onRemoveBookmark,\n}: BookmarkListContentProps): React.JSX.Element => (\n  <List height={listHeight} width=\"100%\" itemCount={bookmarks.length} itemSize={itemSize}>\n    {({ index, style }) => {\n      const bookmark = bookmarks[index];\n      if (!bookmark) return null;\n      return (\n        <div style={style} className=\"px-0\">\n          <BookmarkCard\n            bookmark={bookmark}\n            folderId={folder.id}\n            onRemove={() => onRemoveBookmark(bookmark.verseId)}\n          />\n        </div>\n      );\n    }}\n  </List>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarksLayout.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":56,"fix":{"range":[264,283],"text":"@/app/(features)/bookmarks/components/BookmarksSidebar"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion, AnimatePresence } from 'framer-motion';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { useSidebar } from '@/app/providers/SidebarContext';\n\nimport { BookmarksSidebar } from '../BookmarksSidebar';\n\nimport type { SectionId } from '@/app/shared/ui/cards/BookmarkNavigationCard';\nimport type { Folder } from '@/types/bookmark';\nimport type { ReactNode } from 'react';\n\ninterface BookmarksLayoutProps {\n  children: ReactNode;\n  activeSection: SectionId;\n  onSectionChange: (section: SectionId) => void;\n  folders?: Folder[];\n  onVerseClick?: (verseKey: string) => void;\n}\n\ninterface DesktopSidebarProps {\n  activeSection: SectionId;\n  onSectionChange: (section: SectionId) => void;\n  folders: Folder[];\n  onVerseClick?: (verseKey: string) => void;\n}\n\nconst DesktopSidebar = ({\n  activeSection,\n  onSectionChange,\n  folders,\n  onVerseClick,\n}: DesktopSidebarProps): React.JSX.Element => (\n  <aside className=\"w-full sm:w-80 lg:w-80 bg-background text-foreground flex flex-col shadow-modal md:shadow-lg z-modal md:z-10 md:h-full hidden lg:block\">\n    <BookmarksSidebar\n      activeSection={activeSection}\n      onSectionChange={onSectionChange}\n      folders={folders}\n      {...(onVerseClick && { onVerseClick })}\n    />\n  </aside>\n);\n\ninterface MainContentProps {\n  children: ReactNode;\n  isHeaderHidden: boolean;\n}\n\nconst MainContent = ({ children, isHeaderHidden }: MainContentProps): React.JSX.Element => (\n  <main className=\"flex-1 h-full overflow-hidden\">\n    <div\n      className={`h-full overflow-y-auto p-4 sm:p-6 md:p-8 pb-6 transition-all duration-300 ${\n        isHeaderHidden\n          ? 'pt-2 sm:pt-3 md:pt-4'\n          : 'pt-[calc(3.5rem+0.5rem+env(safe-area-inset-top))] sm:pt-[calc(4rem+0.75rem+env(safe-area-inset-top))] md:pt-[calc(4rem+1rem+env(safe-area-inset-top))]'\n      }`}\n    >\n      {children}\n    </div>\n  </main>\n);\n\ninterface MobileSidebarOverlayProps {\n  isOpen: boolean;\n  onClose: () => void;\n  activeSection: SectionId;\n  onSectionChange: (section: SectionId) => void;\n  folders: Folder[];\n  onVerseClick?: (verseKey: string) => void;\n}\n\nconst MobileSidebarOverlay = ({\n  isOpen,\n  onClose,\n  activeSection,\n  onSectionChange,\n  folders,\n  onVerseClick,\n}: MobileSidebarOverlayProps): React.JSX.Element => (\n  <AnimatePresence>\n    {isOpen && (\n      <>\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"fixed inset-0 bg-surface-overlay/60 z-40 lg:hidden\"\n        />\n        <motion.aside\n          initial={{ x: '-100%' }}\n          animate={{ x: 0 }}\n          exit={{ x: '-100%' }}\n          transition={{ type: 'tween', duration: 0.3 }}\n          className=\"fixed top-16 left-0 h-[calc(100vh-4rem)] w-full sm:w-80 lg:w-80 bg-background text-foreground border-r border-border z-50 lg:hidden\"\n        >\n          <BookmarksSidebar\n            activeSection={activeSection}\n            onSectionChange={onSectionChange}\n            folders={folders}\n            onVerseClick={(verseKey) => {\n              onVerseClick?.(verseKey);\n              onClose();\n            }}\n          />\n        </motion.aside>\n      </>\n    )}\n  </AnimatePresence>\n);\n\nexport const BookmarksLayout = ({\n  children,\n  activeSection,\n  onSectionChange,\n  folders = [],\n  onVerseClick,\n}: BookmarksLayoutProps): React.JSX.Element => {\n  const { isHidden } = useHeaderVisibility();\n  const { isBookmarkSidebarOpen, setBookmarkSidebarOpen } = useSidebar();\n\n  return (\n    <>\n      <div className=\"flex h-[calc(100vh-4rem)] mt-16 bg-background\">\n        <DesktopSidebar\n          activeSection={activeSection}\n          onSectionChange={onSectionChange}\n          folders={folders}\n          onVerseClick={onVerseClick}\n        />\n        <MainContent isHeaderHidden={isHidden}>{children}</MainContent>\n      </div>\n      <MobileSidebarOverlay\n        isOpen={isBookmarkSidebarOpen}\n        onClose={() => setBookmarkSidebarOpen(false)}\n        activeSection={activeSection}\n        onSectionChange={onSectionChange}\n        folders={folders}\n        onVerseClick={onVerseClick}\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarksPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/ExpandedContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":68,"fix":{"range":[107,145],"text":"@/app/(features)/bookmarks/components/bookmark-verse-sidebar/VerseItem"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { Bookmark } from '@/types';\n\nimport { VerseItem } from '../../bookmark-verse-sidebar/VerseItem';\n\ninterface ExpandedContentProps {\n  isExpanded: boolean;\n  isCurrentFolder: boolean;\n  folderBookmarks: Bookmark[];\n  activeVerseId?: string;\n  onVerseSelect?: (verseId: string) => void;\n}\n\nexport const ExpandedContent = ({\n  isExpanded,\n  isCurrentFolder,\n  folderBookmarks,\n  activeVerseId,\n  onVerseSelect,\n}: ExpandedContentProps): React.JSX.Element | null => {\n  if (!isExpanded || !isCurrentFolder) return null;\n\n  return (\n    <div className=\"px-4 pb-3\">\n      <div className=\"border-t border-border pt-2\">\n        {folderBookmarks.length > 0 ? (\n          folderBookmarks.map((bookmark) => (\n            <VerseItem\n              key={bookmark.verseId}\n              bookmark={bookmark}\n              isActive={activeVerseId === bookmark.verseId}\n              onSelect={() => onVerseSelect?.(bookmark.verseId)}\n            />\n          ))\n        ) : (\n          <p className=\"py-4 text-sm text-center text-muted\">This folder is empty.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/FolderHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/FolderItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkAudio.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkListState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarksPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useFolderNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":70,"fix":{"range":[198,231],"text":"@/app/(features)/bookmarks/components/CircularProgress"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { useRouter } from 'next/navigation';\nimport React from 'react';\n\nimport { Chapter } from '@/types';\n\nimport { CircularProgress } from '../../components/CircularProgress';\n\ninterface LastReadCardProps {\n  surahId: string;\n  verseId: number;\n  chapter?: Chapter;\n  index: number;\n}\n\nexport const LastReadCard = ({\n  surahId,\n  verseId,\n  chapter,\n  index,\n}: LastReadCardProps): React.JSX.Element => {\n  const router = useRouter();\n  const total = chapter?.verses_count || 0;\n  const percent = Math.min(100, Math.max(0, Math.round((verseId / total) * 100)));\n\n  const handleNavigate = (): void => {\n    router.push(`/surah/${surahId}#verse-${verseId}`);\n  };\n\n  return (\n    <motion.div\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`Continue reading ${chapter?.name_simple || `Surah ${surahId}`} at verse ${verseId}`}\n      onClick={handleNavigate}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          handleNavigate();\n        }\n      }}\n      className=\"w-[calc(50%-0.5rem)] sm:w-72 lg:w-80 h-80 bg-surface rounded-2xl shadow-lg cursor-pointer focus:outline-none focus:ring-2 focus:ring-emerald-600 hover:shadow-xl transition-all duration-300 border border-border/50 p-6 text-center flex flex-col items-center justify-between\"\n      whileHover={{ y: -2, scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1 }}\n    >\n      <div className=\"flex-1 flex items-center justify-center\">\n        <CircularProgress percentage={percent} label=\"Complete\" size={160} strokeWidth={15} />\n      </div>\n      <div className=\"mt-4\">\n        <p className=\"text-lg font-bold text-foreground truncate\">\n          {chapter?.name_simple || `Surah ${surahId}`}\n        </p>\n        <p className=\"text-sm text-muted mt-1\">\n          Verse {verseId} of {total}\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/hooks/useLastReadPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/page.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":72,"fix":{"range":[196,232],"text":"@/app/(features)/bookmarks/components/shared/BookmarksLayout"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { LastReadHeader, LastReadGrid } from './components';\nimport { useLastReadPage } from './hooks/useLastReadPage';\nimport { BookmarksLayout } from '../components/shared/BookmarksLayout';\n\nexport default function LastReadPage(): React.JSX.Element {\n  const { lastRead, chapters, handleSectionChange } = useLastReadPage();\n\n  return (\n    <BookmarksLayout activeSection=\"last-read\" onSectionChange={handleSectionChange}>\n      <LastReadHeader />\n      <LastReadGrid lastRead={lastRead} chapters={chapters} />\n    </BookmarksLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":70,"fix":{"range":[207,240],"text":"@/app/(features)/bookmarks/components/CircularProgress"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { useRouter } from 'next/navigation';\nimport React from 'react';\n\nimport { MemorizationPlan } from '@/types';\n\nimport { CircularProgress } from '../../components/CircularProgress';\n\ninterface MemorizationCardProps {\n  surahId: string;\n  plan: MemorizationPlan;\n  chapter?: {\n    name_simple: string;\n    name_arabic: string;\n  };\n}\n\ninterface CardHeaderProps {\n  chapter?: {\n    name_simple: string;\n    name_arabic: string;\n  };\n  surahId: string;\n  percent: number;\n}\n\ninterface ProgressDetailsProps {\n  plan: MemorizationPlan;\n  percent: number;\n}\n\ninterface StatusFooterProps {\n  plan: MemorizationPlan;\n  percent: number;\n}\n\nconst CardHeader = ({ chapter, surahId, percent }: CardHeaderProps): React.JSX.Element => (\n  <div className=\"flex flex-col items-center text-center mb-4\">\n    <div className=\"mb-4\">\n      <CircularProgress percentage={percent} label=\"Completed\" size={100} strokeWidth={10} />\n    </div>\n\n    <div className=\"mb-3\">\n      <h3 className=\"text-lg font-bold text-foreground truncate mb-1\">\n        {chapter?.name_simple || `Surah ${surahId}`}\n      </h3>\n      <p className=\"text-sm text-muted truncate\">{chapter?.name_arabic}</p>\n    </div>\n  </div>\n);\n\nconst ProgressDetails = ({ plan, percent }: ProgressDetailsProps): React.JSX.Element => (\n  <div className=\"flex-1 space-y-3 text-center\">\n    <div className=\"bg-accent/5 rounded-lg p-3\">\n      <div className=\"flex items-center justify-center gap-2 text-sm mb-2\">\n        <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n        <span className=\"text-muted\">Progress:</span>\n        <span className=\"font-semibold text-foreground\">\n          {plan.completedVerses} / {plan.targetVerses}\n        </span>\n      </div>\n\n      <div className=\"text-xs text-muted space-y-1\">\n        <div>From 1:1 - 1:{plan.completedVerses > 0 ? plan.completedVerses : 1}</div>\n        <div>Now: Verse {Math.min(plan.completedVerses + 1, plan.targetVerses)}</div>\n      </div>\n    </div>\n\n    <div className=\"flex items-center justify-between\">\n      <div className=\"text-left\">\n        <div className=\"text-xl font-bold text-accent\">{percent}%</div>\n        <div className=\"text-xs text-muted\">Complete</div>\n      </div>\n\n      <div className=\"inline-flex items-center px-3 py-1.5 bg-accent/10 text-accent rounded-full text-sm font-medium\">\n        <div className=\"w-1.5 h-1.5 bg-accent rounded-full mr-2\"></div>5 Days Left\n      </div>\n    </div>\n  </div>\n);\n\nconst StatusFooter = ({ plan }: StatusFooterProps): React.JSX.Element => (\n  <div className=\"text-xs text-muted pt-2 border-t border-border/50\">\n    {plan.completedVerses === plan.targetVerses ? 'Completed' : 'In Progress'} • Started{' '}\n    {new Date(plan.createdAt).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    })}\n  </div>\n);\n\nexport const MemorizationCard = ({\n  surahId,\n  plan,\n  chapter,\n}: MemorizationCardProps): React.JSX.Element => {\n  const router = useRouter();\n  const percent = Math.min(\n    100,\n    Math.max(0, Math.round((plan.completedVerses / plan.targetVerses) * 100))\n  );\n\n  const handleNavigate = (): void => {\n    router.push(`/surah/${surahId}`);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent): void => {\n    if (e.key === 'Enter') {\n      handleNavigate();\n    }\n  };\n\n  return (\n    <motion.div\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`Continue memorizing ${chapter?.name_simple || `Surah ${surahId}`} - ${percent}% complete`}\n      onClick={handleNavigate}\n      onKeyDown={handleKeyDown}\n      className=\"bg-surface rounded-2xl shadow-lg cursor-pointer focus:outline-none focus:ring-2 focus:ring-accent hover:shadow-xl transition-all duration-300 border border-border/50 p-4 sm:p-6 \n      hover:border-accent/20 flex flex-col h-full relative z-10\"\n      whileHover={{ y: -2, scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: parseInt(surahId) * 0.1 }}\n    >\n      <CardHeader chapter={chapter} surahId={surahId} percent={percent} />\n      <ProgressDetails plan={plan} percent={percent} />\n      <StatusFooter plan={plan} percent={percent} />\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/hooks/useMemorizationPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/page.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":72,"fix":{"range":[221,257],"text":"@/app/(features)/bookmarks/components/shared/BookmarksLayout"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport dynamic from 'next/dynamic';\n\nimport { MemorizationHeader, MemorizationGrid } from './components';\nimport { useMemorizationPage } from './hooks/useMemorizationPage';\nimport { BookmarksLayout } from '../components/shared/BookmarksLayout';\n\n// Dynamic import for heavy modal component\nconst CreateMemorizationModal = dynamic(\n  () =>\n    import('../components/CreateMemorizationModal').then((mod) => ({\n      default: mod.CreateMemorizationModal,\n    })),\n  {\n    ssr: false,\n  }\n);\n\nexport default function MemorizationPage(): React.JSX.Element {\n  const { memorization, chapters, modal, handleSectionChange } = useMemorizationPage();\n\n  return (\n    <>\n      <CreateMemorizationModal isOpen={modal.isOpen} onClose={modal.close} />\n\n      <BookmarksLayout activeSection=\"memorization\" onSectionChange={handleSectionChange}>\n        <MemorizationHeader />\n        <MemorizationGrid\n          memorization={memorization}\n          chapters={chapters}\n          onCreatePlan={modal.open}\n        />\n      </BookmarksLayout>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/PinnedHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/PinnedVersesList.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":62,"fix":{"range":[150,179],"text":"@/app/(features)/bookmarks/components/BookmarkCard"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport { Bookmark } from '@/types';\n\nimport { BookmarkCard } from '../../components/BookmarkCard';\n\ninterface PinnedVersesListProps {\n  pinnedVerses: Bookmark[] | undefined;\n}\n\nexport const PinnedVersesList = ({ pinnedVerses }: PinnedVersesListProps): React.JSX.Element => {\n  if (!pinnedVerses || pinnedVerses.length === 0) {\n    return (\n      <div className=\"text-center py-16\">\n        <div className=\"w-16 h-16 bg-surface rounded-full flex items-center justify-center mx-auto mb-4\">\n          <svg className=\"w-8 h-8 text-muted\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\"\n            />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Pinned Verses</h3>\n        <p className=\"text-muted max-w-md mx-auto\">\n          Pin your favorite verses while reading to access them quickly from here.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className=\"max-w-4xl mx-auto\">\n      <div>\n        {pinnedVerses?.map((bookmark) => (\n          <BookmarkCard key={bookmark.verseId} bookmark={bookmark} folderId=\"pinned\" />\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/hooks/usePinnedPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/page.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":72,"fix":{"range":[194,230],"text":"@/app/(features)/bookmarks/components/shared/BookmarksLayout"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { PinnedHeader, PinnedVersesList } from './components';\nimport { usePinnedPage } from './hooks/usePinnedPage';\nimport { BookmarksLayout } from '../components/shared/BookmarksLayout';\n\nexport default function PinnedAyahPage(): React.JSX.Element {\n  const { pinnedVerses, handleSectionChange } = usePinnedPage();\n\n  return (\n    <BookmarksLayout activeSection=\"pinned\" onSectionChange={handleSectionChange}>\n      <PinnedHeader />\n      <PinnedVersesList pinnedVerses={pinnedVerses} />\n    </BookmarksLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/HomePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/UseRandomVerse.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":71,"fix":{"range":[259,282],"text":"@/app/(features)/home/hooks/useRandomVerse"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act, waitFor } from '@testing-library/react';\nimport { ReactNode } from 'react';\nimport { SWRConfig } from 'swr';\n\nimport { getRandomVerse } from '@/lib/api';\nimport { Verse } from '@/types';\n\nimport { useRandomVerse, RETRY_LIMIT } from '../hooks/useRandomVerse';\n\njest.mock('@/lib/api', () => ({\n  getRandomVerse: jest.fn(),\n}));\n\ndescribe('useRandomVerse', () => {\n  const wrapper = ({ children }: { children: ReactNode }): React.JSX.Element => (\n    <SWRConfig value={{ provider: () => new Map() }}>{children}</SWRConfig>\n  );\n\n  const mockVerse: Verse = {\n    id: 1,\n    verse_key: '1:1',\n    text_uthmani: 'بِسْمِ اللّهِ',\n    translations: [\n      {\n        resource_id: 1,\n        text: 'In the name of Allah',\n      },\n    ],\n  } as Verse;\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('retries only after defined attempts', async () => {\n    (getRandomVerse as jest.Mock)\n      .mockRejectedValueOnce(new Error('fail'))\n      .mockResolvedValueOnce(mockVerse);\n\n    const { result } = renderHook(() => useRandomVerse({ translationId: 1 }), { wrapper });\n\n    await waitFor(() => expect(result.current.isAvailable).toBe(false));\n    expect(getRandomVerse).toHaveBeenCalledTimes(1);\n\n    for (let i = 0; i < RETRY_LIMIT - 1; i++) {\n      act(() => result.current.refresh());\n      await waitFor(() => expect(result.current.isAvailable).toBe(false));\n      expect(getRandomVerse).toHaveBeenCalledTimes(1);\n    }\n\n    act(() => result.current.refresh());\n\n    await waitFor(() => expect(result.current.isAvailable).toBe(true));\n    await waitFor(() => expect(result.current.verse).toEqual(mockVerse));\n    expect(getRandomVerse).toHaveBeenCalledTimes(2);\n  });\n\n  it('fetches immediately after successful retry', async () => {\n    (getRandomVerse as jest.Mock)\n      .mockRejectedValueOnce(new Error('fail'))\n      .mockResolvedValue(mockVerse);\n\n    const { result } = renderHook(() => useRandomVerse({ translationId: 1 }), { wrapper });\n\n    await waitFor(() => expect(result.current.isAvailable).toBe(false));\n\n    for (let i = 0; i < RETRY_LIMIT; i++) {\n      act(() => result.current.refresh());\n    }\n\n    await waitFor(() => expect(result.current.verse).toEqual(mockVerse));\n    expect(getRandomVerse).toHaveBeenCalledTimes(2);\n\n    act(() => result.current.refresh());\n    await waitFor(() => expect(getRandomVerse).toHaveBeenCalledTimes(3));\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.fixtures.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.render.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.transition.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomePageBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/JuzTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/PageTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/RenderStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahEmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahLoadingGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/ThemedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseLoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseOfDay.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":54,"fix":{"range":[210,231],"text":"@/app/(features)/home/hooks/useSurahName"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":56,"fix":{"range":[265,287],"text":"@/app/(features)/home/hooks/useVerseOfDay"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":66,"fix":{"range":[326,353],"text":"@/app/(features)/home/hooks/useVerseTransition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport { memo, useCallback, useState } from 'react';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\n\nimport { RenderStates } from './RenderStates';\nimport { useSurahName } from '../hooks/useSurahName';\nimport { useVerseOfDay } from '../hooks/useVerseOfDay';\nimport { useVerseTransition } from '../hooks/useVerseTransition';\n\nimport type { Verse } from '@/types';\n\ninterface VerseOfDayProps {\n  className?: string;\n  /** Interval in ms between automatic rotations */\n  rotationInterval?: number;\n  /** Number of rotations before fetching a new random verse */\n  randomVerseInterval?: number;\n}\n\n/**\n * Verse of the Day component with smooth transitions and mobile-first design.\n * Displays a random verse with Arabic text, translation, and smooth animations.\n *\n * Features:\n * - Random verse selection with refresh functionality\n * - Smooth transition animations between verses\n * - Tajweed highlighting support\n * - Word-by-word tooltip display\n * - Mobile-first responsive design\n * - Performance optimized with memo() wrapper\n */\nexport const VerseOfDay = memo(function VerseOfDay({\n  className,\n  rotationInterval,\n  randomVerseInterval,\n}: VerseOfDayProps): React.JSX.Element | null {\n  const { settings } = useSettings();\n  const { verse, loading, error, surahs, refreshVerse } = useVerseOfDay({\n    ...(rotationInterval !== undefined ? { rotationInterval } : {}),\n    ...(randomVerseInterval !== undefined ? { randomVerseInterval } : {}),\n  });\n\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const [displayVerse, setDisplayVerse] = useState<Verse | null>(verse);\n  const [initialLoad, setInitialLoad] = useState(true);\n\n  const surahName = useSurahName(displayVerse, surahs);\n\n  const handleRefresh = useCallback(() => {\n    refreshVerse();\n  }, [refreshVerse]);\n\n  useVerseTransition({\n    verse,\n    initialLoad,\n    setInitialLoad,\n    setIsTransitioning,\n    setDisplayVerse,\n  });\n\n  return (\n    <RenderStates\n      loading={loading}\n      initialLoad={initialLoad}\n      error={error}\n      displayVerse={displayVerse}\n      className={className}\n      onRetry={handleRefresh}\n      surahName={surahName}\n      tajweedEnabled={settings.tajweed}\n      isTransitioning={isTransitioning}\n    />\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/__tests__/UseRandomVerse.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":52,"fix":{"range":[265,282],"text":"@/app/(features)/home/hooks/useRandomVerse"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, waitFor } from '@testing-library/react';\nimport React from 'react';\nimport { SWRConfig } from 'swr';\n\nimport { getRandomVerse } from '@/lib/api';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport { useRandomVerse } from '../useRandomVerse';\n\njest.mock('@/lib/api', () => ({\n  getRandomVerse: jest.fn(),\n}));\n\ndescribe('useRandomVerse', () => {\n  it('logs warning when API fails', async () => {\n    (getRandomVerse as jest.Mock).mockRejectedValue(new Error('fail'));\n    const warnSpy = jest.spyOn(logger, 'warn').mockImplementation(() => {});\n\n    const wrapper = ({ children }: { children: React.ReactNode }): React.ReactElement => (\n      <SWRConfig value={{ provider: () => new Map() }}>{children}</SWRConfig>\n    );\n\n    const { result } = renderHook(() => useRandomVerse({ translationId: 1 }), { wrapper });\n\n    await waitFor(() => expect(result.current.isAvailable).toBe(false));\n    expect(warnSpy).toHaveBeenCalled();\n\n    warnSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useFallbackVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useRandomVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useSurahName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseOfDay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseRotation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseTransition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/JuzClient.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":64,"fix":{"range":[99,125],"text":"@/app/(features)/juz/hooks/useJuzClientState"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useJuzClientState } from '../hooks/useJuzClientState';\nimport { AudioPlayerBar } from './components/AudioPlayerBar';\nimport { JuzMain } from './components/JuzMain';\nimport { JuzSettings } from './components/JuzSettings';\n\nexport function JuzClient({ juzId }: { juzId: string }): JSX.Element {\n  const { t } = useTranslation();\n  const { isHidden, contentProps, settingsProps, playerBarProps } = useJuzClientState(juzId, t);\n\n  return (\n    <div className=\"flex flex-grow bg-surface text-foreground font-sans overflow-hidden min-h-0\">\n      <JuzMain isHidden={isHidden} contentProps={contentProps} />\n      <JuzSettings {...settingsProps} />\n      <AudioPlayerBar {...playerBarProps} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/AudioPlayerBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzMain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/__tests__/JuzPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzClientState.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useJuzClientState' has too many lines (59). Maximum allowed is 50.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":74,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { useCoverAndTrack } from '@/app/shared/hooks/useCoverAndTrack';\nimport { useSelectedNames } from '@/app/shared/hooks/useSelectedNames';\n\nimport { useJuzData } from './useJuzData';\n\nexport function useJuzClientState(juzId: string, t: (key: string) => string) {\n  const [isTranslationPanelOpen, setIsTranslationPanelOpen] = useState(false);\n  const [isWordPanelOpen, setIsWordPanelOpen] = useState(false);\n  const { isHidden } = useHeaderVisibility();\n\n  const {\n    juz,\n    juzError,\n    isLoading,\n    error,\n    verses,\n    isValidating,\n    isReachingEnd,\n    loadMoreRef,\n    translationOptions,\n    wordLanguageOptions,\n    settings,\n    activeVerse,\n    reciter,\n    isPlayerVisible,\n    handleNext,\n    handlePrev,\n  } = useJuzData(juzId);\n\n  const { selectedTranslationName, selectedWordLanguageName } = useSelectedNames({\n    settings,\n    translationOptions,\n    wordLanguageOptions,\n    t,\n  });\n\n  const { track } = useCoverAndTrack(activeVerse, reciter);\n\n  const contentProps = {\n    juzId,\n    isLoading,\n    error,\n    juzError,\n    juz,\n    verses,\n    loadMoreRef,\n    isValidating,\n    isReachingEnd,\n    t,\n  } as const;\n\n  const settingsProps = {\n    isTranslationPanelOpen,\n    setIsTranslationPanelOpen,\n    isWordPanelOpen,\n    setIsWordPanelOpen,\n    selectedTranslationName,\n    selectedWordLanguageName,\n  } as const;\n\n  const playerBarProps = {\n    isHidden,\n    track,\n    activeVerseExists: !!activeVerse,\n    isPlayerVisible,\n    onNext: handleNext,\n    onPrev: handlePrev,\n  } as const;\n\n  return { isHidden, contentProps, settingsProps, playerBarProps } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/layout/context/HeaderVisibilityContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/components/PageAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/components/PageContent.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":112,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":112,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { VerseCard } from '@/app/(features)/surah/components';\nimport { Spinner } from '@/app/shared/Spinner';\n\nimport type { Verse as VerseType } from '@/types';\n\nfunction LoadingState(): React.JSX.Element {\n  return (\n    <div className=\"flex justify-center py-12 md:py-20\">\n      <Spinner className=\"h-6 w-6 md:h-8 md:w-8 text-accent\" />\n    </div>\n  );\n}\n\nfunction ErrorState({ error }: { error: string }): React.JSX.Element {\n  return (\n    <div className=\"text-center py-12 md:py-20 text-status-error bg-surface border border-status-error/20 p-4 md:p-6 rounded-lg mx-2 md:mx-0\">\n      <p className=\"text-sm md:text-base\">{error}</p>\n    </div>\n  );\n}\n\nfunction EmptyState({ t }: { t: (key: string) => string }): React.JSX.Element {\n  return (\n    <div className=\"text-center py-12 md:py-20 text-muted\">\n      <p className=\"text-sm md:text-base\">{t('no_verses_found_on_page')}</p>\n    </div>\n  );\n}\n\nfunction LoadMoreIndicator({\n  isValidating,\n  isReachingEnd,\n  t,\n}: {\n  isValidating: boolean;\n  isReachingEnd: boolean;\n  t: (key: string) => string;\n}): React.JSX.Element {\n  return (\n    <div className=\"py-4 text-center\">\n      <div className=\"flex items-center justify-center space-x-2\">\n        {isValidating && <Spinner className=\"inline h-4 w-4 md:h-5 md:w-5 text-accent\" />}\n        {isReachingEnd && (\n          <span className=\"text-muted text-sm md:text-base\">{t('end_of_page')}</span>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction VersesList({\n  verses,\n  isValidating,\n  isReachingEnd,\n  loadMoreRef,\n  t,\n}: {\n  verses: VerseType[];\n  isValidating: boolean;\n  isReachingEnd: boolean;\n  loadMoreRef: React.Ref<HTMLDivElement>;\n  t: (key: string) => string;\n}): React.JSX.Element {\n  return (\n    <div className=\"space-y-4 md:space-y-6\">\n      {verses.map((verse: VerseType) => (\n        <VerseCard key={verse.id} verse={verse} />\n      ))}\n      <div ref={loadMoreRef}>\n        <LoadMoreIndicator isValidating={isValidating} isReachingEnd={isReachingEnd} t={t} />\n      </div>\n    </div>\n  );\n}\n\ninterface PageContentProps {\n  verses: VerseType[];\n  isLoading: boolean;\n  error: string | null;\n  isValidating: boolean;\n  isReachingEnd: boolean;\n  loadMoreRef: React.Ref<HTMLDivElement>;\n  isHidden: boolean;\n  className?: string;\n}\n\n/**\n * Renders the main content area with verses for a Quran page.\n * Implements mobile-first responsive design and performance optimization.\n *\n * Features:\n * - Infinite scrolling with load more functionality\n * - Loading and error states\n * - Mobile-first responsive layout\n * - Performance optimized with memo() wrapper\n */\nexport const PageContent = memo(function PageContent({\n  verses,\n  isLoading,\n  error,\n  isValidating,\n  isReachingEnd,\n  loadMoreRef,\n  isHidden,\n  className,\n}: PageContentProps): React.JSX.Element {\n  const { t } = useTranslation();\n\n  const getContent = () => {\n    if (isLoading) return <LoadingState />;\n    if (error) return <ErrorState error={error} />;\n    if (verses.length > 0) {\n      return (\n        <VersesList\n          verses={verses}\n          isValidating={isValidating}\n          isReachingEnd={isReachingEnd}\n          loadMoreRef={loadMoreRef}\n          t={t}\n        />\n      );\n    }\n    return <EmptyState t={t} />;\n  };\n\n  return (\n    <main\n      className={`\n        flex-grow bg-surface overflow-y-auto homepage-scrollable-area transition-all duration-300\n        ${\n          isHidden\n            ? 'pt-4 md:pt-6 lg:pt-10'\n            : 'pt-[calc(3.5rem+1rem+env(safe-area-inset-top))] md:pt-[calc(4rem+1.5rem+env(safe-area-inset-top))] lg:pt-[calc(4rem+2.5rem+env(safe-area-inset-top))]'\n        }\n        px-4 md:px-6 lg:px-10 pb-4 md:pb-6 lg:pb-10\n        ${className || ''}\n      `.trim()}\n    >\n      <div className=\"w-full relative space-y-4 md:space-y-6\">{getContent()}</div>\n    </main>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/hooks/usePageData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { SettingsSidebar } from '@/app/(features)/surah/components';\n\nimport { PageAudioPlayer } from './components/PageAudioPlayer';\nimport { PageContent } from './components/PageContent';\nimport { usePageData } from './hooks/usePageData';\n\nfunction useSettingsSidebar() {\n  const [isTranslationPanelOpen, setIsTranslationPanelOpen] = useState(false);\n  const [isWordPanelOpen, setIsWordPanelOpen] = useState(false);\n\n  return {\n    isTranslationPanelOpen,\n    isWordPanelOpen,\n    openTranslationPanel: () => setIsTranslationPanelOpen(true),\n    closeTranslationPanel: () => setIsTranslationPanelOpen(false),\n    openWordPanel: () => setIsWordPanelOpen(true),\n    closeWordPanel: () => setIsWordPanelOpen(false),\n  };\n}\n\ninterface PagePageProps {\n  params: Promise<{ pageId: string }>;\n}\n\n/**\n * Main page component for viewing verses by Quran page number\n */\nexport default function PagePage({ params }: PagePageProps): JSX.Element {\n  const { pageId } = React.use(params);\n  const { isHidden } = useHeaderVisibility();\n  const settingsSidebar = useSettingsSidebar();\n\n  const {\n    error,\n    isLoading,\n    verses,\n    isValidating,\n    isReachingEnd,\n    loadMoreRef,\n    selectedTranslationName,\n    selectedWordLanguageName,\n    isPlayerVisible,\n    handleNext,\n    handlePrev,\n    track,\n  } = usePageData({ pageId });\n\n  return (\n    <div className=\"flex flex-grow bg-surface text-foreground font-sans overflow-hidden\">\n      <PageContent\n        verses={verses}\n        isLoading={isLoading}\n        error={error}\n        isValidating={isValidating}\n        isReachingEnd={isReachingEnd}\n        loadMoreRef={loadMoreRef}\n        isHidden={isHidden}\n      />\n      <SettingsSidebar\n        onTranslationPanelOpen={settingsSidebar.openTranslationPanel}\n        onWordLanguagePanelOpen={settingsSidebar.openWordPanel}\n        onReadingPanelOpen={() => {}}\n        selectedTranslationName={selectedTranslationName}\n        selectedWordLanguageName={selectedWordLanguageName}\n        isTranslationPanelOpen={settingsSidebar.isTranslationPanelOpen}\n        onTranslationPanelClose={settingsSidebar.closeTranslationPanel}\n        isWordLanguagePanelOpen={settingsSidebar.isWordPanelOpen}\n        onWordLanguagePanelClose={settingsSidebar.closeWordPanel}\n      />\n      <PageAudioPlayer\n        track={track}\n        isVisible={isPlayerVisible}\n        isHidden={isHidden}\n        onNext={handleNext}\n        onPrev={handlePrev}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/__tests__/PagePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/search/__tests__/SearchPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/search/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/[surahId]/page.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":43,"fix":{"range":[27,40],"text":"@/app/(features)/surah/components"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { SurahView } from '../components';\n\ninterface SurahPageProps {\n  params: Promise<{ surahId: string }>;\n}\n\n/**\n * Surah page component for displaying a specific Surah.\n * Server component that handles async params and renders the SurahView.\n */\nasync function SurahPage({ params }: SurahPageProps): Promise<React.JSX.Element> {\n  const { surahId } = await params;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <SurahView surahId={surahId} />\n    </div>\n  );\n}\n\nexport default SurahPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/SettingsSidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/SurahPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/UseFontSize.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/UseVerseListing.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/Verse.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/ArabicFontPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/CollapsibleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahView.client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/VerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/WordLanguagePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahVerseList.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[144,161],"text":"@/app/(features)/surah/components/SurahVerseList"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\n\nimport { renderWithProviders, screen } from '@/app/testUtils/renderWithProviders';\n\nimport { SurahVerseList } from '../SurahVerseList';\n\nimport type { Verse } from '@/types';\n\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({ t: (key: string) => key }),\n}));\n\ndescribe('SurahVerseList', () => {\n  const baseProps = {\n    loadMoreRef: { current: null } as unknown as React.RefObject<HTMLDivElement | null>,\n    isValidating: false,\n    isReachingEnd: false,\n  };\n\n  it('shows spinner while loading', () => {\n    renderWithProviders(<SurahVerseList verses={[]} isLoading error={null} {...baseProps} />);\n\n    expect(screen.getByRole('img', { hidden: true })).toBeInTheDocument();\n  });\n\n  it('shows error state', () => {\n    renderWithProviders(\n      <SurahVerseList\n        verses={[]}\n        isLoading={false}\n        error=\"Failed to load content.\"\n        {...baseProps}\n      />\n    );\n    expect(screen.getByText(/Failed to load content/)).toBeInTheDocument();\n  });\n\n  it('renders verses and end-of-surah indicator', () => {\n    renderWithProviders(\n      <SurahVerseList\n        verses={[\n          {\n            id: 1,\n            verse_key: '1:1',\n            text_uthmani: '',\n            words: [],\n            translations: [],\n          } as Verse,\n        ]}\n        isLoading={false}\n        error={null}\n        isReachingEnd\n        {...baseProps}\n      />\n    );\n\n    // Verse container rendered\n    expect(document.querySelector('#verse-1')).toBeInTheDocument();\n\n    // End marker uses i18n key\n    expect(screen.getByText('end_of_surah')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/architecture.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/error-handling.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/interaction.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/loading.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/performance.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":52,"fix":{"range":[134,156],"text":"@/app/(features)/surah/components/SurahView.client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import './test-utils';\nimport { createPerformanceTestSuite } from '@/app/testUtils/performanceTestUtils';\n\nimport { SurahView } from '../../SurahView.client';\n\ncreatePerformanceTestSuite('SurahView', SurahView, { surahId: '1' });\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/responsive.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/test-utils.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[131,153],"text":"@/app/(features)/surah/components/SurahView.client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\n\nimport { renderWithProviders } from '@/app/testUtils/renderWithProviders';\n\nimport { SurahView } from '../../SurahView.client';\n\n// Mock i18n to return keys directly\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({ t: (key: string) => key }),\n}));\n\n// Stable matchMedia for responsive utilities in JSDOM\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\nexport const defaultPanels = {\n  isTranslationPanelOpen: false,\n  openTranslationPanel: jest.fn(),\n  closeTranslationPanel: jest.fn(),\n  isWordLanguagePanelOpen: false,\n  openWordLanguagePanel: jest.fn(),\n  closeWordLanguagePanel: jest.fn(),\n  selectedTranslationName: 'Sahih International',\n  selectedWordLanguageName: 'English',\n};\n\nexport const defaultVerseListing = {\n  error: null,\n  isLoading: false,\n  verses: [\n    {\n      id: 1,\n      verse_key: '1:1',\n      words: [],\n      translations: [],\n    },\n  ],\n  isValidating: false,\n  isReachingEnd: true,\n  loadMoreRef: { current: null },\n  translationOptions: [],\n  wordLanguageOptions: [],\n  wordLanguageMap: {},\n  settings: { translationFontSize: 16 },\n  setSettings: jest.fn(),\n  activeVerse: null,\n  reciter: { id: 1, name: 'Reciter', path: 'reciter' },\n  isPlayerVisible: false,\n  handleNext: jest.fn(),\n  handlePrev: jest.fn(),\n};\n\nexport const mockUseSurahPanels = jest.fn().mockReturnValue(defaultPanels);\nexport const mockUseVerseListing = jest.fn().mockReturnValue(defaultVerseListing);\n\njest.mock('../../hooks', () => {\n  const actual = jest.requireActual('../../hooks');\n  return {\n    ...actual,\n    useSurahPanels: (...args: unknown[]) => mockUseSurahPanels(...args),\n    useVerseListing: (...args: unknown[]) => mockUseVerseListing(...args),\n  };\n});\n\nexport const renderSurahView = (surahId = '1'): ReturnType<typeof renderWithProviders> => {\n  return renderWithProviders(<SurahView surahId={surahId} />);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":85,"fix":{"range":[198,244],"text":"@/app/(features)/surah/components/panels/arabic-font-panel/useArabicFontPanel"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { AlertIcon } from '@/app/shared/icons';\n\nimport { ArabicFontList } from './ArabicFontList';\nimport { FilterToggle } from './FilterToggle';\nimport { useArabicFontPanel } from '../panels/arabic-font-panel/useArabicFontPanel';\n\nfunction LoadingState(): React.JSX.Element {\n  return (\n    <div className=\"flex-1 flex items-center justify-center p-8\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-muted\" />\n    </div>\n  );\n}\n\nfunction ErrorState({ error }: { error: string }): React.JSX.Element {\n  return (\n    <div className=\"mx-4 mt-4 p-4 rounded-lg border bg-error/10 border-error/20 text-error\">\n      <div className=\"flex items-center space-x-2\">\n        <AlertIcon className=\"h-5 w-5 text-status-error\" />\n        <span className=\"text-sm\">{error}</span>\n      </div>\n    </div>\n  );\n}\n\nfunction FontContent({\n  activeFilter,\n  setActiveFilter,\n  resourcesToRender,\n  selectedIds,\n  handleSelectionToggle,\n  listContainerRef,\n  listHeight,\n}: {\n  activeFilter: string;\n  setActiveFilter: (filter: string) => void;\n  resourcesToRender: unknown[];\n  selectedIds: Set<string>;\n  handleSelectionToggle: (id: string) => void;\n  listContainerRef: React.RefObject<HTMLDivElement | null>;\n  listHeight: number;\n}): React.JSX.Element {\n  return (\n    <div className=\"flex-1 flex flex-col min-h-0\">\n      <div className=\"flex-1 overflow-y-auto\" ref={listContainerRef}>\n        <div className=\"px-4 py-4\">\n          <FilterToggle\n            activeFilter={activeFilter as 'Uthmani' | 'IndoPak'}\n            setActiveFilter={setActiveFilter as (f: 'Uthmani' | 'IndoPak') => void}\n          />\n        </div>\n        <ArabicFontList\n          resources={resourcesToRender}\n          selectedIds={selectedIds}\n          onToggle={handleSelectionToggle}\n          height={listHeight}\n        />\n      </div>\n    </div>\n  );\n}\n\ninterface ArabicFontContentProps {\n  panel: ReturnType<typeof useArabicFontPanel>;\n  listContainerRef: React.RefObject<HTMLDivElement | null>;\n  listHeight: number;\n}\n\nexport function ArabicFontContent({\n  panel,\n  listContainerRef,\n  listHeight,\n}: ArabicFontContentProps): React.JSX.Element {\n  const {\n    loading,\n    error,\n    groupedFonts,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    handleSelectionToggle,\n  } = panel;\n  const resourcesToRender = groupedFonts[activeFilter] || [];\n\n  if (loading) return <LoadingState />;\n  if (error) return <ErrorState error={error} />;\n\n  return (\n    <FontContent\n      activeFilter={activeFilter}\n      setActiveFilter={setActiveFilter}\n      resourcesToRender={resourcesToRender}\n      selectedIds={selectedIds}\n      handleSelectionToggle={handleSelectionToggle}\n      listContainerRef={listContainerRef}\n      listHeight={listHeight}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/FilterToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/ArabicFontSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/ArabicFontSelectionList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":74,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\nimport { GripVerticalIcon, CloseIcon } from '@/app/shared/icons';\n\ninterface ArabicFont {\n  id: number;\n  name: string;\n  value: string;\n  category: string;\n  lang: string;\n}\n\ninterface ArabicFontSelectionListProps {\n  orderedSelection: number[];\n  fonts: ArabicFont[];\n  handleSelectionToggle: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n}\n\nconst renderFontItem = (\n  item: ArabicFont,\n  id: number,\n  handlers: {\n    handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n    handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n    handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n    handleDragEnd: () => void;\n    handleSelection: (id: number) => void;\n  },\n  draggedId: number | null\n): React.JSX.Element => (\n  <div\n    key={id}\n    draggable\n    onDragStart={(e) => handlers.handleDragStart(e, id)}\n    onDragOver={handlers.handleDragOver}\n    onDrop={(e) => handlers.handleDrop(e, id)}\n    onDragEnd={handlers.handleDragEnd}\n    className={`flex items-center justify-between p-3 rounded-lg cursor-grab active:cursor-grabbing transition-all duration-200 ${\n      draggedId === id ? 'opacity-50' : 'opacity-100'\n    } bg-surface border border-border hover:bg-accent/10`}\n  >\n    <div className=\"flex items-center min-w-0\">\n      <GripVerticalIcon className=\"h-4 w-4 mr-3 flex-shrink-0 text-muted\" />\n      <div className=\"min-w-0\">\n        <span className=\"font-medium text-sm block truncate text-foreground\">{item.name}</span>\n        <span className=\"text-xs text-muted\">{item.category}</span>\n      </div>\n    </div>\n    <button\n      onClick={() => handlers.handleSelection(id)}\n      className=\"hover:text-accent hover:bg-accent/10 transition-all duration-200 p-1.5 rounded-full flex-shrink-0 ml-2 text-muted\"\n    >\n      <CloseIcon size={14} strokeWidth={2.5} />\n    </button>\n  </div>\n);\n\nexport const ArabicFontSelectionList = ({\n  orderedSelection,\n  fonts,\n  handleSelectionToggle,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n  handleDragEnd,\n  draggedId,\n}: ArabicFontSelectionListProps): React.JSX.Element => {\n  const handleSelection = (id: number) => handleSelectionToggle(id);\n\n  return (\n    <div>\n      <h2 className=\"text-sm font-semibold px-2 mb-3 flex items-center justify-between text-muted\">\n        <span>SELECTED FONT ({orderedSelection.length}/1)</span>\n        {orderedSelection.length >= 1 && (\n          <span className=\"text-xs px-2.5 py-1 rounded-full bg-accent/10 text-accent font-medium\">\n            ACTIVE\n          </span>\n        )}\n      </h2>\n      <div className=\"space-y-2 min-h-[60px] rounded-lg p-3 bg-surface border border-border\">\n        {orderedSelection.length === 0 ? (\n          <p className=\"text-center text-sm py-4 text-muted font-medium\">No Arabic font selected</p>\n        ) : (\n          orderedSelection.map((id) => {\n            const item = fonts.find((font) => font.id === id);\n            if (!item) return null;\n            return renderFontItem(\n              item,\n              id,\n              { handleDragStart, handleDragOver, handleDrop, handleDragEnd, handleSelection },\n              draggedId\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/useArabicFontPanel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirLimitWarning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirSelectionList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":93,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":93,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { GripVerticalIcon, CloseIcon } from '@/app/shared/icons';\nimport { TafsirResource } from '@/types';\n\nimport { MAX_TAFSIR_SELECTIONS } from './tafsirPanel.utils';\n\nfunction SelectionHeader({ selectionCount }: { selectionCount: number }): React.JSX.Element {\n  return (\n    <h2 className=\"text-sm font-semibold px-1 mb-2 flex items-center justify-between text-muted\">\n      <span>\n        MY SELECTIONS ({selectionCount}/{MAX_TAFSIR_SELECTIONS})\n      </span>\n      {selectionCount >= MAX_TAFSIR_SELECTIONS && (\n        <span className=\"text-xs px-2 py-1 rounded-full bg-accent/10 text-accent\">MAX</span>\n      )}\n    </h2>\n  );\n}\n\nfunction EmptySelectionState(): React.JSX.Element {\n  return <p className=\"text-center text-sm py-2 text-muted\">No tafsirs selected</p>;\n}\n\nfunction DraggableTafsirItem({\n  id,\n  item,\n  isDragged,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  onDragEnd,\n  onToggle,\n}: {\n  id: number;\n  item: TafsirResource;\n  isDragged: boolean;\n  onDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  onDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  onDragEnd: () => void;\n  onToggle: (id: number) => void;\n}): React.JSX.Element {\n  return (\n    <div\n      key={id}\n      draggable\n      onDragStart={(e) => onDragStart(e, id)}\n      onDragOver={onDragOver}\n      onDrop={(e) => onDrop(e, id)}\n      onDragEnd={onDragEnd}\n      className={`flex items-center justify-between p-2 rounded-lg shadow-sm cursor-grab active:cursor-grabbing transition-opacity border ${\n        isDragged ? 'opacity-50' : 'opacity-100'\n      } bg-background border-border`}\n    >\n      <div className=\"flex items-center min-w-0\">\n        <GripVerticalIcon className=\"h-5 w-5 mr-2 flex-shrink-0 text-muted\" />\n        <span className=\"font-medium text-sm truncate text-foreground\">{item.name}</span>\n      </div>\n      <button\n        onClick={() => onToggle(id)}\n        className=\"hover:text-accent transition-colors p-1 rounded-full flex-shrink-0 ml-2 text-muted\"\n      >\n        <CloseIcon size={16} strokeWidth={2.5} />\n      </button>\n    </div>\n  );\n}\n\ninterface TafsirSelectionListProps {\n  orderedSelection: number[];\n  tafsirs: TafsirResource[];\n  handleSelectionToggle: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n}\n\nexport const TafsirSelectionList = ({\n  orderedSelection,\n  tafsirs,\n  handleSelectionToggle,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n  handleDragEnd,\n  draggedId,\n}: TafsirSelectionListProps): React.JSX.Element => {\n  const renderSelectionItems = () => {\n    if (orderedSelection.length === 0) {\n      return <EmptySelectionState />;\n    }\n\n    return orderedSelection.map((id) => {\n      const item = tafsirs.find((t) => t.id === id);\n      if (!item) return null;\n\n      return (\n        <DraggableTafsirItem\n          key={id}\n          id={id}\n          item={item}\n          isDragged={draggedId === id}\n          onDragStart={handleDragStart}\n          onDragOver={handleDragOver}\n          onDrop={handleDrop}\n          onDragEnd={handleDragEnd}\n          onToggle={handleSelectionToggle}\n        />\n      );\n    });\n  };\n\n  return (\n    <div>\n      <SelectionHeader selectionCount={orderedSelection.length} />\n      <div className=\"space-y-2 min-h-[40px] rounded-lg p-2 bg-background border border-border\">\n        {renderSelectionItems()}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirPanelContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":60,"fix":{"range":[220,241],"text":"@/app/(features)/surah/components/panels/tafsir-panel/TafsirLimitWarning"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":48,"fix":{"range":[386,401],"text":"@/app/(features)/surah/components/panels/tafsir-panel/TafsirSearch"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":62,"fix":{"range":[441,463],"text":"@/app/(features)/surah/components/panels/tafsir-panel/TafsirSelectionList"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (61). Maximum allowed is 50.","line":58,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":120,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport React from 'react';\n\nimport { AlertIcon } from '@/app/shared/icons';\n// Resource list usage moved to TafsirVirtualList\nimport { TafsirResource } from '@/types';\n\nimport { TafsirLimitWarning } from '../TafsirLimitWarning';\nimport { TafsirTabsHeader } from './TafsirTabsHeader';\nimport { TafsirVirtualList } from './TafsirVirtualList';\nimport { TafsirSearch } from '../TafsirSearch';\nimport { TafsirSelectionList } from '../TafsirSelectionList';\n\ninterface TafsirPanelContentProps {\n  loading: boolean;\n  error: string | null;\n  showLimitWarning: boolean;\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  orderedSelection: number[];\n  tafsirs: TafsirResource[];\n  handleSelectionToggle: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n  languages: string[];\n  activeFilter: string;\n  setActiveFilter: (filter: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n  resourcesToRender: TafsirResource[];\n  selectedIds: Set<number>;\n  listHeight: number;\n  listContainerRef: React.RefObject<HTMLDivElement>;\n}\n\nconst LoadingSpinner = (): React.JSX.Element => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-accent\" />\n  </div>\n);\n\nconst ErrorMessage = ({ error }: { error: string }): React.JSX.Element => (\n  <div className=\"mx-4 mt-4 p-4 rounded-lg border bg-error/10 border-error/20 text-error\">\n    <div className=\"flex items-center space-x-2\">\n      <AlertIcon className=\"h-5 w-5 text-error\" />\n      <span className=\"text-sm\">{error}</span>\n    </div>\n  </div>\n);\n\nconst TafsirContentBody = ({\n  showLimitWarning,\n  searchTerm,\n  setSearchTerm,\n  orderedSelection,\n  tafsirs,\n  handleSelectionToggle,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n  handleDragEnd,\n  draggedId,\n  languages,\n  activeFilter,\n  setActiveFilter,\n  tabsContainerRef,\n  canScrollLeft,\n  canScrollRight,\n  scrollTabsLeft,\n  scrollTabsRight,\n  resourcesToRender,\n  selectedIds,\n  listHeight,\n  listContainerRef,\n}: Omit<TafsirPanelContentProps, 'loading' | 'error'>): React.JSX.Element => (\n  <>\n    <TafsirLimitWarning show={showLimitWarning} />\n    <div className=\"flex-1 overflow-y-auto\" ref={listContainerRef}>\n      <div className=\"p-4 space-y-4\">\n        <TafsirSearch searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n        <TafsirSelectionList\n          orderedSelection={orderedSelection}\n          tafsirs={tafsirs}\n          handleSelectionToggle={handleSelectionToggle}\n          handleDragStart={handleDragStart}\n          handleDragOver={handleDragOver}\n          handleDrop={handleDrop}\n          handleDragEnd={handleDragEnd}\n          draggedId={draggedId}\n        />\n      </div>\n\n      <TafsirTabsHeader\n        languages={languages}\n        activeFilter={activeFilter}\n        setActiveFilter={setActiveFilter}\n        tabsContainerRef={tabsContainerRef}\n        canScrollLeft={canScrollLeft}\n        canScrollRight={canScrollRight}\n        scrollTabsLeft={scrollTabsLeft}\n        scrollTabsRight={scrollTabsRight}\n      />\n\n      <TafsirVirtualList\n        resources={resourcesToRender}\n        selectedIds={selectedIds}\n        onToggle={handleSelectionToggle}\n        height={listHeight}\n        total={tafsirs.length}\n      />\n    </div>\n  </>\n);\n\nexport const TafsirPanelContent = (props: TafsirPanelContentProps): React.JSX.Element => {\n  const { loading, error } = props;\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage error={error} />;\n\n  return <TafsirContentBody {...props} />;\n};\n\n// moved to ./TafsirVirtualList\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirTabsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirVirtualList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/hooks/useTafsirSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/tafsirPanel.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/SelectedTranslationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationSelectionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelContentBody.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":58,"fix":{"range":[78,98],"text":"@/app/(features)/surah/components/panels/translation-panel/TranslationSearch"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":72,"fix":{"range":[143,170],"text":"@/app/(features)/surah/components/panels/translation-panel/TranslationSelectionList"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport React from 'react';\n\nimport { TranslationSearch } from '../TranslationSearch';\nimport { TranslationSelectionList } from '../TranslationSelectionList';\nimport { TranslationsByLanguage } from './TranslationsByLanguage';\nimport { TranslationsVirtualList } from './TranslationsVirtualList';\nimport { TranslationTabsHeader } from './TranslationTabsHeader';\n\nimport type { TranslationResource } from '@/types';\n\ninterface TranslationPanelContentBodyProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  orderedSelection: number[];\n  translations: TranslationResource[];\n  handleSelection: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n  languages: string[];\n  activeFilter: string;\n  setActiveFilter: (filter: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n  sectionsToRender: Array<{ language: string; items: TranslationResource[] }>;\n  resourcesToRender: TranslationResource[];\n  selectedIds: Set<number>;\n  listHeight: number;\n  listContainerRef: React.RefObject<HTMLDivElement>;\n}\n\nexport function PanelContentBody(props: TranslationPanelContentBodyProps): React.JSX.Element {\n  return (\n    <div className=\"flex-1 overflow-y-auto\" ref={props.listContainerRef}>\n      <HeaderSection\n        searchTerm={props.searchTerm}\n        setSearchTerm={props.setSearchTerm}\n        orderedSelection={props.orderedSelection}\n        translations={props.translations}\n        handleSelection={props.handleSelection}\n        handleDragStart={props.handleDragStart}\n        handleDragOver={props.handleDragOver}\n        handleDrop={props.handleDrop}\n        handleDragEnd={props.handleDragEnd}\n        draggedId={props.draggedId}\n      />\n\n      <TranslationTabsHeader\n        languages={props.languages}\n        activeFilter={props.activeFilter}\n        setActiveFilter={props.setActiveFilter}\n        tabsContainerRef={props.tabsContainerRef}\n        canScrollLeft={props.canScrollLeft}\n        canScrollRight={props.canScrollRight}\n        scrollTabsLeft={props.scrollTabsLeft}\n        scrollTabsRight={props.scrollTabsRight}\n      />\n\n      <ResultsSection\n        activeFilter={props.activeFilter}\n        sectionsToRender={props.sectionsToRender}\n        resourcesToRender={props.resourcesToRender}\n        selectedIds={props.selectedIds}\n        onToggle={props.handleSelection}\n        listHeight={props.listHeight}\n      />\n    </div>\n  );\n}\n\nfunction HeaderSection({\n  searchTerm,\n  setSearchTerm,\n  orderedSelection,\n  translations,\n  handleSelection,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n  handleDragEnd,\n  draggedId,\n}: Pick<\n  TranslationPanelContentBodyProps,\n  | 'searchTerm'\n  | 'setSearchTerm'\n  | 'orderedSelection'\n  | 'translations'\n  | 'handleDragStart'\n  | 'handleDragOver'\n  | 'handleDrop'\n  | 'handleDragEnd'\n  | 'draggedId'\n> & { handleSelection: (id: number) => void }): React.JSX.Element {\n  return (\n    <div className=\"p-4 space-y-4\">\n      <TranslationSearch searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\n      <TranslationSelectionList\n        orderedSelection={orderedSelection}\n        translations={translations}\n        handleSelectionToggle={handleSelection}\n        handleDragStart={handleDragStart}\n        handleDragOver={handleDragOver}\n        handleDrop={handleDrop}\n        handleDragEnd={handleDragEnd}\n        draggedId={draggedId}\n      />\n    </div>\n  );\n}\n\nfunction ResultsSection({\n  activeFilter,\n  sectionsToRender,\n  resourcesToRender,\n  selectedIds,\n  onToggle,\n  listHeight,\n}: Pick<\n  TranslationPanelContentBodyProps,\n  'activeFilter' | 'sectionsToRender' | 'resourcesToRender' | 'selectedIds' | 'listHeight'\n> & { onToggle: (id: number) => void }): React.JSX.Element {\n  return (\n    <div className=\"px-4 pb-4 pt-4\">\n      {activeFilter === 'All' ? (\n        <TranslationsByLanguage\n          sectionsToRender={sectionsToRender}\n          selectedIds={selectedIds}\n          onToggle={onToggle}\n        />\n      ) : (\n        <TranslationsVirtualList\n          resources={resourcesToRender}\n          selectedIds={selectedIds}\n          onToggle={onToggle}\n          height={listHeight}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationTabsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationsByLanguage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationsVirtualList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTabsScroll.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":75,"fix":{"range":[129,154],"text":"@/app/(features)/surah/components/panels/translation-panel/translationPanel.utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useRef, useState, useEffect, useCallback } from 'react';\n\nimport { scrollTabs, updateScrollState } from '../translationPanel.utils';\n\nexport const useTabsScroll = (\n  languages: string[]\n): {\n  tabsContainerRef: React.RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n} => {\n  const tabsContainerRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(false);\n\n  const handleTabsScroll = useCallback(\n    () => updateScrollState(tabsContainerRef, setCanScrollLeft, setCanScrollRight),\n    []\n  );\n\n  useEffect(() => {\n    handleTabsScroll();\n    const container = tabsContainerRef.current;\n    if (!container) return;\n    container.addEventListener('scroll', handleTabsScroll);\n    window.addEventListener('resize', handleTabsScroll);\n    return () => {\n      container.removeEventListener('scroll', handleTabsScroll);\n      window.removeEventListener('resize', handleTabsScroll);\n    };\n  }, [languages, handleTabsScroll]);\n\n  const scrollTabsLeft = useCallback(() => scrollTabs(tabsContainerRef, 'left'), []);\n  const scrollTabsRight = useCallback(() => scrollTabs(tabsContainerRef, 'right'), []);\n\n  return {\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationsData.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":68,"fix":{"range":[286,310],"text":"@/app/(features)/surah/components/panels/translation-panel/translationPanel.data"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":68,"fix":{"range":[353,378],"text":"@/app/(features)/surah/components/panels/translation-panel/translationPanel.utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { getTranslations } from '@/lib/api/translations';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\nimport { TranslationResource } from '@/types';\n\nimport { initialTranslationsData } from '../translationPanel.data';\nimport { capitalizeLanguageName } from '../translationPanel.utils';\n\nexport const useTranslationsData = (): {\n  translations: TranslationResource[];\n  loading: boolean;\n  error: string | null;\n  languageSort: (a: string, b: string) => number;\n} => {\n  const [translations, setTranslations] = useState<TranslationResource[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadTranslationsAsync = async (): Promise<void> => {\n      try {\n        setLoading(true);\n        setError(null);\n        const apiTranslations = await getTranslations();\n        const formatted = apiTranslations.map((t) => ({\n          ...t,\n          lang: capitalizeLanguageName(t.lang),\n        }));\n        setTranslations(formatted);\n      } catch (err) {\n        logger.error('Failed to fetch translations from API:', undefined, err as Error);\n        setError('Failed to load translations from API. Using offline data.');\n        setTranslations(initialTranslationsData);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (translations.length === 0) {\n      loadTranslationsAsync();\n    }\n  }, [translations.length]);\n\n  const languageSort = useCallback((a: string, b: string) => {\n    if (a === 'English') return -1;\n    if (b === 'English') return 1;\n    if (a === 'Bengali') return -1;\n    if (b === 'Bengali') return 1;\n    return a.localeCompare(b);\n  }, []);\n\n  return { translations, loading, error, languageSort } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/translationPanel.data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/translationPanel.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/useTranslationPanel.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\n\nimport { useTabsScroll } from './hooks/useTabsScroll';\nimport { useTranslationsData } from './hooks/useTranslationsData';\nimport { useTranslationSelection } from './hooks/useTranslationSelection';\n\nexport const useTranslationPanel = () => {\n  const { theme } = useTheme();\n  const { translations, loading, error, languageSort } = useTranslationsData();\n  const {\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTranslations,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n  } = useTranslationSelection(translations, languageSort);\n  const { tabsContainerRef, canScrollLeft, canScrollRight, scrollTabsLeft, scrollTabsRight } =\n    useTabsScroll(languages);\n\n  return {\n    theme,\n    translations,\n    loading,\n    error,\n    languages,\n    groupedTranslations,\n    activeFilter,\n    setActiveFilter,\n    searchTerm,\n    setSearchTerm,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/FontSettings.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":55,"fix":{"range":[306,329],"text":"@/app/(features)/surah/hooks/useFontSize"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\n\nimport { FontSettingsContent } from './font-settings/FontSettingsContent';\nimport { useFontSize } from '../../hooks/useFontSize';\n\ninterface FontSettingsProps {\n  onArabicFontPanelOpen: () => void;\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\nexport const FontSettings = ({\n  onArabicFontPanelOpen,\n  isOpen = false,\n  onToggle,\n}: FontSettingsProps): JSX.Element => {\n  const { settings, setSettings, arabicFonts } = useSettings();\n  const { t } = useTranslation();\n  const [isClient, setIsClient] = useState(false);\n  const { style: arabicStyle } = useFontSize(settings.arabicFontSize, 16, 48);\n  const { style: translationStyle } = useFontSize(settings.translationFontSize, 12, 28);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  const handleArabicFontSizeChange = useCallback(\n    (value: number): void => {\n      setSettings((prev) => ({ ...prev, arabicFontSize: value }));\n    },\n    [setSettings]\n  );\n\n  const handleTranslationFontSizeChange = useCallback(\n    (value: number): void => {\n      setSettings((prev) => ({ ...prev, translationFontSize: value }));\n    },\n    [setSettings]\n  );\n\n  const selectedArabicFont = useMemo(() => {\n    if (!isClient) return '';\n    return (\n      arabicFonts.find((font) => font.value === settings.arabicFontFace)?.name || t('select_font')\n    );\n  }, [arabicFonts, isClient, settings.arabicFontFace, t]);\n\n  return (\n    <FontSettingsContent\n      isOpen={isOpen}\n      onToggle={onToggle}\n      isClient={isClient}\n      settings={settings}\n      arabicStyle={arabicStyle}\n      translationStyle={translationStyle}\n      selectedArabicFont={selectedArabicFont}\n      onArabicFontPanelOpen={onArabicFontPanelOpen}\n      handleArabicFontSizeChange={handleArabicFontSizeChange}\n      handleTranslationFontSizeChange={handleTranslationFontSizeChange}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/ReadingSettings.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":60,"fix":{"range":[133,154],"text":"@/app/(features)/surah/components/CollapsibleSection"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { BookReaderIcon } from '@/app/shared/icons';\n\nimport { CollapsibleSection } from '../CollapsibleSection';\n\ninterface ReadingSettingsProps {\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ReadingSettings = ({\n  isOpen = false,\n  onToggle,\n}: ReadingSettingsProps): JSX.Element => {\n  return (\n    <CollapsibleSection\n      title=\"Mushaf Settings\"\n      icon={<BookReaderIcon size={20} className=\"text-accent\" />}\n      isLast={false}\n      isOpen={isOpen}\n      onToggle={onToggle || (() => {})}\n    >\n      <div className=\"text-center py-8 text-muted\">Coming soon...</div>\n    </CollapsibleSection>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsContentWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsPanels.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":54,"fix":{"range":[76,94],"text":"@/app/(features)/surah/components/ArabicFontPanel"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":59,"fix":{"range":[144,153],"text":"@/app/(features)/surah/components/panels"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":58,"fix":{"range":[191,211],"text":"@/app/(features)/surah/components/WordLanguagePanel"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport React from 'react';\n\nimport { ArabicFontPanel } from '../ArabicFontPanel';\nimport { TranslationPanel, TafsirPanel } from '../panels';\nimport { WordLanguagePanel } from '../WordLanguagePanel';\nimport { SettingsPanelsProps } from './types';\n\nexport const SettingsPanels = ({\n  isArabicFontPanelOpen,\n  onArabicFontPanelClose,\n  isTranslationPanelOpen,\n  onTranslationPanelClose,\n  isTafsirPanelOpen,\n  onTafsirPanelClose,\n  isWordLanguagePanelOpen,\n  onWordLanguagePanelClose,\n}: SettingsPanelsProps): React.JSX.Element => {\n  return (\n    <>\n      <ArabicFontPanel isOpen={isArabicFontPanelOpen} onClose={onArabicFontPanelClose} />\n      {onTranslationPanelClose && (\n        <TranslationPanel isOpen={!!isTranslationPanelOpen} onClose={onTranslationPanelClose} />\n      )}\n      {onTafsirPanelClose && (\n        <TafsirPanel isOpen={!!isTafsirPanelOpen} onClose={onTafsirPanelClose} />\n      )}\n      {onWordLanguagePanelClose && (\n        <WordLanguagePanel isOpen={!!isWordLanguagePanelOpen} onClose={onWordLanguagePanelClose} />\n      )}\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsSidebar.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":72,"fix":{"range":[423,434],"text":"@/app/(features)/surah/hooks"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React, { useState, useCallback } from 'react';\n\nimport { useUIState } from '@/app/providers/UIStateContext';\nimport { BaseSidebar } from '@/app/shared/components/BaseSidebar';\n\nimport { SettingsContentWrapper } from './SettingsContentWrapper';\nimport { SettingsPanels } from './SettingsPanels';\nimport { SettingsSidebarProps } from './types';\nimport { useSettingsTabState, useSettingsSections } from '../../hooks';\nimport { buildContentWrapperProps } from './sidebar/SettingsContentWrapperProps';\nimport { buildPanelsProps } from './sidebar/SettingsPanelsProps';\n\nexport const SettingsSidebar = (props: SettingsSidebarProps) => {\n  const { isSettingsOpen, setSettingsOpen } = useUIState();\n  const [isArabicFontPanelOpen, setIsArabicFontPanelOpen] = useState(false);\n\n  const { activeTab, handleTabChange, tabOptions } = useSettingsTabState({\n    ...(props.onReadingPanelOpen !== undefined\n      ? { onReadingPanelOpen: props.onReadingPanelOpen }\n      : {}),\n  });\n  const { openSections, handleSectionToggle } = useSettingsSections();\n\n  const handleCloseSidebar = useCallback(() => setSettingsOpen(false), [setSettingsOpen]);\n  const handleOpenArabicFontPanel = useCallback(() => setIsArabicFontPanelOpen(true), []);\n  const handleCloseArabicFontPanel = useCallback(() => setIsArabicFontPanelOpen(false), []);\n\n  const contentWrapperProps = buildContentWrapperProps(props, {\n    activeTab,\n    onTabChange: handleTabChange,\n    tabOptions,\n    openSections,\n    onSectionToggle: handleSectionToggle,\n    onArabicFontPanelOpen: handleOpenArabicFontPanel,\n  });\n\n  const panelsProps = buildPanelsProps(props, {\n    isArabicFontPanelOpen,\n    onArabicFontPanelClose: handleCloseArabicFontPanel,\n  });\n\n  return (\n    <BaseSidebar\n      isOpen={isSettingsOpen}\n      onClose={handleCloseSidebar}\n      position=\"right\"\n      aria-label=\"Settings panel\"\n    >\n      <SettingsContentWrapper {...contentWrapperProps} />\n      <SettingsPanels {...panelsProps} />\n    </BaseSidebar>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/TafsirSettings.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":55,"fix":{"range":[295,318],"text":"@/app/(features)/surah/hooks/useFontSize"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":60,"fix":{"range":[357,378],"text":"@/app/(features)/surah/components/CollapsibleSection"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { BookReaderIcon } from '@/app/shared/icons';\nimport { SelectionBox } from '@/app/shared/SelectionBox';\n\nimport { useFontSize } from '../../hooks/useFontSize';\nimport { CollapsibleSection } from '../CollapsibleSection';\n\ninterface TafsirSettingsProps {\n  onTafsirPanelOpen?: () => void;\n  selectedTafsirName?: string;\n  showTafsirSetting?: boolean;\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\nexport const TafsirSettings = ({\n  onTafsirPanelOpen,\n  selectedTafsirName,\n  showTafsirSetting = false,\n  isOpen = false,\n  onToggle,\n}: TafsirSettingsProps): React.JSX.Element => {\n  const { settings, setSettings } = useSettings();\n  const { t } = useTranslation();\n  const { style: tafsirStyle } = useFontSize(settings.tafsirFontSize, 12, 28);\n\n  return (\n    <>\n      {showTafsirSetting && (\n        <CollapsibleSection\n          title={t('tafsir_setting')}\n          icon={<BookReaderIcon size={20} className=\"text-accent\" />}\n          isLast={true}\n          isOpen={isOpen}\n          onToggle={onToggle || (() => {})}\n        >\n          <div className=\"space-y-4\">\n            <SelectionBox\n              label={t('select_tafsir')}\n              value={selectedTafsirName || ''}\n              onClick={() => onTafsirPanelOpen?.()}\n            />\n            <div>\n              <div className=\"flex justify-between mb-1 text-sm\">\n                <label className=\"text-foreground\">{t('tafsir_font_size')}</label>\n                <span className=\"font-semibold text-accent\">{settings.tafsirFontSize}</span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"12\"\n                max=\"28\"\n                value={settings.tafsirFontSize}\n                onChange={(e) => setSettings({ ...settings, tafsirFontSize: +e.target.value })}\n                style={tafsirStyle}\n              />\n            </div>\n          </div>\n        </CollapsibleSection>\n      )}\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/TranslationSettings.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":60,"fix":{"range":[303,324],"text":"@/app/(features)/surah/components/CollapsibleSection"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { TranslationIcon } from '@/app/shared/icons';\nimport { SelectionBox } from '@/app/shared/SelectionBox';\n\nimport { CollapsibleSection } from '../CollapsibleSection';\n\ninterface TranslationSettingsProps {\n  onTranslationPanelOpen: () => void;\n  onWordLanguagePanelOpen: () => void;\n  selectedTranslationName: string;\n  selectedWordLanguageName: string;\n  isOpen?: boolean;\n  onToggle?: () => void;\n}\n\nexport const TranslationSettings = ({\n  onTranslationPanelOpen,\n  onWordLanguagePanelOpen,\n  selectedTranslationName,\n  selectedWordLanguageName,\n  isOpen = false,\n  onToggle,\n}: TranslationSettingsProps): React.JSX.Element => {\n  const { settings, setSettings } = useSettings();\n  const { t } = useTranslation();\n\n  const toggleShowByWords = React.useCallback(() => {\n    setSettings({ ...settings, showByWords: !settings.showByWords });\n  }, [setSettings, settings]);\n\n  const toggleTajweed = React.useCallback(() => {\n    setSettings({ ...settings, tajweed: !settings.tajweed });\n  }, [setSettings, settings]);\n\n  return (\n    <CollapsibleSection\n      title={t('reading_setting')}\n      icon={<TranslationIcon size={20} className=\"text-accent\" />}\n      isLast={true}\n      isOpen={isOpen}\n      onToggle={onToggle || (() => {})}\n    >\n      <ReadingSettingsContent\n        t={t}\n        settings={settings}\n        toggleShowByWords={toggleShowByWords}\n        toggleTajweed={toggleTajweed}\n        selectedTranslationName={selectedTranslationName}\n        selectedWordLanguageName={selectedWordLanguageName}\n        onTranslationPanelOpen={onTranslationPanelOpen}\n        onWordLanguagePanelOpen={onWordLanguagePanelOpen}\n      />\n    </CollapsibleSection>\n  );\n};\n\nfunction ToggleRow({\n  label,\n  active,\n  onToggle,\n}: {\n  label: string;\n  active: boolean;\n  onToggle: () => void;\n}): React.JSX.Element {\n  return (\n    <div className=\"flex items-center justify-between pt-2\">\n      <span className=\"text-sm text-foreground\">{label}</span>\n      <button\n        onClick={onToggle}\n        className={`relative inline-flex h-6 w-11 items-center rounded-full ${active ? 'bg-accent' : 'bg-muted'}`}\n        aria-pressed={active}\n      >\n        <span\n          className={`inline-block h-4 w-4 transform rounded-full bg-surface transition ${active ? 'translate-x-6' : 'translate-x-1'}`}\n        />\n      </button>\n    </div>\n  );\n}\n\nfunction ReadingSettingsContent({\n  t,\n  settings,\n  toggleShowByWords,\n  toggleTajweed,\n  selectedTranslationName,\n  selectedWordLanguageName,\n  onTranslationPanelOpen,\n  onWordLanguagePanelOpen,\n}: {\n  t: (k: string) => string;\n  settings: ReturnType<typeof useSettings>['settings'];\n  toggleShowByWords: () => void;\n  toggleTajweed: () => void;\n  selectedTranslationName: string;\n  selectedWordLanguageName: string;\n  onTranslationPanelOpen: () => void;\n  onWordLanguagePanelOpen: () => void;\n}): React.JSX.Element {\n  return (\n    <div className=\"space-y-4\">\n      <ToggleRow\n        label={t('show_word_by_word')}\n        active={settings.showByWords}\n        onToggle={toggleShowByWords}\n      />\n      <ToggleRow label={t('apply_tajweed')} active={settings.tajweed} onToggle={toggleTajweed} />\n\n      <SelectionBox\n        label={t('translations')}\n        value={selectedTranslationName}\n        onClick={onTranslationPanelOpen}\n      />\n\n      <SelectionBox\n        label={t('word_by_word_language')}\n        value={selectedWordLanguageName}\n        onClick={onWordLanguagePanelOpen}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/ArabicFontFaceSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/FontSettingsContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":63,"fix":{"range":[348,372],"text":"@/app/(features)/surah/components/CollapsibleSection"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { FontSettingIcon } from '@/app/shared/icons';\n\nimport { ArabicFontFaceSelector } from './ArabicFontFaceSelector';\nimport { FontSizeSlider } from './FontSizeSlider';\nimport { CollapsibleSection } from '../../CollapsibleSection';\n\ninterface FontSettingsContentProps {\n  isOpen?: boolean;\n  onToggle?: () => void;\n  isClient: boolean;\n  settings: ReturnType<typeof useSettings>['settings'];\n  arabicStyle: React.CSSProperties;\n  translationStyle: React.CSSProperties;\n  selectedArabicFont: string;\n  onArabicFontPanelOpen: () => void;\n  handleArabicFontSizeChange: (value: number) => void;\n  handleTranslationFontSizeChange: (value: number) => void;\n}\n\nexport function FontSettingsContent({\n  isOpen,\n  onToggle,\n  isClient,\n  settings,\n  arabicStyle,\n  translationStyle,\n  selectedArabicFont,\n  onArabicFontPanelOpen,\n  handleArabicFontSizeChange,\n  handleTranslationFontSizeChange,\n}: FontSettingsContentProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <CollapsibleSection\n      title={t('font_setting')}\n      icon={<FontSettingIcon size={20} className=\"text-accent\" />}\n      isLast\n      isOpen={isOpen}\n      onToggle={onToggle || (() => {})}\n    >\n      <div className=\"space-y-4\">\n        <FontSizeSlider\n          label={t('arabic_font_size')}\n          value={isClient ? settings.arabicFontSize : 28}\n          min={16}\n          max={48}\n          onChange={handleArabicFontSizeChange}\n          style={arabicStyle}\n        />\n        <FontSizeSlider\n          label={t('translation_font_size')}\n          value={isClient ? settings.translationFontSize : 16}\n          min={12}\n          max={28}\n          onChange={handleTranslationFontSizeChange}\n          style={translationStyle}\n        />\n        <ArabicFontFaceSelector\n          label={t('arabic_font_face')}\n          value={selectedArabicFont}\n          onClick={onArabicFontPanelOpen}\n        />\n      </div>\n    </CollapsibleSection>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/FontSizeSlider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/sidebar/SettingsContentWrapperProps.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":49,"fix":{"range":[38,46],"text":"@/app/(features)/surah/components/settings/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { SettingsSidebarProps } from '../types';\n\nexport interface SettingsContentWrapperPropsConfig {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  tabOptions: Array<{ id: string; label: string }>;\n  openSections: Record<string, boolean>;\n  onSectionToggle: (section: string) => void;\n  onArabicFontPanelOpen: () => void;\n  onTranslationPanelOpen?: () => void;\n  onWordLanguagePanelOpen?: () => void;\n  onTafsirPanelOpen?: () => void;\n  selectedTranslationName?: string;\n  selectedTafsirName?: string;\n  selectedWordLanguageName?: string;\n  showTafsirSetting: boolean;\n}\n\nexport function buildContentWrapperProps(\n  baseProps: Pick<\n    SettingsSidebarProps,\n    | 'onTranslationPanelOpen'\n    | 'onTafsirPanelOpen'\n    | 'onWordLanguagePanelOpen'\n    | 'selectedTranslationName'\n    | 'selectedTafsirName'\n    | 'selectedWordLanguageName'\n    | 'showTafsirSetting'\n  >,\n  stateProps: {\n    activeTab: string;\n    onTabChange: (tab: string) => void;\n    tabOptions: Array<{ id: string; label: string }>;\n    openSections: Record<string, boolean>;\n    onSectionToggle: (section: string) => void;\n    onArabicFontPanelOpen: () => void;\n  }\n): SettingsContentWrapperPropsConfig {\n  const coreProps = {\n    ...stateProps,\n    onTranslationPanelOpen: baseProps.onTranslationPanelOpen,\n    onWordLanguagePanelOpen: baseProps.onWordLanguagePanelOpen,\n    selectedTranslationName: baseProps.selectedTranslationName,\n    selectedWordLanguageName: baseProps.selectedWordLanguageName,\n    showTafsirSetting: baseProps.showTafsirSetting,\n  };\n\n  // Add optional tafsir props conditionally\n  if (baseProps.onTafsirPanelOpen !== undefined) {\n    return {\n      ...coreProps,\n      onTafsirPanelOpen: baseProps.onTafsirPanelOpen,\n      selectedTafsirName: baseProps.selectedTafsirName,\n    };\n  }\n\n  return coreProps;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/sidebar/SettingsPanelsProps.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":49,"fix":{"range":[38,46],"text":"@/app/(features)/surah/components/settings/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { SettingsSidebarProps } from '../types';\n\nexport interface SettingsPanelsPropsConfig {\n  isArabicFontPanelOpen: boolean;\n  onArabicFontPanelClose: () => void;\n  isTranslationPanelOpen: boolean;\n  onTranslationPanelClose?: () => void;\n  isTafsirPanelOpen: boolean;\n  onTafsirPanelClose?: () => void;\n  isWordLanguagePanelOpen: boolean;\n  onWordLanguagePanelClose?: () => void;\n}\n\nexport function buildPanelsProps(\n  baseProps: Pick<\n    SettingsSidebarProps,\n    | 'isTranslationPanelOpen'\n    | 'onTranslationPanelClose'\n    | 'isTafsirPanelOpen'\n    | 'onTafsirPanelClose'\n    | 'isWordLanguagePanelOpen'\n    | 'onWordLanguagePanelClose'\n  >,\n  localState: {\n    isArabicFontPanelOpen: boolean;\n    onArabicFontPanelClose: () => void;\n  }\n): SettingsPanelsPropsConfig {\n  const coreProps = {\n    ...localState,\n    isTranslationPanelOpen: baseProps.isTranslationPanelOpen,\n    isTafsirPanelOpen: baseProps.isTafsirPanelOpen,\n    isWordLanguagePanelOpen: baseProps.isWordLanguagePanelOpen,\n  };\n\n  // Add optional close handlers conditionally\n  const conditionalProps: Partial<SettingsPanelsPropsConfig> = {};\n\n  if (baseProps.onTranslationPanelClose !== undefined) {\n    conditionalProps.onTranslationPanelClose = baseProps.onTranslationPanelClose;\n  }\n\n  if (baseProps.onTafsirPanelClose !== undefined) {\n    conditionalProps.onTafsirPanelClose = baseProps.onTafsirPanelClose;\n  }\n\n  if (baseProps.onWordLanguagePanelClose !== undefined) {\n    conditionalProps.onWordLanguagePanelClose = baseProps.onWordLanguagePanelClose;\n  }\n\n  return { ...coreProps, ...conditionalProps };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahAudio.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":56,"fix":{"range":[77,96],"text":"@/app/(features)/surah/components/SurahAudioPlayer"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { SurahAudioPlayer } from '../SurahAudioPlayer';\n\nimport type { Verse, Reciter } from '@/types';\n\ninterface SurahAudioProps {\n  activeVerse: Verse | null;\n  reciter: Reciter | null;\n  isVisible: boolean;\n  onNext: () => void;\n  onPrev: () => void;\n}\n\nexport function SurahAudio({\n  activeVerse,\n  reciter,\n  isVisible,\n  onNext,\n  onPrev,\n}: SurahAudioProps): React.JSX.Element {\n  return (\n    <SurahAudioPlayer\n      activeVerse={activeVerse}\n      reciter={reciter}\n      isVisible={isVisible}\n      onNext={onNext}\n      onPrev={onPrev}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahMain.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":52,"fix":{"range":[171,188],"text":"@/app/(features)/surah/components/SurahVerseList"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\n\nimport { SurahVerseList } from '../SurahVerseList';\n\nimport type { Verse } from '@/types';\n\ninterface SurahMainProps {\n  verses: Verse[];\n  isLoading: boolean;\n  error: string | null;\n  loadMoreRef: React.RefObject<HTMLDivElement | null>;\n  isValidating: boolean;\n  isReachingEnd: boolean;\n}\n\nexport function SurahMain({\n  verses,\n  isLoading,\n  error,\n  loadMoreRef,\n  isValidating,\n  isReachingEnd,\n}: SurahMainProps): React.JSX.Element {\n  const { isHidden } = useHeaderVisibility();\n  return (\n    <main className=\"h-screen text-foreground font-sans lg:mr-[20.7rem] overflow-hidden\">\n      <div\n        className={`h-full overflow-y-auto px-4 sm:px-6 lg:px-8 pb-6 transition-all duration-300 ${\n          isHidden\n            ? 'pt-0'\n            : 'pt-[calc(3.5rem+env(safe-area-inset-top))] sm:pt-[calc(4rem+env(safe-area-inset-top))]'\n        }`}\n      >\n        <SurahVerseList\n          verses={verses}\n          isLoading={isLoading}\n          error={error}\n          loadMoreRef={loadMoreRef}\n          isValidating={isValidating}\n          isReachingEnd={isReachingEnd}\n        />\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahSettings.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":63,"fix":{"range":[76,103],"text":"@/app/(features)/surah/components/settings/SettingsSidebar"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { SettingsSidebar } from '../settings/SettingsSidebar';\n\ninterface SurahSettingsProps {\n  selectedTranslationName?: string;\n  selectedWordLanguageName?: string;\n  isTranslationPanelOpen: boolean;\n  onTranslationPanelOpen: () => void;\n  onTranslationPanelClose: () => void;\n  isWordLanguagePanelOpen: boolean;\n  onWordLanguagePanelOpen: () => void;\n  onWordLanguagePanelClose: () => void;\n}\n\nexport function SurahSettings({\n  selectedTranslationName,\n  selectedWordLanguageName,\n  isTranslationPanelOpen,\n  onTranslationPanelOpen,\n  onTranslationPanelClose,\n  isWordLanguagePanelOpen,\n  onWordLanguagePanelOpen,\n  onWordLanguagePanelClose,\n}: SurahSettingsProps): React.JSX.Element {\n  return (\n    <SettingsSidebar\n      onTranslationPanelOpen={onTranslationPanelOpen}\n      onWordLanguagePanelOpen={onWordLanguagePanelOpen}\n      onReadingPanelOpen={() => {}}\n      selectedTranslationName={selectedTranslationName}\n      selectedWordLanguageName={selectedWordLanguageName}\n      isTranslationPanelOpen={isTranslationPanelOpen}\n      onTranslationPanelClose={onTranslationPanelClose}\n      isWordLanguagePanelOpen={isWordLanguagePanelOpen}\n      onWordLanguagePanelClose={onWordLanguagePanelClose}\n      pageType=\"verse\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/useBodyOverflowHidden.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/useSurahView.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":63,"fix":{"range":[113,124],"text":"@/app/(features)/surah/hooks"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { getVersesByChapter } from '@/lib/api';\n\nimport { useSurahPanels, useVerseListing } from '../../hooks';\n\ninterface UseSurahViewReturn {\n  verseListing: ReturnType<typeof useVerseListing>;\n  panels: ReturnType<typeof useSurahPanels>;\n}\n\nexport const useSurahView = (surahId: string): UseSurahViewReturn => {\n  const verseListing = useVerseListing({\n    id: surahId,\n    lookup: ({ id, translationIds, page, perPage, wordLang }) =>\n      getVersesByChapter(id, translationIds, page, perPage, wordLang),\n  });\n  const panels = useSurahPanels({\n    translationOptions: verseListing.translationOptions,\n    wordLanguageOptions: verseListing.wordLanguageOptions,\n    settings: verseListing.settings,\n  });\n\n  return { verseListing, panels };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/VerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/VerseTranslations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/useVerseCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/useVerseLastReadObserver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/__tests__/UseSettingsSections.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":62,"fix":{"range":[162,184],"text":"@/app/(features)/surah/hooks/useSettingsSections"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport { useSettingsSections } from '../useSettingsSections';\n\ndescribe('useSettingsSections logging', () => {\n  const originalEnv = process.env.NODE_ENV;\n\n  beforeEach(() => {\n    process.env.NODE_ENV = 'development';\n    jest.spyOn(logger, 'debug').mockImplementation(() => {});\n    localStorage.clear();\n  });\n\n  afterEach(() => {\n    (logger.debug as jest.Mock).mockRestore();\n    process.env.NODE_ENV = originalEnv;\n  });\n\n  it('logs section toggle in development', () => {\n    const { result } = renderHook(() => useSettingsSections());\n\n    act(() => result.current.handleSectionToggle('translation'));\n\n    expect(logger.debug).toHaveBeenCalledWith('Toggling section', {\n      sectionId: 'translation',\n      openSections: ['translation', 'font'],\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useFontSize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useHideScrollbar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useInfiniteVerseLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useOpenSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useScrollbarHiding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSettingsSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSettingsTabState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSurahPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useTranslationOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useVerseListing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/useNavigationHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/lib/surahImageMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/AyahNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":91,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":91,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { Surah } from '@/types';\n\ninterface NavTarget {\n  surahId: string;\n  ayahId: number;\n}\n\ninterface AyahNavigationProps {\n  prev: NavTarget | null;\n  next: NavTarget | null;\n  navigate: (target: NavTarget | null) => void;\n  currentSurah?: Surah;\n  ayahId: string;\n}\n\nconst ChevronLeft = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5 text-accent\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M11.707 15.293a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L8.414 10l3.293 3.293a1 1 0 001.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst ChevronRight = (): JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5 text-accent\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M8.293 4.707a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L11.586 10l-3.293-3.293a1 1 0 00-1.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\ninterface NavButtonProps {\n  label: string;\n  disabled: boolean;\n  onClick: () => void;\n  side: 'left' | 'right';\n}\n\nconst NavButton = ({ label, disabled, onClick, side }: NavButtonProps): JSX.Element => (\n  <button\n    aria-label={label}\n    disabled={disabled}\n    onClick={onClick}\n    className=\"flex items-center px-3 py-2 sm:px-4 rounded-full bg-accent text-on-accent disabled:opacity-50 font-bold\"\n  >\n    <div\n      className={\n        side === 'left'\n          ? 'flex items-center justify-center w-8 h-8 rounded-full bg-surface mr-1 sm:mr-2'\n          : 'flex items-center justify-center w-8 h-8 rounded-full bg-surface ml-1 sm:ml-2'\n      }\n    >\n      {side === 'left' ? <ChevronLeft /> : <ChevronRight />}\n    </div>\n  </button>\n);\n\nconst Title = ({ currentSurah, ayahId }: { currentSurah?: Surah; ayahId: string }): JSX.Element => (\n  <div className=\"flex-1 min-w-0 text-center px-2 text-on-accent font-bold text-sm sm:text-base truncate\">\n    {currentSurah ? (\n      <>\n        <span className=\"font-bold\">{currentSurah.name}</span> : {ayahId}\n      </>\n    ) : (\n      ''\n    )}\n  </div>\n);\n\nexport const AyahNavigation = ({\n  prev,\n  next,\n  navigate,\n  currentSurah,\n  ayahId,\n}: AyahNavigationProps) => (\n  <div className=\"flex w-full items-center justify-between gap-2 sm:gap-3 rounded-full bg-accent text-on-accent p-2 min-w-0 overflow-hidden\">\n    <NavButton label=\"Previous\" disabled={!prev} onClick={() => navigate(prev)} side=\"left\" />\n    <Title currentSurah={currentSurah} ayahId={ayahId} />\n    <NavButton label=\"Next\" disabled={!next} onClick={() => navigate(next)} side=\"right\" />\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirAudioPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":79,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport dynamic from 'next/dynamic';\nimport { useEffect, useState } from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { Spinner } from '@/app/shared/Spinner';\nimport { getSurahCoverUrl } from '@/lib/api';\nimport { buildAudioUrl } from '@/lib/audio/reciters';\n\nimport type { Reciter } from '@/app/shared/player/types';\nimport type { Verse } from '@/types';\n\n// Loading fallback extracted to keep component lean\nconst LoadingFallback = (): JSX.Element => (\n  <div className=\"flex justify-center items-center p-4 bg-surface rounded-lg\">\n    <Spinner className=\"h-4 w-4 md:h-5 md:w-5 text-accent\" />\n  </div>\n);\n\n// Dynamic import for heavy QuranAudioPlayer component\nconst QuranAudioPlayer = dynamic(\n  () =>\n    import('@/app/shared/player/QuranAudioPlayer').then((mod) => ({\n      default: mod.QuranAudioPlayer,\n    })),\n  { loading: () => <LoadingFallback />, ssr: false }\n);\n\ninterface TafsirAudioPlayerProps {\n  activeVerse: Verse | null;\n  reciter: Reciter;\n  isVisible: boolean;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n}\n\n// Helper: derive surah cover URL from active verse\nconst useSurahCover = (verse: Verse | null): string | null => {\n  const [coverUrl, setCoverUrl] = useState<string | null>(null);\n  useEffect(() => {\n    if (!verse) return;\n    const [surahStr] = verse.verse_key.split(':');\n    const surahNumber = Number.parseInt(surahStr ?? '0', 10);\n    getSurahCoverUrl(surahNumber).then(setCoverUrl);\n  }, [verse]);\n  return coverUrl;\n};\n\n// Helper: build audio track object\nconst createTrack = (verse: Verse, reciter: Reciter, coverUrl: string | null) => ({\n  id: verse.id.toString(),\n  title: `Verse ${verse.verse_key}`,\n  artist: reciter.name,\n  coverUrl: coverUrl || '',\n  durationSec: 0,\n  src: buildAudioUrl(verse.verse_key, reciter.path),\n});\n\nexport const TafsirAudioPlayer = ({\n  activeVerse,\n  reciter,\n  isVisible,\n  onNext,\n  onPrev,\n}: TafsirAudioPlayerProps): React.JSX.Element | null => {\n  const { isHidden } = useHeaderVisibility();\n  const coverUrl = useSurahCover(activeVerse);\n\n  if (!activeVerse || !isVisible) return null;\n\n  const track = createTrack(activeVerse, reciter, coverUrl);\n  const handleNext = (): boolean => Boolean(onNext?.());\n  const handlePrev = (): boolean => Boolean(onPrev?.());\n\n  return (\n    <div\n      className={`fixed left-0 right-0 p-4 bg-background/0 z-audio-player transition-all duration-300 ease-in-out ${\n        isHidden ? 'bottom-0 pb-safe' : 'bottom-0 pb-safe lg:pb-4'\n      } lg:left-1/2 lg:-translate-x-1/2 lg:right-auto lg:w-[min(90vw,60rem)]`}\n      style={{\n        bottom: isHidden\n          ? 'env(safe-area-inset-bottom)'\n          : 'calc(5rem + env(safe-area-inset-bottom))',\n      }}\n    >\n      <QuranAudioPlayer track={track} onNext={handleNext} onPrev={handlePrev} />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirPanels.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":60,"fix":{"range":[277,301],"text":"@/app/(features)/tafsir/[surahId]/[ayahId]/hooks/useTafsirPanels"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { ChevronDownIcon } from '@/app/shared/icons';\nimport { Spinner } from '@/app/shared/Spinner';\nimport { applyArabicFont } from '@/lib/tafsir/applyArabicFont';\n\nimport { useTafsirPanels } from '../hooks/useTafsirPanels';\n\ninterface TafsirPanelsProps {\n  verseKey: string;\n  tafsirIds: number[];\n}\n\nexport const TafsirPanels = ({ verseKey, tafsirIds }: TafsirPanelsProps): React.JSX.Element => {\n  const { settings } = useSettings();\n  const { openPanels, tafsirTexts, loading, togglePanel } = useTafsirPanels(verseKey);\n\n  return (\n    <>\n      {tafsirIds.map((id) => {\n        const open = !!openPanels[id];\n        return (\n          <div key={id} className=\"border-b border-border last:border-none\">\n            <button\n              onClick={() => togglePanel(id)}\n              className=\"w-full flex items-center justify-between py-3 text-left\"\n            >\n              <span className=\"font-semibold text-foreground\">Tafsir {id}</span>\n              <ChevronDownIcon\n                size={16}\n                className={`text-muted transition-transform duration-300 ${open ? 'rotate-180' : ''}`}\n              />\n            </button>\n            <div\n              className={`grid transition-all duration-300 ease-in-out ${open ? 'grid-rows-[1fr] opacity-100' : 'grid-rows-[0fr] opacity-0'}`}\n            >\n              <div className=\"overflow-hidden\">\n                <div className=\"bg-accent/10  rounded-md p-4 max-h-64 overflow-y-auto\">\n                  {loading[id] ? (\n                    <div className=\"flex justify-center py-4\">\n                      <Spinner className=\"h-5 w-5 text-accent\" />\n                    </div>\n                  ) : (\n                    <div\n                      className=\"prose max-w-none text-foreground whitespace-pre-wrap\"\n                      style={{ fontSize: `${settings.tafsirFontSize}px` }}\n                      dangerouslySetInnerHTML={{\n                        __html: applyArabicFont(tafsirTexts[id] || '', settings.arabicFontFace),\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirVerse.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TranslationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/VerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/WordTranslationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/WordTranslationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/useTafsirTabsState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/useWordTranslationSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/verse-card/VerseActions.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":17,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback } from 'react';\n\nimport { useAudio } from '@/app/shared/player/context/AudioContext';\nimport { ResponsiveVerseActions } from '@/app/shared/ResponsiveVerseActions';\nimport { Verse as VerseType } from '@/types';\n\ninterface VerseActionsProps {\n  verse: VerseType;\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  isVerseBookmarked: boolean;\n  onBookmark: () => void;\n}\n\nconst useVersePlayPause = (verse: VerseType) => {\n  const {\n    playingId,\n    setPlayingId,\n    setLoadingId,\n    setActiveVerse,\n    audioRef,\n    setIsPlaying,\n    openPlayer,\n  } = useAudio();\n\n  return useCallback(() => {\n    if (playingId === verse.id) {\n      audioRef.current?.pause();\n      setPlayingId(null);\n      setLoadingId(null);\n      setActiveVerse(null);\n      setIsPlaying(false);\n    } else {\n      setActiveVerse(verse);\n      setPlayingId(verse.id);\n      setLoadingId(verse.id);\n      setIsPlaying(true);\n      openPlayer();\n    }\n  }, [\n    playingId,\n    verse,\n    audioRef,\n    setActiveVerse,\n    setPlayingId,\n    setLoadingId,\n    setIsPlaying,\n    openPlayer,\n  ]);\n};\n\nexport function VerseActions({\n  verse,\n  isPlaying,\n  isLoadingAudio,\n  isVerseBookmarked,\n  onBookmark,\n}: VerseActionsProps): JSX.Element {\n  const handlePlayPause = useVersePlayPause(verse);\n\n  return (\n    <ResponsiveVerseActions\n      verseKey={verse.verse_key}\n      isPlaying={isPlaying}\n      isLoadingAudio={isLoadingAudio}\n      isBookmarked={isVerseBookmarked}\n      onPlayPause={handlePlayPause}\n      onBookmark={onBookmark}\n      className=\"md:w-16 md:pt-1\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/verse-card/VerseContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/hooks/useTafsirPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/page.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":69,"fix":{"range":[571,601],"text":"@/app/(features)/tafsir/hooks/useTafsirVerseData"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport React from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { SettingsSidebar } from '@/app/(features)/surah/components';\nimport { useAudio } from '@/app/shared/player/context/AudioContext';\n\nimport { AyahNavigation } from './components/AyahNavigation';\nimport { TafsirAudioPlayer } from './components/TafsirAudioPlayer';\nimport { TafsirViewer } from './components/TafsirViewer';\nimport { useBodyScrollLock, usePanelsState } from './useTafsirPanels';\nimport { useTafsirVerseData } from '../../hooks/useTafsirVerseData';\n\ninterface TafsirVersePageProps {\n  params: Promise<{ surahId: string; ayahId: string }>;\n}\n\nexport default function TafsirVersePage({ params }: TafsirVersePageProps): React.JSX.Element {\n  const { surahId, ayahId } = React.use(params);\n  const { isHidden } = useHeaderVisibility();\n  const { activeVerse, isPlayerVisible, reciter } = useAudio();\n  const {\n    verse,\n    tafsirHtml,\n    tafsirResource,\n    selectedTranslationName,\n    selectedTafsirName,\n    selectedWordLanguageName,\n    prev,\n    next,\n    navigate,\n    currentSurah,\n  } = useTafsirVerseData(surahId, ayahId);\n\n  const panels = usePanelsState();\n  useBodyScrollLock();\n\n  return (\n    <>\n      <TafsirMain\n        isHidden={isHidden}\n        prev={prev}\n        next={next}\n        navigate={navigate}\n        currentSurah={currentSurah}\n        ayahId={ayahId}\n        verse={verse}\n        tafsirResource={tafsirResource}\n        tafsirHtml={tafsirHtml}\n      />\n\n      <TafsirSettingsSidebar\n        panels={panels}\n        selectedTranslationName={selectedTranslationName}\n        selectedTafsirName={selectedTafsirName}\n        selectedWordLanguageName={selectedWordLanguageName}\n      />\n\n      <TafsirAudioPlayer activeVerse={activeVerse} reciter={reciter} isVisible={isPlayerVisible} />\n    </>\n  );\n}\n\nfunction TafsirMain({\n  isHidden,\n  prev,\n  next,\n  navigate,\n  currentSurah,\n  ayahId,\n  verse,\n  tafsirResource,\n  tafsirHtml,\n}: {\n  isHidden: boolean;\n  prev: { surahId: string; ayahId: number } | null;\n  next: { surahId: string; ayahId: number } | null;\n  navigate: (target: { surahId: string; ayahId: number } | null) => void;\n  currentSurah: { number: number; verses: number; name: string } | undefined;\n  ayahId: string;\n  verse: Parameters<typeof TafsirViewer>[0]['verse'];\n  tafsirResource: Parameters<typeof TafsirViewer>[0]['tafsirResource'];\n  tafsirHtml: Parameters<typeof TafsirViewer>[0]['tafsirHtml'];\n}): React.JSX.Element {\n  return (\n    <main className=\"h-screen text-foreground font-sans lg:mr-[20.7rem] overflow-hidden\">\n      <div\n        className={`h-full overflow-y-auto px-4 sm:px-6 lg:px-8 pb-6 transition-all duration-300 ${\n          isHidden\n            ? 'pt-0'\n            : 'pt-[calc(3.5rem+env(safe-area-inset-top))] sm:pt-[calc(4rem+env(safe-area-inset-top))]'\n        }`}\n      >\n        <div className=\"w-full space-y-6 pt-4\">\n          <AyahNavigation\n            prev={prev}\n            next={next}\n            navigate={navigate}\n            {...(currentSurah !== undefined ? { currentSurah } : {})}\n            ayahId={ayahId}\n          />\n          <TafsirViewer\n            {...(verse !== undefined ? { verse } : {})}\n            {...(tafsirResource !== undefined ? { tafsirResource } : {})}\n            {...(tafsirHtml !== undefined ? { tafsirHtml } : {})}\n          />\n        </div>\n      </div>\n    </main>\n  );\n}\n\nfunction TafsirSettingsSidebar({\n  panels,\n  selectedTranslationName,\n  selectedTafsirName,\n  selectedWordLanguageName,\n}: {\n  panels: ReturnType<typeof usePanelsState>;\n  selectedTranslationName: string | undefined;\n  selectedTafsirName: string | undefined;\n  selectedWordLanguageName: string | undefined;\n}): React.JSX.Element {\n  return (\n    <SettingsSidebar\n      onTranslationPanelOpen={panels.openTranslationPanel}\n      onWordLanguagePanelOpen={panels.openWordPanel}\n      onTafsirPanelOpen={panels.openTafsirPanel}\n      selectedTranslationName={selectedTranslationName}\n      selectedTafsirName={selectedTafsirName}\n      selectedWordLanguageName={selectedWordLanguageName}\n      showTafsirSetting\n      isTranslationPanelOpen={panels.isTranslationPanelOpen}\n      onTranslationPanelClose={panels.closeTranslationPanel}\n      isTafsirPanelOpen={panels.isTafsirPanelOpen}\n      onTafsirPanelClose={panels.closeTafsirPanel}\n      isWordLanguagePanelOpen={panels.isWordPanelOpen}\n      onWordLanguagePanelClose={panels.closeWordPanel}\n      pageType=\"tafsir\"\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/useTafsirPanels.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":12,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\nexport function useBodyScrollLock(): void {\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = '';\n    };\n  }, []);\n}\n\nexport function usePanelsState() {\n  const [isTranslationPanelOpen, setIsTranslationPanelOpen] = useState(false);\n  const [isTafsirPanelOpen, setIsTafsirPanelOpen] = useState(false);\n  const [isWordPanelOpen, setIsWordPanelOpen] = useState(false);\n\n  return {\n    isTranslationPanelOpen,\n    openTranslationPanel: () => setIsTranslationPanelOpen(true),\n    closeTranslationPanel: () => setIsTranslationPanelOpen(false),\n    isTafsirPanelOpen,\n    openTafsirPanel: () => setIsTafsirPanelOpen(true),\n    closeTafsirPanel: () => setIsTafsirPanelOpen(false),\n    isWordPanelOpen,\n    openWordPanel: () => setIsWordPanelOpen(true),\n    closeWordPanel: () => setIsWordPanelOpen(false),\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirTabs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirVerseCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirVersePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTafsirOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTafsirVerseData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTranslationOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useVerseNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useWordTranslations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/RootLayout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/not-found.bn.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/not-found.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/api/metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/api/verses/random/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/i18n.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":57,"fix":{"range":[115,147],"text":"@/public/locales/bn/common.json"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":57,"fix":{"range":[172,204],"text":"@/public/locales/en/common.json"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":57,"fix":{"range":[229,261],"text":"@/public/locales/en/player.json"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport commonBn from '../public/locales/bn/common.json';\nimport commonEn from '../public/locales/en/common.json';\nimport playerEn from '../public/locales/en/player.json';\n\ni18n.use(initReactI18next).init({\n  resources: {\n    en: { translation: commonEn, player: playerEn },\n    bn: { translation: commonBn },\n  },\n  ns: ['translation', 'player'],\n  defaultNS: 'translation',\n  lng: 'en',\n  fallbackLng: 'en',\n  interpolation: { escapeValue: false },\n});\n\nexport { i18n };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/BookmarkContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/ClientProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/NavigationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/SidebarContext.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":48,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":48,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\nimport { useBodyScrollLock } from './hooks/useBodyScrollLock';\nimport { useSidebarScrollPositions } from './hooks/useSidebarScrollPositions';\n\n// Helper hook for keyboard controls\nconst useSidebarKeyboard = (\n  isSurahListOpen: boolean,\n  setSurahListOpen: (open: boolean) => void,\n  isBookmarkSidebarOpen: boolean,\n  setBookmarkSidebarOpen: (open: boolean) => void\n): void => {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (isSurahListOpen) setSurahListOpen(false);\n        if (isBookmarkSidebarOpen) setBookmarkSidebarOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isSurahListOpen, setSurahListOpen, isBookmarkSidebarOpen, setBookmarkSidebarOpen]);\n};\n\ninterface SidebarContextType {\n  isSurahListOpen: boolean;\n  setSurahListOpen: (open: boolean) => void;\n  isBookmarkSidebarOpen: boolean;\n  setBookmarkSidebarOpen: (open: boolean) => void;\n  surahScrollTop: number;\n  setSurahScrollTop: (top: number) => void;\n  juzScrollTop: number;\n  setJuzScrollTop: (top: number) => void;\n  pageScrollTop: number;\n  setPageScrollTop: (top: number) => void;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\n/**\n * Provides global sidebar UI state.\n * Wrap components needing access to sidebar visibility and scroll\n * positions with this provider to synchronize their behavior.\n */\n// Local hooks to keep provider lean\nconst useSidebarToggles = () => {\n  const [isSurahListOpen, _setSurahListOpen] = useState(false);\n  const [isBookmarkSidebarOpen, _setBookmarkSidebarOpen] = useState(false);\n\n  const setSurahListOpen = useCallback((open: boolean): void => {\n    _setSurahListOpen(open);\n  }, []);\n\n  const setBookmarkSidebarOpen = useCallback((open: boolean): void => {\n    _setBookmarkSidebarOpen(open);\n  }, []);\n\n  useBodyScrollLock(isSurahListOpen || isBookmarkSidebarOpen);\n  useSidebarKeyboard(\n    isSurahListOpen,\n    setSurahListOpen,\n    isBookmarkSidebarOpen,\n    setBookmarkSidebarOpen\n  );\n\n  return { isSurahListOpen, setSurahListOpen, isBookmarkSidebarOpen, setBookmarkSidebarOpen };\n};\n\nconst useSidebarContextValue = (\n  toggles: ReturnType<typeof useSidebarToggles>,\n  positions: ReturnType<typeof useSidebarScrollPositions>\n) =>\n  useMemo(\n    () => ({\n      ...toggles,\n      surahScrollTop: positions.surahScrollTop,\n      setSurahScrollTop: positions.setSurahScrollTop,\n      juzScrollTop: positions.juzScrollTop,\n      setJuzScrollTop: positions.setJuzScrollTop,\n      pageScrollTop: positions.pageScrollTop,\n      setPageScrollTop: positions.setPageScrollTop,\n    }),\n    [toggles, positions]\n  );\n\nexport const SidebarProvider = ({ children }: { children: React.ReactNode }): React.JSX.Element => {\n  const toggles = useSidebarToggles();\n  const positions = useSidebarScrollPositions();\n  const value = useSidebarContextValue(toggles, positions);\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>;\n};\n\n/**\n * Hook for interacting with sidebar state.\n * Call within components to read or update sidebar visibility and\n * scroll positions managed by `SidebarProvider`.\n */\nexport const useSidebar = (): SidebarContextType => {\n  const ctx = useContext(SidebarContext);\n  if (!ctx) throw new Error('useSidebar must be used within SidebarProvider');\n  return ctx;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/TranslationProvider.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":32,"fix":{"range":[86,93],"text":"@/app/i18n"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { I18nextProvider } from 'react-i18next';\n\nimport { i18n } from '../i18n';\n\n/**\n * Wraps the `I18nextProvider` to supply translation services via `react-i18next`.\n * Use this provider to enable hooks like `useTranslation` for any nested components.\n */\nexport function TranslationProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.JSX.Element {\n  return <I18nextProvider i18n={i18n}>{children}</I18nextProvider>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/UIStateContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/BookmarkContext.initial-state.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/BookmarkContext.operations.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (87). Maximum allowed is 50.","line":10,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":104,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { renderWithProviders, BookmarkTestComponent } from './test-utils';\n\nimport type { Folder } from '@/types';\n\nconst BOOKMARKS_STORAGE_KEY = 'quranAppBookmarks_v2';\n\ndescribe('BookmarkContext operations', () => {\n  beforeEach(() => {\n    localStorage.clear();\n  });\n\n  it('creates a new folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await waitFor(() => {\n      const folders = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders).toHaveLength(1);\n      expect(folders[0].name).toBe('Test Folder');\n    });\n  });\n\n  it('adds a bookmark to a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Add Bookmark'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].bookmarks).toHaveLength(1);\n      expect(folders[0].bookmarks[0].verseId).toBe('1:1');\n      expect(screen.getByTestId('is-bookmarked-1:1').textContent).toBe('true');\n    });\n  });\n\n  it('removes a bookmark from a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Add Bookmark'));\n    await userEvent.click(screen.getByText('Remove Bookmark'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].bookmarks).toHaveLength(0);\n      expect(screen.getByTestId('is-bookmarked-1:1').textContent).toBe('false');\n    });\n  });\n\n  it('renames a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Rename Folder'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].name).toBe('New Name');\n    });\n  });\n\n  it('deletes a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Delete Folder'));\n    await waitFor(() => {\n      expect(screen.getByTestId('folders').textContent).toBe('[]');\n    });\n  });\n\n  it('pins and unpins a verse', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Toggle Pin'));\n    await waitFor(() => {\n      const pinned = JSON.parse(screen.getByTestId('pinned').textContent || '[]');\n      expect(pinned).toHaveLength(1);\n      expect(screen.getByTestId('is-pinned-1:1').textContent).toBe('true');\n    });\n    await userEvent.click(screen.getByText('Toggle Pin'));\n    await waitFor(() => {\n      const pinned = JSON.parse(screen.getByTestId('pinned').textContent || '[]');\n      expect(pinned).toHaveLength(0);\n      expect(screen.getByTestId('is-pinned-1:1').textContent).toBe('false');\n    });\n  });\n\n  it('sets last read verse', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Set Last Read'));\n    await waitFor(() => {\n      const last = JSON.parse(screen.getByTestId('lastRead').textContent || '{}');\n      expect(last['1']).toBe(1);\n    });\n  });\n\n  it('persists folder color', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Set Color'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].color).toBe('text-primary');\n      const stored: Folder[] = JSON.parse(localStorage.getItem(BOOKMARKS_STORAGE_KEY) || '[]');\n      expect(stored[0].color).toBe('text-primary');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/SettingsContext.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (61). Maximum allowed is 50.","line":21,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { SettingsProvider, useSettings } from '@/app/providers/SettingsContext';\n\nconst SettingsTest = (): React.ReactElement => {\n  const { settings, setSettings } = useSettings();\n  return (\n    <div>\n      <div data-testid=\"settings\">{JSON.stringify(settings)}</div>\n      <button\n        onClick={() => setSettings({ ...settings, arabicFontSize: settings.arabicFontSize + 2 })}\n      >\n        Update\n      </button>\n      <button onClick={() => setSettings({ ...settings, tafsirIds: [1, 2, 3] })}>Tafsirs</button>\n    </div>\n  );\n};\n\ndescribe('SettingsContext settings state', () => {\n  beforeEach(() => {\n    localStorage.clear();\n  });\n\n  const defaultSettings = {\n    translationId: 20,\n    translationIds: [20],\n    tafsirIds: [169],\n    arabicFontSize: 28,\n    translationFontSize: 16,\n    tafsirFontSize: 16,\n    arabicFontFace: '\"KFGQPC-Uthman-Taha\", serif',\n    wordLang: 'en',\n    wordTranslationId: 85,\n    showByWords: false,\n    tajweed: false,\n  };\n\n  it('defaults to expected values', () => {\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    expect(screen.getByTestId('settings').textContent).toBe(JSON.stringify(defaultSettings));\n  });\n\n  it('persists settings changes in localStorage across renders', async () => {\n    const { unmount } = render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Update' }));\n    await waitFor(() => {\n      expect(JSON.parse(localStorage.getItem('quranAppSettings') || '{}').arabicFontSize).toBe(30);\n    });\n    unmount();\n\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await waitFor(() => {\n      expect(screen.getByTestId('settings').textContent).toBe(\n        JSON.stringify({ ...defaultSettings, arabicFontSize: 30 })\n      );\n    });\n  });\n\n  it('saves multiple tafsir selections', async () => {\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Tafsirs' }));\n    await waitFor(() => {\n      expect(JSON.parse(localStorage.getItem('quranAppSettings') || '{}').tafsirIds).toEqual([\n        1, 2, 3,\n      ]);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/SidebarContext.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (59). Maximum allowed is 50.","line":28,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":90,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { SidebarProvider, useSidebar } from '@/app/providers/SidebarContext';\n\nconst ScrollTest = (): React.ReactElement => {\n  const {\n    surahScrollTop,\n    setSurahScrollTop,\n    juzScrollTop,\n    setJuzScrollTop,\n    pageScrollTop,\n    setPageScrollTop,\n  } = useSidebar();\n\n  return (\n    <div>\n      <div data-testid=\"surah\">{surahScrollTop}</div>\n      <button onClick={() => setSurahScrollTop(100)}>Surah</button>\n      <div data-testid=\"juz\">{juzScrollTop}</div>\n      <button onClick={() => setJuzScrollTop(200)}>Juz</button>\n      <div data-testid=\"page\">{pageScrollTop}</div>\n      <button onClick={() => setPageScrollTop(300)}>Page</button>\n    </div>\n  );\n};\n\ndescribe('SidebarContext scroll positions', () => {\n  beforeEach(() => {\n    let store: Record<string, string> = {};\n    const mockSessionStorage = {\n      getItem: jest.fn((key: string) => store[key]),\n      setItem: jest.fn((key: string, value: string) => {\n        store[key] = value;\n      }),\n      clear: jest.fn(() => {\n        store = {};\n      }),\n      removeItem: jest.fn((key: string) => {\n        delete store[key];\n      }),\n      key: jest.fn(),\n      length: 0,\n    } as unknown as Storage;\n\n    Object.defineProperty(window, 'sessionStorage', {\n      value: mockSessionStorage,\n      writable: true,\n    });\n  });\n\n  it('updates surahScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Surah' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('surah').textContent).toBe('100');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('surahScrollTop', '100');\n    });\n  });\n\n  it('updates juzScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Juz' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('juz').textContent).toBe('200');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('juzScrollTop', '200');\n    });\n  });\n\n  it('updates pageScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Page' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('page').textContent).toBe('300');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('pageScrollTop', '300');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/ThemeContext.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/fonts.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/BookmarkContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/BookmarkProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/bookmark-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkData.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":27,"fix":{"range":[328,344],"text":"@/app/providers/bookmarks/storage-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useEffect, useState } from 'react';\n\nimport { getChapters } from '@/lib/api/chapters';\n\nimport {\n  loadBookmarksFromStorage,\n  saveBookmarksToStorage,\n  loadPinnedFromStorage,\n  savePinnedToStorage,\n  loadLastReadFromStorage,\n  saveLastReadToStorage,\n  loadMemorizationFromStorage,\n  saveMemorizationToStorage,\n} from '../storage-utils';\n\nimport type { Folder, Bookmark, Chapter, MemorizationPlan } from '@/types';\n\nexport function useBookmarkData(): {\n  folders: Folder[];\n  setFolders: React.Dispatch<React.SetStateAction<Folder[]>>;\n  pinnedVerses: Bookmark[];\n  setPinnedVerses: React.Dispatch<React.SetStateAction<Bookmark[]>>;\n  lastRead: Record<string, number>;\n  setLastReadState: React.Dispatch<React.SetStateAction<Record<string, number>>>;\n  memorization: Record<string, MemorizationPlan>;\n  setMemorizationState: React.Dispatch<React.SetStateAction<Record<string, MemorizationPlan>>>;\n  chapters: Chapter[];\n} {\n  const [folders, setFolders] = useState<Folder[]>([]);\n  const [pinnedVerses, setPinnedVerses] = useState<Bookmark[]>([]);\n  const [lastRead, setLastReadState] = useState<Record<string, number>>({});\n  const [memorization, setMemorizationState] = useState<Record<string, MemorizationPlan>>({});\n  const [chapters, setChapters] = useState<Chapter[]>([]);\n\n  useEffect(() => {\n    void getChapters()\n      .then(setChapters)\n      .catch(() => {});\n    setFolders(loadBookmarksFromStorage());\n    setPinnedVerses(loadPinnedFromStorage());\n    setLastReadState(loadLastReadFromStorage());\n    setMemorizationState(loadMemorizationFromStorage());\n  }, []);\n\n  useEffect(() => saveBookmarksToStorage(folders), [folders]);\n  useEffect(() => savePinnedToStorage(pinnedVerses), [pinnedVerses]);\n  useEffect(() => saveLastReadToStorage(lastRead), [lastRead]);\n  useEffect(() => saveMemorizationToStorage(memorization), [memorization]);\n\n  return {\n    folders,\n    setFolders,\n    pinnedVerses,\n    setPinnedVerses,\n    lastRead,\n    setLastReadState,\n    memorization,\n    setMemorizationState,\n    chapters,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkMetadata.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":61,"fix":{"range":[180,197],"text":"@/app/providers/bookmarks/bookmark-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useCallback, type Dispatch, type SetStateAction } from 'react';\n\nimport { getVerseById, getVerseByKey } from '@/lib/api/verses';\n\nimport { updateBookmarkInFolders } from '../bookmark-utils';\n\nimport type { Bookmark, Chapter, Folder } from '@/types';\n\nexport function useBookmarkMetadata(\n  settings: { translationIds: number[]; translationId?: number },\n  setFolders: Dispatch<SetStateAction<Folder[]>>,\n  setPinnedVerses: Dispatch<SetStateAction<Bookmark[]>>\n): (verseId: string, chaptersList: Chapter[]) => Promise<void> {\n  return useCallback(\n    async (verseId: string, chaptersList: Chapter[]) => {\n      try {\n        const translationId = settings.translationIds[0] || settings.translationId || 20;\n        const isCompositeKey = /:/.test(verseId) || /[^0-9]/.test(verseId);\n        const verse = await (isCompositeKey\n          ? getVerseByKey(verseId, translationId)\n          : getVerseById(verseId, translationId));\n        const [surahIdStr] = verse.verse_key.split(':');\n        const surahInfo = chaptersList.find((chapter) => chapter.id === parseInt(surahIdStr));\n\n        const metadata = {\n          verseKey: verse.verse_key,\n          verseText: verse.text_uthmani,\n          surahName: surahInfo?.name_simple || `Surah ${surahIdStr}`,\n          translation: verse.translations?.[0]?.text,\n          verseApiId: verse.id,\n        };\n\n        setFolders((prev) => updateBookmarkInFolders(prev, verseId, metadata));\n        setPinnedVerses((prev) =>\n          prev.map((b) => (b.verseId === verseId ? { ...b, ...metadata } : b))\n        );\n      } catch {\n        // Silent fail for metadata fetch errors\n      }\n    },\n    [settings.translationIds, settings.translationId, setFolders, setPinnedVerses]\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkOperations.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":28,"fix":{"range":[243,260],"text":"@/app/providers/bookmarks/bookmark-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { useMemo } from 'react';\n\nimport { Bookmark, Chapter, Folder } from '@/types';\n\nimport {\n  addBookmarkToFolder,\n  removeBookmarkFromFolder,\n  updateBookmarkInFolders,\n  findBookmarkInFolders,\n  isVerseBookmarked,\n} from '../bookmark-utils';\nexport interface BookmarkOperations {\n  addBookmark(verseId: string, folderId?: string): void;\n  removeBookmark(verseId: string, folderId: string): void;\n  toggleBookmark(verseId: string, folderId?: string): void;\n  updateBookmark(verseId: string, data: Partial<Bookmark>): void;\n}\nexport interface UseBookmarkOperationsOptions {\n  folders: Folder[];\n  setFolders: React.Dispatch<React.SetStateAction<Folder[]>>;\n  pinned: Bookmark[];\n  setPinned: React.Dispatch<React.SetStateAction<Bookmark[]>>;\n  chapters: Chapter[];\n  fetchMetadata: (verseId: string, chaptersList: Chapter[]) => void;\n}\n\nexport default function useBookmarkOperations({\n  folders,\n  setFolders,\n  pinned: _pinned,\n  setPinned,\n  chapters,\n  fetchMetadata,\n}: UseBookmarkOperationsOptions): BookmarkOperations {\n  // Mark intentionally unused option to satisfy linter while preserving signature\n  void _pinned;\n  return useMemo(() => {\n    function addBookmark(verseId: string, folderId?: string): void {\n      if (folderId === 'pinned') {\n        setPinned((p) =>\n          p.some((b) => b.verseId === verseId) ? p : [...p, { verseId, createdAt: Date.now() }]\n        );\n        void fetchMetadata(verseId, chapters);\n        return;\n      }\n      setFolders((p) => addBookmarkToFolder(p, verseId, folderId));\n      void fetchMetadata(verseId, chapters);\n    }\n    function removeBookmark(verseId: string, folderId: string): void {\n      if (folderId === 'pinned') {\n        setPinned((p) => p.filter((b) => b.verseId !== verseId));\n        return;\n      }\n      setFolders((p) => removeBookmarkFromFolder(p, verseId, folderId));\n    }\n    function toggleBookmark(verseId: string, folderId?: string): void {\n      if (isVerseBookmarked(folders, verseId)) {\n        const f = findBookmarkInFolders(folders, verseId);\n        if (f) removeBookmark(verseId, f.folder.id);\n      } else {\n        addBookmark(verseId, folderId);\n      }\n    }\n    function updateBookmark(verseId: string, data: Partial<Bookmark>): void {\n      setFolders((p) => updateBookmarkInFolders(p, verseId, data));\n      setPinned((p) => p.map((b) => (b.verseId === verseId ? { ...b, ...data } : b)));\n    }\n    return { addBookmark, removeBookmark, toggleBookmark, updateBookmark };\n  }, [folders, setFolders, setPinned, chapters, fetchMetadata]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useFolderOperations.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":53,"fix":{"range":[121,138],"text":"@/app/providers/bookmarks/bookmark-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useCallback } from 'react';\n\nimport { Folder } from '@/types';\n\nimport { createNewFolder } from '../bookmark-utils';\n\nexport interface FolderOperations {\n  createFolder: (name: string, color?: string, icon?: string) => void;\n  deleteFolder: (folderId: string) => void;\n  renameFolder: (folderId: string, newName: string, color?: string, icon?: string) => void;\n}\n\nexport const useFolderOperations = (\n  setFolders: React.Dispatch<React.SetStateAction<Folder[]>>\n): FolderOperations => {\n  const createFolder = useCallback(\n    (name: string, color?: string, icon?: string) => {\n      const newFolder = createNewFolder(name, color, icon);\n      setFolders((prev) => [...prev, newFolder]);\n    },\n    [setFolders]\n  );\n\n  const deleteFolder = useCallback(\n    (folderId: string) => {\n      setFolders((prev) => prev.filter((f) => f.id !== folderId));\n    },\n    [setFolders]\n  );\n\n  const renameFolder = useCallback(\n    (folderId: string, newName: string, color?: string, icon?: string) => {\n      setFolders((prev) =>\n        prev.map((folder) =>\n          folder.id === folderId\n            ? { ...folder, name: newName, ...(color && { color }), ...(icon && { icon }) }\n            : folder\n        )\n      );\n    },\n    [setFolders]\n  );\n\n  return { createFolder, deleteFolder, renameFolder };\n};\n\nexport default useFolderOperations;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useMemorizationOperations.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":88,"fix":{"range":[165,182],"text":"@/app/providers/bookmarks/bookmark-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { useCallback } from 'react';\n\nimport { MemorizationPlan } from '@/types';\n\nimport { createMemorizationPlan, updateMemorizationProgress } from '../bookmark-utils';\nexport interface MemorizationOperations {\n  addToMemorization(surahId: number, targetVerses?: number): void;\n  createMemorizationPlan(surahId: number, targetVerses: number, planName?: string): void;\n  updateMemorizationProgress(surahId: number, completedVerses: number): void;\n  removeFromMemorization(surahId: number): void;\n}\nexport default function useMemorizationOperations(\n  memorization: Record<string, MemorizationPlan>,\n  setMemorization: React.Dispatch<React.SetStateAction<Record<string, MemorizationPlan>>>\n): MemorizationOperations {\n  const addToMemorization = useCallback(\n    (surahId: number, targetVerses = 10) => {\n      const key = surahId.toString();\n      if (memorization[key]) return;\n      const plan = createMemorizationPlan(surahId, targetVerses);\n      setMemorization((prev) => ({ ...prev, [key]: plan }));\n    },\n    [memorization, setMemorization]\n  );\n  const createPlan = useCallback(\n    (surahId: number, targetVerses: number, planName?: string) => {\n      const key = surahId.toString();\n      const plan = createMemorizationPlan(surahId, targetVerses, planName);\n      setMemorization((prev) => ({ ...prev, [key]: plan }));\n    },\n    [setMemorization]\n  );\n  const updateProgress = useCallback(\n    (surahId: number, completed: number) => {\n      setMemorization((prev) => updateMemorizationProgress(prev, surahId, completed));\n    },\n    [setMemorization]\n  );\n  const removeFromMemorization = useCallback(\n    (surahId: number) => {\n      const key = surahId.toString();\n      setMemorization((prev) => {\n        const next = { ...prev };\n        delete next[key];\n        return next;\n      });\n    },\n    [setMemorization]\n  );\n  return {\n    addToMemorization,\n    createMemorizationPlan: createPlan,\n    updateMemorizationProgress: updateProgress,\n    removeFromMemorization,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/usePinnedBookmarks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/storage-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/panelController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useBodyScrollLock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useEscapeKey.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useOpenPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/usePanelState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/usePersistentSettings.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":46,"fix":{"range":[106,124],"text":"@/app/providers/settingsReducer"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":82,"fix":{"range":[188,206],"text":"@/app/providers/settingsStorage"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":50,"fix":{"range":[239,257],"text":"@/app/providers/settingsReducer"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport { Dispatch, useEffect, useReducer, useRef } from 'react';\n\nimport { reducer } from '../settingsReducer';\nimport { defaultSettings, loadSettings, saveSettings } from '../settingsStorage';\n\nimport type { Action } from '../settingsReducer';\nimport type { Settings } from '@/types';\n\nconst PERSIST_DEBOUNCE_MS = 300;\n\ninterface UsePersistentSettingsReturn {\n  settings: Settings;\n  dispatch: Dispatch<Action>;\n}\n\nexport const usePersistentSettings = (): UsePersistentSettingsReturn => {\n  const [settings, dispatch] = useReducer(reducer, defaultSettings);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n  const latestSettings = useRef(settings);\n  const hasLoadedFromStorage = useRef(false);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    const loaded = loadSettings(defaultSettings);\n    hasLoadedFromStorage.current = true;\n    dispatch({ type: 'SET_SETTINGS', value: loaded });\n    latestSettings.current = loaded;\n  }, []);\n\n  useEffect(() => {\n    latestSettings.current = settings;\n    if (typeof window === 'undefined') return;\n    if (!hasLoadedFromStorage.current) return;\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => {\n      saveSettings(settings);\n      timeoutRef.current = null;\n    }, PERSIST_DEBOUNCE_MS);\n\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    };\n  }, [settings]);\n\n  useEffect(() => {\n    return () => {\n      if (typeof window === 'undefined') return;\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        saveSettings(latestSettings.current);\n      }\n    };\n  }, []);\n\n  return { settings, dispatch };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useScrollPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useSidebarScrollPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsNormalization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsReducer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/HeaderSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/IconSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/LoadingError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ResponsiveVerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/SelectionBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/Spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/SurahListSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/VerseArabic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/Header.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/LoadingError.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/ResponsiveVerseActions.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/ResponsiveVerseActions.render.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (72). Maximum allowed is 50.","line":9,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":92,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { screen } from '@testing-library/react';\n\nimport {\n  renderResponsiveVerseActions,\n  renderWithResponsiveState,\n  testAccessibility,\n} from './test-helpers';\n\ndescribe('ResponsiveVerseActions render', () => {\n  it('[Cross-Device] renders correctly on mobile', () => {\n    renderWithResponsiveState('compact', 'mobile');\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Cross-Device] renders correctly on tablet', () => {\n    renderWithResponsiveState('default', 'tablet');\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Cross-Device] renders correctly on desktop', () => {\n    renderResponsiveVerseActions();\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Touch Targets] are WCAG-compliant on mobile', () => {\n    const { container } = renderWithResponsiveState('compact', 'mobile');\n    const result = testAccessibility.testTouchTargets(container);\n    expect(result.isCompliant).toBe(true);\n    expect(result.undersizedTargets).toHaveLength(0);\n  });\n\n  it('[Touch Targets] are appropriate on tablets', () => {\n    const { container } = renderWithResponsiveState('default', 'tablet');\n    const result = testAccessibility.testTouchTargets(container);\n    expect(result.isCompliant).toBe(true);\n    expect(result.totalTargets).toBeGreaterThan(0);\n  });\n\n  it('[Accessibility] has proper focus management', async () => {\n    const { container } = renderResponsiveVerseActions();\n    const result = await testAccessibility.testFocusManagement(container);\n    expect(result.focusableCount).toBeGreaterThan(0);\n    expect(result.hasLogicalOrder).toBe(true);\n  });\n\n  it('[Variants] applies compact classes for mobile', () => {\n    const { container } = renderWithResponsiveState('compact', 'mobile');\n    const component = container.firstChild as HTMLElement;\n    expect(component).toBeTruthy();\n  });\n\n  it('[Variants] applies expanded classes for desktop', () => {\n    const { container } = renderWithResponsiveState('expanded', 'desktop');\n    const component = container.firstChild as HTMLElement;\n    expect(component).toBeTruthy();\n  });\n\n  it('[Functionality] tafsir link has correct href', () => {\n    renderResponsiveVerseActions();\n    const link = screen.getByRole('link', { name: 'View tafsir' });\n    expect(link).toHaveAttribute('href', '/tafsir/1/1');\n  });\n\n  it('[Functionality] handles different verse keys', () => {\n    renderResponsiveVerseActions({ verseKey: '2:255' });\n    const link = screen.getByRole('link', { name: 'View tafsir' });\n    expect(link).toHaveAttribute('href', '/tafsir/2/255');\n  });\n\n  it('[Errors] handles missing props gracefully', () => {\n    // Avoid nested callback in expect().not.toThrow\n    try {\n      renderResponsiveVerseActions();\n    } catch (e) {\n      expect(e).toBeUndefined();\n    }\n  });\n\n  it('[Errors] handles invalid verse key format', () => {\n    try {\n      renderResponsiveVerseActions({ verseKey: 'invalid' });\n    } catch (e) {\n      expect(e).toBeUndefined();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/test-helpers.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":85,"fix":{"range":[112,159],"text":"@/lib/__tests__/responsive-test-utils"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[202,230],"text":"@/app/shared/ResponsiveVerseActions"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":71,"fix":{"range":[274,302],"text":"@/app/shared/ResponsiveVerseActions"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { render } from '@testing-library/react';\nimport React from 'react';\n\nimport { testAccessibility } from '../../../../lib/__tests__/responsive-test-utils';\nimport { ResponsiveVerseActions } from '../../ResponsiveVerseActions';\n\nimport type { VerseActionsProps } from '../../ResponsiveVerseActions';\n\nexport const noop = (): void => {};\n\nexport const defaultProps: VerseActionsProps = {\n  verseKey: '1:1',\n  isPlaying: false,\n  isLoadingAudio: false,\n  isBookmarked: false,\n  onPlayPause: noop,\n  onBookmark: noop,\n};\n\nlet mockVariant = 'expanded';\nlet mockBreakpoint = 'desktop';\n\nconst mockResponsiveState = (\n  variant: string,\n  breakpoint: string\n): {\n  variant: string;\n  breakpoint: string;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n} => ({\n  variant,\n  breakpoint,\n  isMobile: breakpoint === 'mobile',\n  isTablet: breakpoint === 'tablet',\n  isDesktop: ['desktop', 'wide'].includes(breakpoint),\n});\n\njest.mock('@/lib/responsive', () => ({\n  useResponsiveState: () => mockResponsiveState(mockVariant, mockBreakpoint),\n  touchClasses: {\n    target: 'min-h-touch min-w-touch',\n    gesture: 'touch-manipulation select-none',\n    focus: 'focus-visible:ring-2 focus-visible:ring-accent focus-visible:outline-none',\n    active: 'active:scale-95 transition-transform',\n  },\n}));\n\nexport const setMockVariant = (variant: string): void => {\n  mockVariant = variant;\n};\n\nexport const setMockBreakpoint = (breakpoint: string): void => {\n  mockBreakpoint = breakpoint;\n};\n\nexport const renderResponsiveVerseActions = (\n  props: Partial<VerseActionsProps> = {}\n): ReturnType<typeof render> => render(<ResponsiveVerseActions {...defaultProps} {...props} />);\n\nexport const rerenderResponsiveVerseActions = (\n  rerender: (ui: React.ReactElement) => void,\n  props: Partial<VerseActionsProps> = {}\n): void => rerender(<ResponsiveVerseActions {...defaultProps} {...props} />);\n\nexport const renderWithResponsiveState = (\n  variant: string,\n  breakpoint: string,\n  props: Partial<VerseActionsProps> = {}\n): ReturnType<typeof renderResponsiveVerseActions> => {\n  setMockVariant(variant);\n  setMockBreakpoint(breakpoint);\n  return renderResponsiveVerseActions(props);\n};\n\nbeforeEach(() => {\n  mockVariant = 'expanded';\n  mockBreakpoint = 'desktop';\n});\n\nexport { testAccessibility };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/Spinner.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/SurahListSidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/BookmarkModal.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'BookmarkModal' has too many lines (79). Maximum allowed is 50.","line":15,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":98,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { memo } from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { TabContent } from './components/TabContent';\nimport { TabNavigation } from './components/TabNavigation';\nimport { BookmarkModalProps } from './types';\nimport { useBookmarkModal } from './useBookmarkModal';\n\nexport const BookmarkModal = memo(function BookmarkModal({\n  isOpen,\n  onClose,\n  verseId,\n  verseKey = '',\n}: BookmarkModalProps): React.JSX.Element {\n  const {\n    activeTab,\n    setActiveTab,\n    isCreatingFolder,\n    openCreateFolder,\n    closeCreateFolder,\n    newFolderName,\n    setNewFolderName,\n  } = useBookmarkModal(isOpen, onClose);\n\n  const backdropVariants = { hidden: { opacity: 0 }, visible: { opacity: 1 } };\n  const modalVariants = {\n    hidden: { opacity: 0, scale: 0.95, y: 20 },\n    visible: { opacity: 1, scale: 1, y: 0 },\n    exit: { opacity: 0, scale: 0.95, y: 20 },\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            variants={backdropVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-modal touch-none\"\n            onClick={onClose}\n          />\n\n          <motion.div\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n            className=\"fixed inset-0 flex items-center justify-center z-modal p-4 pointer-events-none\"\n          >\n            <div\n              role=\"dialog\"\n              aria-modal=\"true\"\n              aria-label=\"Bookmark options\"\n              className=\"bg-surface rounded-3xl shadow-2xl w-full max-w-md max-h-[80vh] flex flex-col pointer-events-auto\"\n            >\n              <div className=\"flex justify-end p-4\">\n                <button\n                  onClick={onClose}\n                  className={cn(\n                    'p-2 rounded-full hover:bg-interactive transition-colors',\n                    touchClasses.target,\n                    touchClasses.focus\n                  )}\n                  aria-label=\"Close\"\n                >\n                  <CloseIcon size={20} className=\"text-muted\" />\n                </button>\n              </div>\n\n              <TabNavigation activeTab={activeTab} onTabChange={setActiveTab} verseKey={verseKey} />\n\n              <TabContent\n                activeTab={activeTab}\n                verseId={verseId}\n                verseKey={verseKey}\n                isCreatingFolder={isCreatingFolder}\n                newFolderName={newFolderName}\n                onToggleCreateFolder={(creating) =>\n                  creating ? openCreateFolder() : closeCreateFolder()\n                }\n                onNewFolderNameChange={setNewFolderName}\n              />\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/CreateFolderForm.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (60). Maximum allowed is 50.","line":17,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport { CloseIcon, CheckIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\ninterface CreateFolderFormProps {\n  newFolderName: string;\n  onNameChange: (name: string) => void;\n  onCreateFolder: () => void;\n  onCancel: () => void;\n}\n\nexport const CreateFolderForm = ({\n  newFolderName,\n  onNameChange,\n  onCreateFolder,\n  onCancel,\n}: CreateFolderFormProps): React.JSX.Element => {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onCreateFolder();\n  };\n\n  return (\n    <motion.form\n      onSubmit={handleSubmit}\n      initial={{ opacity: 0, y: -10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      className=\"flex items-center gap-2 p-4 bg-surface-secondary rounded-2xl border border-border\"\n    >\n      <input\n        type=\"text\"\n        value={newFolderName}\n        onChange={(e) => onNameChange(e.target.value)}\n        placeholder=\"Folder name\"\n        className={cn(\n          'flex-1 bg-surface/0 text-foreground placeholder-muted',\n          'focus:outline-none'\n        )}\n      />\n\n      <div className=\"flex items-center gap-1\">\n        <button\n          type=\"submit\"\n          disabled={!newFolderName.trim()}\n          className={cn(\n            'p-2 rounded-full transition-colors',\n            newFolderName.trim()\n              ? 'text-accent hover:bg-accent/10'\n              : 'text-muted cursor-not-allowed',\n            touchClasses.target,\n            touchClasses.focus\n          )}\n          aria-label=\"Create folder\"\n        >\n          <CheckIcon size={16} />\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className={cn(\n            'p-2 rounded-full hover:bg-interactive text-muted transition-colors',\n            touchClasses.target,\n            touchClasses.focus\n          )}\n          aria-label=\"Cancel\"\n        >\n          <CloseIcon size={16} />\n        </button>\n      </div>\n    </motion.form>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/FolderList.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (68). Maximum allowed is 50.","line":18,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":89,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":40,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":86,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { motion } from 'framer-motion';\n\nimport { FolderIcon, CheckIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\nimport { Folder, Bookmark } from '@/types';\n\ninterface FolderListProps {\n  folders: Folder[];\n  verseId: string;\n  onFolderSelect: (folder: Folder) => void;\n  findBookmark: (verseId: string) => { folder: Folder; bookmark: Bookmark } | null;\n  emptyMessage?: string;\n}\n\nexport const FolderList = ({\n  folders,\n  verseId,\n  onFolderSelect,\n  findBookmark,\n  emptyMessage = 'No folders found',\n}: FolderListProps): React.JSX.Element => {\n  const existingBookmark = findBookmark(verseId);\n\n  if (folders.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"w-16 h-16 bg-surface-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n          <FolderIcon size={24} className=\"text-muted\" />\n        </div>\n        <p className=\"text-muted\">{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {folders.map((folder) => {\n        const isSelected = existingBookmark?.folder.id === folder.id;\n        const bookmarkCount = folder.bookmarks?.length || 0;\n\n        return (\n          <motion.button\n            key={folder.id}\n            onClick={() => onFolderSelect(folder)}\n            className={cn(\n              'w-full flex items-center gap-4 p-4 rounded-2xl transition-all duration-200 text-left',\n              isSelected\n                ? 'bg-accent/10 border border-accent/20'\n                : 'hover:bg-interactive border border-transparent',\n              touchClasses.target,\n              touchClasses.focus\n            )}\n            whileTap={{ scale: 0.98 }}\n          >\n            <div\n              className={cn(\n                'flex-shrink-0 w-10 h-10 rounded-2xl flex items-center justify-center',\n                !folder.color && 'bg-surface-secondary'\n              )}\n              style={folder.color ? { backgroundColor: folder.color } : undefined}\n            >\n              <FolderIcon size={20} className={isSelected ? 'text-accent' : 'text-foreground'} />\n            </div>\n\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2\">\n                <h3\n                  className={cn(\n                    'font-medium truncate',\n                    isSelected ? 'text-accent' : 'text-foreground'\n                  )}\n                >\n                  {folder.name}\n                </h3>\n                {isSelected && <CheckIcon size={16} className=\"text-accent flex-shrink-0\" />}\n              </div>\n              <p className=\"text-sm text-muted\">\n                {bookmarkCount} {bookmarkCount === 1 ? 'verse' : 'verses'}\n              </p>\n            </div>\n          </motion.button>\n        );\n      })}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/FolderSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/BookmarkTab.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":56,"fix":{"range":[401,420],"text":"@/app/shared/bookmark-modal/CreateFolderForm"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":44,"fix":{"range":[451,464],"text":"@/app/shared/bookmark-modal/FolderList"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":48,"fix":{"range":[497,512],"text":"@/app/shared/bookmark-modal/FolderSearch"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":45,"fix":{"range":[549,557],"text":"@/app/shared/bookmark-modal/types"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'BookmarkTab' has too many lines (90). Maximum allowed is 50.","line":17,"column":33,"nodeType":"FunctionExpression","messageId":"exceed","endLine":112,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"'use client';\n\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { memo, useCallback, useMemo, useState } from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { PlusIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\nimport { Folder } from '@/types';\n\nimport { CreateFolderForm } from '../CreateFolderForm';\nimport { FolderList } from '../FolderList';\nimport { FolderSearch } from '../FolderSearch';\nimport { BookmarkTabProps } from '../types';\n\nexport const BookmarkTab = memo(function BookmarkTab({\n  verseId,\n  isCreatingFolder,\n  newFolderName,\n  onToggleCreateFolder,\n  onNewFolderNameChange,\n}: BookmarkTabProps): React.JSX.Element {\n  const { folders, findBookmark, addBookmark, removeBookmark, createFolder } = useBookmarks();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFolders = useMemo(() => {\n    if (!searchQuery.trim()) return folders;\n    return folders.filter((folder) =>\n      folder.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [folders, searchQuery]);\n\n  const handleFolderSelect = useCallback(\n    (folder: Folder) => {\n      const existingBookmark = findBookmark(verseId);\n      if (existingBookmark && existingBookmark.folder.id === folder.id) {\n        removeBookmark(verseId, folder.id);\n      } else {\n        if (existingBookmark) {\n          removeBookmark(verseId, existingBookmark.folder.id);\n        }\n        addBookmark(verseId, folder.id);\n      }\n    },\n    [verseId, findBookmark, removeBookmark, addBookmark]\n  );\n\n  const handleCreateFolder = useCallback(() => {\n    if (newFolderName.trim()) {\n      createFolder(newFolderName.trim());\n      onNewFolderNameChange('');\n      onToggleCreateFolder(false);\n    }\n  }, [newFolderName, createFolder, onNewFolderNameChange, onToggleCreateFolder]);\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* Search and Create Folder */}\n      <div className=\"px-6 py-4 space-y-4 border-b border-border\">\n        <FolderSearch\n          searchQuery={searchQuery}\n          onSearchChange={setSearchQuery}\n          placeholder=\"Search folders...\"\n        />\n\n        <AnimatePresence mode=\"wait\">\n          {isCreatingFolder ? (\n            <CreateFolderForm\n              newFolderName={newFolderName}\n              onNameChange={onNewFolderNameChange}\n              onCreateFolder={handleCreateFolder}\n              onCancel={() => onToggleCreateFolder(false)}\n            />\n          ) : (\n            <motion.button\n              onClick={() => onToggleCreateFolder(true)}\n              className={cn(\n                'w-full flex items-center justify-center gap-3 p-4 border-2 border-dashed border-border rounded-2xl',\n                'hover:border-accent hover:bg-accent/5 transition-colors text-muted hover:text-accent',\n                touchClasses.target,\n                touchClasses.focus\n              )}\n              whileTap={{ scale: 0.98 }}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n            >\n              <PlusIcon size={20} />\n              <span className=\"font-medium\">Create new folder</span>\n            </motion.button>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Folder List */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        <FolderList\n          folders={filteredFolders}\n          verseId={verseId}\n          onFolderSelect={handleFolderSelect}\n          findBookmark={findBookmark}\n          emptyMessage={\n            searchQuery\n              ? 'No folders match your search'\n              : 'No folders yet. Create one to get started!'\n          }\n        />\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/PinTab.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":40,"fix":{"range":[312,320],"text":"@/app/shared/bookmark-modal/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { memo } from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { PinIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { PinTabProps } from '../types';\n\nexport const PinTab = memo(function PinTab({ verseId, verseKey }: PinTabProps): React.JSX.Element {\n  const { isPinned, togglePinned } = useBookmarks();\n  const isVersePinned = isPinned(verseId);\n\n  return (\n    <div className=\"p-6 flex flex-col items-center justify-center min-h-[200px] space-y-6\">\n      <div className=\"text-center space-y-3\">\n        <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto\">\n          <PinIcon size={32} className={isVersePinned ? 'text-accent' : 'text-muted'} />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"font-medium text-foreground\">\n            {isVersePinned ? 'Pinned verse' : 'Pin this verse'}\n          </h3>\n          <p className=\"text-sm text-muted text-center max-w-xs\">\n            {isVersePinned\n              ? `Verse ${verseKey || verseId} is pinned to your quick access.`\n              : `Pin verse ${verseKey || verseId} for quick access from anywhere in the app.`}\n          </p>\n        </div>\n      </div>\n\n      <motion.button\n        onClick={() => togglePinned(verseId)}\n        className={cn(\n          'px-6 py-3 rounded-2xl font-medium transition-colors',\n          isVersePinned\n            ? 'bg-accent/10 text-accent hover:bg-accent/20'\n            : 'bg-accent text-on-accent hover:bg-accent/90',\n          touchClasses.target,\n          touchClasses.focus\n        )}\n        whileTap={{ scale: 0.98 }}\n      >\n        {isVersePinned ? 'Unpin verse' : 'Pin verse'}\n      </motion.button>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/TabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/useBookmarkModal.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react';\n\nexport interface UseBookmarkModalReturn {\n  activeTab: 'bookmark' | 'pin';\n  setActiveTab: Dispatch<SetStateAction<'bookmark' | 'pin'>>;\n  isCreatingFolder: boolean;\n  openCreateFolder: () => void;\n  closeCreateFolder: () => void;\n  newFolderName: string;\n  setNewFolderName: Dispatch<SetStateAction<string>>;\n}\n\nexport function useBookmarkModal(isOpen: boolean, onClose: () => void): UseBookmarkModalReturn {\n  const [activeTab, setActiveTab] = useState<'bookmark' | 'pin'>('pin');\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [newFolderName, setNewFolderName] = useState('');\n\n  useEffect(() => {\n    if (!isOpen) return;\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') onClose();\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onClose]);\n\n  const openCreateFolder = useCallback((): void => setIsCreatingFolder(true), []);\n  const closeCreateFolder = useCallback((): void => {\n    setIsCreatingFolder(false);\n    setNewFolderName('');\n  }, []);\n\n  return {\n    activeTab,\n    setActiveTab,\n    isCreatingFolder,\n    openCreateFolder,\n    closeCreateFolder,\n    newFolderName,\n    setNewFolderName,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/AdaptiveLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/AudioErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/BaseSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/BookmarkModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/ConfirmDeleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SearchInput.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":39,"fix":{"range":[70,78],"text":"@/app/shared/icons"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport React from 'react';\n\nimport { SearchIcon } from '../icons';\n\ntype SearchVariant = 'main' | 'default' | 'glass' | 'header' | 'panel';\ntype SearchSize = 'sm' | 'md' | 'lg';\n\ntype SizeStyles = {\n  container: string;\n  input: string;\n  icon: { size: number; className: string };\n};\n\ninterface SearchInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  className?: string;\n  variant?: SearchVariant;\n  size?: SearchSize;\n}\n\nconst getVariantStyles = (variant: SearchVariant): string => {\n  switch (variant) {\n    case 'header':\n      return 'bg-interactive/60 text-foreground border border-border placeholder:text-muted';\n    case 'panel':\n      return 'bg-interactive/60 border border-border text-foreground placeholder:text-muted';\n    case 'glass':\n      return 'bg-surface-glass/60 text-lg text-foreground border-none placeholder:text-input-placeholder backdrop-blur-xl shadow-lg hover:shadow-xl';\n    default:\n      return 'bg-interactive/60 text-foreground border border-border placeholder:text-muted';\n  }\n};\n\nconst getSizeStyles = (size: SearchSize): SizeStyles => {\n  switch (size) {\n    case 'sm':\n      return {\n        container: 'text-mobile-sm',\n        input: 'pl-8 sm:pl-9 pr-3 py-2 min-h-touch',\n        icon: { size: 16, className: 'left-2.5 sm:left-3' },\n      };\n    case 'lg':\n      return {\n        container: 'text-mobile sm:text-lg',\n        input: 'pl-10 sm:pl-11 pr-4 py-3 sm:py-3.5 min-h-touch-lg',\n        icon: { size: 18, className: 'left-3 sm:left-3.5' },\n      };\n    default: // md\n      return {\n        container: 'text-mobile',\n        input: 'pl-9 sm:pl-10 pr-4 py-2.5 min-h-touch',\n        icon: { size: 18, className: 'left-3 sm:left-3.5' },\n      };\n  }\n};\n\nconst getFocusStyles = (variant: SearchVariant): string => {\n  switch (variant) {\n    case 'panel':\n      return 'focus:ring-2 focus:ring-accent focus:border-transparent';\n    default:\n      return 'focus:ring-1 focus:ring-accent';\n  }\n};\n\nconst getHoverStyles = (variant: SearchVariant): string => {\n  switch (variant) {\n    case 'panel':\n      return ''; // No hover effects - only focus ring appears on click\n    case 'glass':\n      return 'hover:shadow-xl';\n    default:\n      return 'hover:shadow-lg hover:ring-1 hover:ring-accent'; // Ring + shadow\n  }\n};\n\nexport const SearchInput = ({\n  value,\n  onChange,\n  placeholder,\n  onKeyDown,\n  className = '',\n  variant = 'default',\n  size = 'md',\n}: SearchInputProps): JSX.Element => {\n  const variantStyles = getVariantStyles(variant);\n  const sizeStyles = getSizeStyles(size);\n  const focusStyles = getFocusStyles(variant);\n  const hoverStyles = getHoverStyles(variant);\n\n  const IconComponent = SearchIcon;\n  const iconSize = sizeStyles.icon.size;\n\n  return (\n    <div className={`relative ${sizeStyles.container} ${className}`}>\n      <IconComponent\n        size={iconSize}\n        className={`absolute ${sizeStyles.icon.className} top-1/2 -translate-y-1/2 text-muted`}\n      />\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e): void => onChange(e.target.value)}\n        placeholder={placeholder}\n        onKeyDown={onKeyDown}\n        className={`w-full ${sizeStyles.input} rounded-lg outline-none focus:outline-none ${focusStyles} transition-all duration-300 ${hoverStyles} ${variantStyles} touch-manipulation`}\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        inputMode=\"search\"\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SidebarHeader.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":59},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":93,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":95},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":41,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":82,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { CloseIcon, ArrowLeftIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\ninterface SidebarHeaderProps {\n  title: string;\n  onClose?: () => void;\n  onBack?: () => void;\n  showCloseButton?: boolean;\n  showBackButton?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst BackButton = ({ onBack }: { onBack: () => void }) => (\n  <button\n    onClick={onBack}\n    className=\"p-2 rounded-full hover:bg-surface-hover transition-colors\"\n    aria-label=\"Go back\"\n  >\n    <ArrowLeftIcon size={20} className=\"text-foreground\" />\n  </button>\n);\n\nconst CloseButton = ({ onClose, alwaysShow }: { onClose: () => void; alwaysShow: boolean }) => (\n  <button\n    onClick={onClose}\n    className={cn(\n      'btn-touch p-2 rounded-md hover:bg-surface/60 transition-colors',\n      alwaysShow ? '' : 'md:hidden'\n    )}\n    aria-label=\"Close sidebar\"\n  >\n    <CloseIcon size={18} />\n  </button>\n);\n\nexport const SidebarHeader = ({\n  title,\n  onClose,\n  onBack,\n  showCloseButton = false,\n  showBackButton = false,\n  className,\n  children,\n}: SidebarHeaderProps): React.JSX.Element => {\n  const shouldShowBack = Boolean(showBackButton && onBack);\n  const shouldShowClose = Boolean(showCloseButton && onClose);\n  const alwaysShowClose = title === 'Settings';\n\n  const containerClass = cn(\n    'flex items-center justify-between px-3 sm:px-4 py-3 sm:py-4 shadow-card',\n    showCloseButton && 'md:justify-center',\n    className\n  );\n\n  return (\n    <div className={containerClass}>\n      {shouldShowBack && onBack ? <BackButton onBack={onBack} /> : null}\n\n      <h2\n        className={cn(\n          'text-lg font-semibold text-foreground',\n          showBackButton && 'flex-1 text-center'\n        )}\n      >\n        {title}\n      </h2>\n\n      {shouldShowClose && onClose ? (\n        <CloseButton onClose={onClose} alwaysShow={alwaysShowClose} />\n      ) : null}\n\n      {children}\n\n      {showBackButton && !showCloseButton ? <div className=\"w-10 h-10\" aria-hidden=\"true\" /> : null}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SurahListContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":68,"fix":{"range":[227,255],"text":"@/app/shared/hooks/useSurahListFilters"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { memo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SearchInput } from './SearchInput';\nimport { SurahTabs } from './SurahTabs';\nimport { useSurahListFilters } from '../hooks/useSurahListFilters';\n\nimport type { Chapter } from '@/types';\n\ninterface SurahListContentProps {\n  chapters: Chapter[];\n}\n\nexport const SurahListContent = memo(function SurahListContent({\n  chapters,\n}: SurahListContentProps): React.JSX.Element {\n  const { t } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const { filteredChapters, filteredJuzs, filteredPages } = useSurahListFilters(\n    chapters,\n    searchTerm\n  );\n\n  const searchInput = (\n    <div className=\"p-3 sm:p-4 border-b border-border md:border-b-0 md:pb-2\">\n      <SearchInput\n        value={searchTerm}\n        onChange={setSearchTerm}\n        placeholder={t('search_surah')}\n        variant=\"panel\"\n        className=\"text-mobile\"\n      />\n    </div>\n  );\n\n  return (\n    <SurahTabs\n      chapters={chapters}\n      filteredChapters={filteredChapters}\n      filteredJuzs={filteredJuzs}\n      filteredPages={filteredPages}\n      searchInput={searchInput}\n    />\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SurahTabs.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[85,124],"text":"@/app/shared/surah-sidebar/components/SidebarTabs"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":76,"fix":{"range":[161,200],"text":"@/app/shared/surah-sidebar/hooks/useSelectionSync"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":70,"fix":{"range":[237,270],"text":"@/app/shared/surah-sidebar/useSidebarScroll"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SurahTabs' has too many lines (65). Maximum allowed is 50.","line":28,"column":31,"nodeType":"FunctionExpression","messageId":"exceed","endLine":96,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport { memo, useState } from 'react';\n\nimport { SidebarTabs } from '../surah-sidebar/components/SidebarTabs';\nimport { useSelectionSync } from '../surah-sidebar/hooks/useSelectionSync';\nimport { useSidebarScroll } from '../surah-sidebar/useSidebarScroll';\nimport { TabContent } from './surah-tabs/TabContent';\nimport { useSurahTabConfig } from './surah-tabs/useSurahTabConfig';\nimport { useSurahTabParams } from './surah-tabs/useSurahTabParams';\n\nimport type { Chapter } from '@/types';\n\ninterface JuzSummary {\n  number: number;\n  name: string;\n  surahRange: string;\n}\n\ninterface SurahTabsProps {\n  chapters: Chapter[];\n  filteredChapters: Chapter[];\n  filteredJuzs: JuzSummary[];\n  filteredPages: number[];\n  searchInput: React.ReactNode;\n}\n\nexport const SurahTabs = memo(function SurahTabs({\n  chapters,\n  filteredChapters,\n  filteredJuzs,\n  filteredPages,\n  searchInput,\n}: SurahTabsProps) {\n  const { currentSurahId, currentJuzId, currentPageId, isTafsirPath, getInitialTab } =\n    useSurahTabParams();\n  const { tabs } = useSurahTabConfig();\n\n  const [activeTab, setActiveTab] = useState<'Surah' | 'Juz' | 'Page'>(getInitialTab);\n\n  const {\n    selectedSurahId,\n    setSelectedSurahId,\n    selectedJuzId,\n    setSelectedJuzId,\n    selectedPageId,\n    setSelectedPageId,\n  } = useSelectionSync({\n    currentSurahId,\n    currentJuzId,\n    currentPageId,\n    chapters,\n  });\n\n  const { scrollRef, handleScroll, prepareForTabSwitch, rememberScroll } = useSidebarScroll({\n    activeTab,\n    selectedSurahId,\n    selectedJuzId,\n    selectedPageId,\n  });\n\n  return (\n    <>\n      <div className=\"p-3 sm:p-4 border-b border-border md:border-b-0 md:p-3 md:pb-1\">\n        <SidebarTabs\n          tabs={tabs}\n          activeTab={activeTab}\n          setActiveTab={setActiveTab}\n          prepareForTabSwitch={prepareForTabSwitch}\n        />\n      </div>\n      {searchInput}\n      <div\n        ref={scrollRef}\n        onScroll={handleScroll}\n        className=\"flex-1 min-h-0 overflow-y-auto p-2 sm:p-3 touch-pan-y\"\n      >\n        <TabContent\n          activeTab={activeTab}\n          filteredChapters={filteredChapters}\n          filteredJuzs={filteredJuzs}\n          filteredPages={filteredPages}\n          chapters={chapters}\n          selectedSurahId={selectedSurahId}\n          setSelectedSurahId={setSelectedSurahId}\n          selectedJuzId={selectedJuzId}\n          setSelectedJuzId={setSelectedJuzId}\n          selectedPageId={selectedPageId}\n          setSelectedPageId={setSelectedPageId}\n          rememberScroll={rememberScroll}\n          isTafsirPath={isTafsirPath}\n        />\n      </div>\n    </>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/VerseErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ErrorBoundary.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":51,"fix":{"range":[177,194],"text":"@/app/shared/components/error-boundary"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen } from '@testing-library/react';\nimport React from 'react';\n\nimport { ErrorHandler } from '@/src/infrastructure/errors';\n\nimport { ErrorBoundary } from '../error-boundary';\n\njest.mock('@/src/infrastructure/errors', () => ({\n  ErrorHandler: { handle: jest.fn() },\n}));\n\nfunction Boom(): never {\n  throw new Error('boom');\n}\n\nconst Fallback = ({ resetError }: { resetError: () => void }): React.ReactElement => (\n  <div>\n    Fallback\n    <button onClick={resetError}>retry</button>\n  </div>\n);\n\ndescribe('ErrorBoundary', () => {\n  it('delegates errors to ErrorHandler', () => {\n    render(\n      <ErrorBoundary fallback={Fallback}>\n        <Boom />\n      </ErrorBoundary>\n    );\n\n    expect(ErrorHandler.handle).toHaveBeenCalled();\n    expect(screen.getByText('Fallback')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ResponsiveImage.preload.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":69,"fix":{"range":[112,145],"text":"@/app/shared/hooks/image/useImagePreload"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook } from '@testing-library/react';\n\nimport './test-helpers';\nimport { useImagePreload } from '../../hooks/image/useImagePreload';\n\ndescribe('useImagePreload', () => {\n  let originalImage: typeof Image;\n  let created: Array<{ src: string }>;\n\n  class MockImage {\n    src = '';\n    constructor() {\n      created.push(this);\n    }\n  }\n\n  beforeEach(() => {\n    created = [];\n    originalImage = window.Image;\n    // @ts-expect-error override for testing\n    window.Image = MockImage as unknown as typeof Image;\n  });\n\n  afterEach(() => {\n    window.Image = originalImage;\n  });\n\n  it('preloads images when condition is true', () => {\n    const sources = ['/image1.jpg', '/image2.jpg'];\n    renderHook(() => useImagePreload(sources, true));\n    expect(created.map((img) => img.src)).toEqual(sources);\n  });\n\n  it('does not preload when condition is false', () => {\n    renderHook(() => useImagePreload(['/image3.jpg'], false));\n    expect(created).toHaveLength(0);\n  });\n\n  it('cleans up preloaded images on unmount', () => {\n    const { unmount } = renderHook(() => useImagePreload(['/cleanup.jpg'], true));\n    expect(created[0].src).toBe('/cleanup.jpg');\n    unmount();\n    expect(created[0].src).toBe('');\n  });\n\n  it('handles empty sources array', () => {\n    renderHook(() => useImagePreload([], true));\n    expect(created).toHaveLength(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ResponsiveImage.resizing.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":71,"fix":{"range":[166,201],"text":"@/app/shared/components/responsive-image/ResponsiveImage"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { render, screen } from '@testing-library/react';\nimport React from 'react';\n\nimport { setResponsive } from './test-helpers';\nimport { ResponsiveImage } from '../responsive-image/ResponsiveImage';\n\ndescribe('ResponsiveImage - resizing', () => {\n  const responsiveSrc = {\n    mobile: '/mobile.jpg',\n    tablet: '/tablet.jpg',\n    desktop: '/desktop.jpg',\n    fallback: '/fallback.jpg',\n  };\n\n  afterEach(() => {\n    setResponsive('desktop');\n  });\n\n  it('renders desktop source by default', () => {\n    render(<ResponsiveImage src={responsiveSrc} alt=\"test\" width={800} height={600} />);\n    expect(screen.getByRole('img')).toHaveAttribute('src', expect.stringContaining('desktop.jpg'));\n  });\n\n  it('renders mobile source on mobile breakpoint', () => {\n    setResponsive('mobile', 'compact');\n    render(<ResponsiveImage src={responsiveSrc} alt=\"mobile\" width={800} height={600} />);\n    expect(screen.getByRole('img')).toHaveAttribute('src', expect.stringContaining('mobile.jpg'));\n  });\n\n  it('falls back when source missing for breakpoint', () => {\n    setResponsive('mobile', 'compact');\n    const sources = {\n      tablet: '/tablet.jpg',\n      desktop: '/desktop.jpg',\n      fallback: '/fallback.jpg',\n    };\n    render(<ResponsiveImage src={sources} alt=\"fallback\" width={800} height={600} />);\n    expect(screen.getByRole('img')).toHaveAttribute('src', expect.stringContaining('fallback.jpg'));\n  });\n\n  it('updates source when breakpoint changes', () => {\n    const { rerender } = render(\n      <ResponsiveImage src={responsiveSrc} alt=\"update\" width={800} height={600} />\n    );\n    expect(screen.getByRole('img')).toHaveAttribute('src', expect.stringContaining('desktop.jpg'));\n\n    setResponsive('tablet');\n    rerender(<ResponsiveImage src={responsiveSrc} alt=\"update\" width={800} height={600} />);\n    expect(screen.getByRole('img')).toHaveAttribute('src', expect.stringContaining('tablet.jpg'));\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/LayoutBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/LayoutContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/useLayoutStyles.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (52). Maximum allowed is 50.","line":12,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":72,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":17,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":33,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":65,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":65,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\nimport type { ResponsiveVariant } from '@/lib/responsive';\n\ninterface UseLayoutStylesOptions {\n  variant: ResponsiveVariant;\n  showNavigation: boolean;\n  sidebarOpen: boolean;\n  hasSidebar: boolean;\n}\n\nexport const useLayoutStyles = ({\n  variant,\n  showNavigation,\n  sidebarOpen,\n  hasSidebar,\n}: UseLayoutStylesOptions) => {\n  const getContentPadding = () => {\n    if (!showNavigation) return '';\n\n    switch (variant) {\n      case 'compact':\n        return 'bottom-nav-space';\n      case 'default':\n        return 'bottom-nav-space';\n      case 'expanded':\n        return '';\n      default:\n        return 'bottom-nav-space';\n    }\n  };\n\n  const getSidebarClasses = () => {\n    if (!hasSidebar) return '';\n\n    const baseClasses = 'bg-surface border-border shadow-modal transition-transform duration-300';\n\n    switch (variant) {\n      case 'compact':\n        return cn(\n          baseClasses,\n          'fixed bottom-0 left-0 right-0 max-h-[70dvh] rounded-t-2xl border-t',\n          sidebarOpen ? 'translate-y-0' : 'translate-y-full'\n        );\n\n      case 'default':\n        return cn(\n          baseClasses,\n          'fixed top-16 right-0 bottom-0 w-80 border-l rounded-tl-2xl',\n          sidebarOpen ? 'translate-x-0' : 'translate-x-full'\n        );\n\n      case 'expanded':\n        return cn(\n          baseClasses,\n          'static w-80 h-full border rounded-xl',\n          sidebarOpen ? 'block' : 'hidden'\n        );\n\n      default:\n        return baseClasses;\n    }\n  };\n\n  const getContainerClasses = () => cn('flex', variant === 'expanded' ? 'flex-row' : 'flex-col');\n\n  return {\n    getContentPadding,\n    getSidebarClasses,\n    getContainerClasses,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-navigation/NavigationItem.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { memo } from 'react';\n\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport type { NavItem } from './types';\n\ninterface NavigationItemProps {\n  item: NavItem;\n  isActive: boolean;\n  onItemClick: (item: NavItem, e: React.MouseEvent) => void;\n}\n\nexport const NavigationItem = memo(function NavigationItem({\n  item,\n  isActive,\n  onItemClick,\n}: NavigationItemProps): React.JSX.Element {\n  const Icon = item.icon;\n  const handleClick = (e: React.MouseEvent) => onItemClick(item, e);\n  const baseClass = cn(\n    'relative flex flex-col items-center justify-center',\n    'min-w-[48px] py-1.5 px-2 rounded-xl',\n    'transition-all duration-200',\n    touchClasses.target,\n    touchClasses.gesture,\n    touchClasses.focus,\n    touchClasses.active,\n    'hover:bg-muted/60'\n  );\n  const iconClass = cn(\n    'transition-all duration-200',\n    isActive ? 'text-foreground stroke-[2.5]' : 'text-muted stroke-[2]'\n  );\n  const labelClass = cn(\n    'text-xs font-medium transition-all duration-200',\n    isActive ? 'text-foreground' : 'text-muted'\n  );\n  const content = (\n    <>\n      <div className=\"relative z-10 mb-0.5\">\n        <Icon size={20} className={iconClass} />\n      </div>\n      <span className={labelClass}>{item.label}</span>\n    </>\n  );\n  return item.href ? (\n    <Link key={item.id} href={item.href} onClick={handleClick} className={baseClass}>\n      {content}\n    </Link>\n  ) : (\n    <button key={item.id} type=\"button\" onClick={handleClick} className={baseClass}>\n      {content}\n    </button>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-navigation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/DefaultErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":46,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":50,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { ErrorHandler } from '@/src/infrastructure/errors';\n\nimport { DefaultErrorFallback } from './DefaultErrorFallback';\n\nexport interface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport interface ErrorFallbackProps {\n  error?: Error;\n  resetError: () => void;\n}\n\nexport interface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<ErrorFallbackProps>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass ErrorBoundaryClass extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ hasError: true, error, errorInfo });\n    this.props.onError?.(error, errorInfo);\n\n    ErrorHandler.handle(error, {\n      context: { errorInfo },\n      showUserNotification: false,\n    });\n  }\n\n  resetError = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback || DefaultErrorFallback;\n      return <FallbackComponent error={this.state.error} resetError={this.resetError} />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport function ErrorBoundary(props: ErrorBoundaryProps): React.JSX.Element {\n  return <ErrorBoundaryClass {...props} />;\n}\nexport { DefaultErrorFallback } from './DefaultErrorFallback';\nexport { useErrorHandler } from './useErrorHandler';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/withErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderActions.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { IconSun, IconMoon, IconSettings } from '@tabler/icons-react';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { useUIState } from '@/app/providers/UIStateContext';\n\nexport function HeaderActions(): JSX.Element {\n  const { theme, setTheme } = useTheme();\n  const { setSettingsOpen } = useUIState();\n\n  const toggleTheme = () => {\n    const html = document.documentElement;\n    if (html.classList.contains('dark')) {\n      html.classList.remove('dark');\n      setTheme('light');\n    } else {\n      html.classList.add('dark');\n      setTheme('dark');\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-end space-x-1 sm:space-x-1.5 w-1/3 mr-1\">\n      {/* Settings button - only show on mobile/tablet when settings sidebar is hidden */}\n      <button\n        onClick={() => setSettingsOpen(true)}\n        className=\"btn-touch p-2.5 rounded-xl hover:bg-muted/60 transition-all duration-200 active:scale-95 lg:hidden\"\n        aria-label=\"Open settings\"\n      >\n        <IconSettings size={18} className=\"text-muted\" />\n      </button>\n\n      {/* Theme toggle */}\n      <button\n        onClick={toggleTheme}\n        className=\"btn-touch p-2.5 rounded-xl hover:bg-muted/60 transition-all duration-200 active:scale-95\"\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'dark' ? (\n          <IconSun size={18} className=\"text-accent\" />\n        ) : (\n          <IconMoon size={18} className=\"text-accent\" />\n        )}\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderBrand.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":25,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":25,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { IconMenu2 } from '@tabler/icons-react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nimport { useSidebar } from '@/app/providers/SidebarContext';\n\nexport function HeaderBrand(): JSX.Element {\n  const { setSurahListOpen, setBookmarkSidebarOpen } = useSidebar();\n  const pathname = usePathname();\n\n  const isNavPath = (path?: string | null) =>\n    Boolean(\n      path &&\n        (path.startsWith('/surah') ||\n          path.startsWith('/tafsir') ||\n          path.startsWith('/juz') ||\n          path.startsWith('/page'))\n    );\n  const isBookmarkPath = (path?: string | null) => Boolean(path && path.startsWith('/bookmarks'));\n\n  const shouldShowMenu = isNavPath(pathname) || isBookmarkPath(pathname);\n\n  const handleMobileNavClick = () => {\n    if (isBookmarkPath(pathname)) {\n      setBookmarkSidebarOpen(true);\n      return;\n    }\n    if (isNavPath(pathname)) {\n      setSurahListOpen(true);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-start w-1/3\">\n      {/* Mobile Navigation Menu Button */}\n      {shouldShowMenu && (\n        <button\n          onClick={handleMobileNavClick}\n          className=\"btn-touch p-2.5 rounded-xl hover:bg-muted/60 transition-all duration-200 active:scale-95 mr-2 lg:hidden\"\n          aria-label=\"Open navigation\"\n        >\n          <IconMenu2 size={18} className=\"text-muted\" />\n        </button>\n      )}\n\n      <Link\n        href=\"/\"\n        className=\"flex items-center space-x-2 hover:opacity-80 transition-opacity ml-2\"\n      >\n        <div className=\"h-8 w-8 rounded-xl bg-gradient-emerald flex items-center justify-center shadow-sm\">\n          <svg className=\"h-5 w-5 text-on-accent\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M18.5 2h-13C4.7 2 4 2.7 4 3.5v17l8-4 8 4v-17C20 2.7 19.3 2 18.5 2z\" />\n          </svg>\n        </div>\n        <span className=\"hidden sm:block font-semibold text-lg text-foreground\">Quran Mazid</span>\n      </Link>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderSearch.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":46,"fix":{"range":[124,138],"text":"@/app/shared/components/SearchInput"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\nimport { SearchInput } from '../SearchInput';\n\nexport function HeaderSearch(): JSX.Element {\n  const router = useRouter();\n  const [query, setQuery] = useState('');\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && query.trim()) {\n      router.push(`/search?query=${encodeURIComponent(query.trim())}`);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center w-1/3\">\n      <div className=\"w-full max-w-xs sm:max-w-sm lg:max-w-md\">\n        <SearchInput\n          value={query}\n          onChange={setQuery}\n          placeholder=\"Search verses, surahs...\"\n          onKeyDown={handleKeyDown}\n          variant=\"header\"\n          size=\"sm\"\n          className=\"w-full\"\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/useModalKeyboard.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\n\ninterface UseModalKeyboardOptions {\n  isOpen: boolean;\n  onCancel: () => void;\n}\n\nexport const useModalKeyboard = ({ isOpen, onCancel }: UseModalKeyboardOptions) => {\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      cancelRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onCancel();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onCancel]);\n\n  return { cancelRef };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/ResponsiveBackgroundImage.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":34,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":50,"endColumn":4},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { useResponsiveState } from '@/lib/responsive';\n\ninterface ResponsiveImageSources {\n  mobile?: string;\n  tablet?: string;\n  desktop?: string;\n  fallback: string;\n}\n\ninterface ResponsiveBackgroundImageProps {\n  src: string | ResponsiveImageSources;\n  children: React.ReactNode;\n  className?: string;\n  overlay?: boolean;\n  overlayOpacity?: number;\n}\n\n/**\n * Utility component for background images with responsive behavior\n */\nexport const ResponsiveBackgroundImage = ({\n  src,\n  children,\n  className = '',\n  overlay = false,\n  overlayOpacity = 0.5,\n}: ResponsiveBackgroundImageProps): React.JSX.Element => {\n  const { breakpoint } = useResponsiveState();\n\n  const pickBackgroundSource = (\n    s: string | ResponsiveImageSources,\n    bp: ReturnType<typeof useResponsiveState>['breakpoint']\n  ) => {\n    if (typeof s === 'string') return s;\n    switch (bp) {\n      case 'mobile':\n        return s.mobile || s.fallback;\n      case 'tablet':\n        return s.tablet || s.mobile || s.fallback;\n      case 'desktop':\n      case 'wide':\n        return s.desktop || s.tablet || s.fallback;\n      default:\n        return s.fallback;\n    }\n  };\n\n  const backgroundImage = pickBackgroundSource(src, breakpoint);\n\n  return (\n    <div\n      className={`relative bg-cover bg-center bg-no-repeat ${className}`}\n      style={{ backgroundImage: `url(${backgroundImage})` }}\n    >\n      {overlay && (\n        <div className=\"absolute inset-0 bg-surface-overlay\" style={{ opacity: overlayOpacity }} />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/ResponsiveImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/imageUtils.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":3,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":20,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":5},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ResponsiveImageSources, ResponsiveImageSizes } from './types';\n\nexport const pickImageSource = (\n  src: string | ResponsiveImageSources,\n  breakpoint: 'mobile' | 'tablet' | 'desktop' | 'wide'\n) => {\n  if (typeof src === 'string') return src;\n\n  switch (breakpoint) {\n    case 'mobile':\n      return src.mobile || src.fallback;\n    case 'tablet':\n      return src.tablet || src.mobile || src.fallback;\n    case 'desktop':\n    case 'wide':\n      return src.desktop || src.tablet || src.fallback;\n    default:\n      return src.fallback;\n  }\n};\n\nexport const buildSizes = (sizes?: ResponsiveImageSizes | string): string => {\n  if (!sizes) return '(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw';\n  if (typeof sizes === 'string') return sizes;\n\n  const sizeQueries: string[] = [];\n  if (sizes.mobile) sizeQueries.push(`(max-width: 767px) ${sizes.mobile}`);\n  if (sizes.tablet) sizeQueries.push(`(max-width: 1023px) ${sizes.tablet}`);\n  if (sizes.desktop) sizeQueries.push(`(min-width: 1024px) ${sizes.desktop}`);\n  sizeQueries.push(sizes.default);\n\n  return sizeQueries.join(', ');\n};\n\nexport const buildFallbackSvg = () =>\n  'data:image/svg+xml,' +\n  encodeURIComponent(\n    `<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n` +\n      `  <rect width=\"100%\" height=\"100%\" fill=\"rgb(var(--color-surface))\"/>\\n` +\n      `  <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\".3em\" fill=\"rgb(var(--color-muted))\" font-family=\"system-ui\" font-size=\"14\">\\n` +\n      `    Image\\n` +\n      `  </text>\\n` +\n      `</svg>`\n  );\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/useResponsiveImage.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":84},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useResponsiveState } from '@/lib/responsive';\n\nimport { buildFallbackSvg, buildSizes, pickImageSource } from './imageUtils';\n\nimport type { ResponsiveImageProps } from './types';\n\nexport const useResponsiveImage = ({\n  src,\n  sizes,\n  fallback,\n  loadingStrategy = 'auto',\n}: Pick<ResponsiveImageProps, 'src' | 'sizes' | 'fallback' | 'loadingStrategy'>) => {\n  const { variant, breakpoint } = useResponsiveState();\n\n  const resolveLoading = (\n    strategy: ResponsiveImageProps['loadingStrategy'],\n    v: ReturnType<typeof useResponsiveState>['variant']\n  ) => {\n    if (strategy === 'auto') return v === 'compact' ? 'eager' : 'lazy';\n    return strategy;\n  };\n\n  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    if (fallback) {\n      e.currentTarget.src = fallback;\n    } else {\n      e.currentTarget.src = buildFallbackSvg();\n    }\n  };\n\n  const optimalSource = pickImageSource(src, breakpoint);\n  const responsiveSizes = buildSizes(sizes);\n  const loading = resolveLoading(loadingStrategy, variant);\n\n  return {\n    optimalSource,\n    responsiveSizes,\n    loading,\n    priority: loading === 'eager',\n    onError: handleImageError,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/sidebar/SidebarOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/sidebar/useSidebarPositioning.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\ninterface SidebarPositioningOptions {\n  position: 'left' | 'right';\n  isOpen: boolean;\n  isHeaderHidden: boolean;\n}\n\nexport const useSidebarPositioning = ({\n  position,\n  isOpen,\n  isHeaderHidden,\n}: SidebarPositioningOptions) => {\n  const getPositionClasses = () => {\n    const baseClasses =\n      'fixed w-full sm:w-80 lg:w-[20.7rem] bg-background transition-all duration-300 ease-in-out';\n\n    if (position === 'left') {\n      return cn(\n        baseClasses,\n        'left-0 lg:left-16',\n        'shadow-modal',\n        isHeaderHidden ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]',\n        'z-50 lg:z-10',\n        isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'\n      );\n    } else {\n      return cn(\n        baseClasses,\n        'right-0',\n        'shadow-modal',\n        isHeaderHidden ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]',\n        'z-30',\n        isOpen ? 'translate-x-0' : 'translate-x-full lg:translate-x-0'\n      );\n    }\n  };\n\n  return { getPositionClasses };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/TabContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[49,72],"text":"@/app/shared/surah-sidebar/Juz"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":49,"fix":{"range":[97,121],"text":"@/app/shared/surah-sidebar/Page"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":51,"fix":{"range":[147,172],"text":"@/app/shared/surah-sidebar/Surah"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (53). Maximum allowed is 50.","line":31,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":85,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import React from 'react';\n\nimport { Juz } from '../../surah-sidebar/Juz';\nimport { Page } from '../../surah-sidebar/Page';\nimport { Surah } from '../../surah-sidebar/Surah';\n\nimport type { Chapter } from '@/types';\n\ninterface JuzSummary {\n  number: number;\n  name: string;\n  surahRange: string;\n}\n\ninterface TabContentProps {\n  activeTab: 'Surah' | 'Juz' | 'Page';\n  filteredChapters: Chapter[];\n  filteredJuzs: JuzSummary[];\n  filteredPages: number[];\n  chapters: Chapter[];\n  selectedSurahId: number | undefined;\n  setSelectedSurahId: (id: number | undefined) => void;\n  selectedJuzId: number | undefined;\n  setSelectedJuzId: (id: number | undefined) => void;\n  selectedPageId: number | undefined;\n  setSelectedPageId: (id: number | undefined) => void;\n  rememberScroll: (tab: string) => void;\n  isTafsirPath: boolean;\n}\n\nexport const TabContent = ({\n  activeTab,\n  filteredChapters,\n  filteredJuzs,\n  filteredPages,\n  chapters,\n  selectedSurahId,\n  setSelectedSurahId,\n  selectedJuzId,\n  setSelectedJuzId,\n  selectedPageId,\n  setSelectedPageId,\n  rememberScroll,\n  isTafsirPath,\n}: TabContentProps): React.JSX.Element => {\n  if (activeTab === 'Surah') {\n    return (\n      <Surah\n        chapters={filteredChapters}\n        selectedSurahId={selectedSurahId}\n        setSelectedSurahId={setSelectedSurahId}\n        setSelectedPageId={setSelectedPageId}\n        setSelectedJuzId={setSelectedJuzId}\n        rememberScroll={() => rememberScroll('Surah')}\n        isTafsirPath={isTafsirPath}\n      />\n    );\n  }\n\n  if (activeTab === 'Juz') {\n    return (\n      <Juz\n        juzs={filteredJuzs}\n        chapters={chapters}\n        selectedJuzId={selectedJuzId}\n        setSelectedJuzId={setSelectedJuzId}\n        setSelectedPageId={setSelectedPageId}\n        setSelectedSurahId={setSelectedSurahId}\n        rememberScroll={() => rememberScroll('Juz')}\n      />\n    );\n  }\n\n  return (\n    <Page\n      pages={filteredPages}\n      chapters={chapters}\n      selectedPageId={selectedPageId}\n      setSelectedPageId={setSelectedPageId}\n      setSelectedJuzId={setSelectedJuzId}\n      setSelectedSurahId={setSelectedSurahId}\n      rememberScroll={() => rememberScroll('Page')}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabConfig.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const useSurahTabConfig = () => {\n  const { t } = useTranslation();\n\n  const tabs = useMemo(\n    () => [\n      { key: 'Surah', label: t('surah_tab') },\n      { key: 'Juz', label: t('juz_tab') },\n      { key: 'Page', label: t('page_tab') },\n    ],\n    [t]\n  );\n\n  return { tabs };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabParams.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useParams, usePathname } from 'next/navigation';\n\nconst toNumberParam = (param: string | string[] | undefined): number | undefined => {\n  if (!param) return undefined;\n  const value = Array.isArray(param) ? param[0] : param;\n  const num = Number(value);\n  return Number.isNaN(num) ? undefined : num;\n};\n\nexport const useSurahTabParams = () => {\n  const { surahId, juzId, pageId } = useParams();\n  const pathname = usePathname();\n\n  const currentSurahId = toNumberParam(surahId);\n  const currentJuzId = toNumberParam(juzId);\n  const currentPageId = toNumberParam(pageId);\n  const isTafsirPath = pathname?.includes('/tafsir');\n\n  const getInitialTab = (): 'Surah' | 'Juz' | 'Page' => {\n    if (currentJuzId) return 'Juz';\n    if (currentPageId) return 'Page';\n    return 'Surah';\n  };\n\n  return {\n    currentSurahId,\n    currentJuzId,\n    currentPageId,\n    isTafsirPath,\n    getInitialTab,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/shadows.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/image/generateResponsiveUrls.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface ResponsiveImageSources {\n  mobile?: string;\n  tablet?: string;\n  desktop?: string;\n  fallback: string;\n}\n\ninterface GenerateOptions {\n  widths: number[];\n  format?: string;\n  quality?: number;\n}\n\n/**\n * Utility for generating responsive image URLs (e.g., for different CDN sizes)\n */\nexport const generateResponsiveUrls = (\n  baseUrl: string,\n  options: GenerateOptions\n): ResponsiveImageSources => {\n  const { widths, format = 'webp', quality = 80 } = options;\n\n  // This is a generic implementation - adjust based on your CDN/image service\n  const generateUrl = (width: number) => {\n    return `${baseUrl}?w=${width}&f=${format}&q=${quality}`;\n  };\n\n  return {\n    mobile: generateUrl(widths[0] || 640),\n    tablet: generateUrl(widths[1] || 1024),\n    desktop: generateUrl(widths[2] || 1920),\n    fallback: baseUrl,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/image/useImagePreload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/selectionOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/useSelectionState.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\nexport const useSelectionState = <T>(\n  defaultSelected: T[],\n  onSelectionChange?: (selected: T[]) => void\n) => {\n  const [selected, setSelectedState] = useState<T[]>(defaultSelected);\n\n  const setSelected = useCallback(\n    (updater: T[] | ((current: T[]) => T[])) => {\n      if (typeof updater === 'function') {\n        setSelectedState((current) => {\n          const newItems = updater(current);\n          onSelectionChange?.(newItems);\n          return newItems;\n        });\n      } else {\n        setSelectedState(updater);\n        onSelectionChange?.(updater);\n      }\n    },\n    [onSelectionChange]\n  );\n\n  return { selected, setSelected };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/gestureCalculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/swipeDecision.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":4,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":26,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { SwipeMetrics } from './gestureCalculations';\nimport type { SwipeHandlers } from './types';\n\nexport const handleSwipeDecision = (\n  metrics: SwipeMetrics,\n  handlers: SwipeHandlers,\n  threshold: number,\n  velocity: number\n) => {\n  const { deltaX, deltaY, velocityX, velocityY } = metrics;\n  const absX = Math.abs(deltaX);\n  const absY = Math.abs(deltaY);\n  const isHorizontalSwipe = absX > absY && absX > threshold;\n  const isVerticalSwipe = absY > absX && absY > threshold;\n\n  if (isHorizontalSwipe && velocityX > velocity) {\n    if (deltaX > 0) handlers.onSwipeRight?.();\n    else handlers.onSwipeLeft?.();\n    return;\n  }\n\n  if (isVerticalSwipe && velocityY > velocity) {\n    if (deltaY > 0) handlers.onSwipeDown?.();\n    else handlers.onSwipeUp?.();\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useCoverAndTrack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useFilteredList.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":67,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\n\ninterface UseFilteredListOptions<T> {\n  searchFields?: (keyof T)[];\n  initialSearchTerm?: string;\n  caseSensitive?: boolean;\n}\n\ninterface UseFilteredListReturn<T> {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  filteredItems: T[];\n  clearSearch: () => void;\n  hasActiveFilter: boolean;\n}\n\n/**\n * Custom hook for managing filtered lists with search functionality\n * Provides consistent filtering behavior across components\n */\nexport function useFilteredList<T>(\n  items: T[],\n  options: UseFilteredListOptions<T> = {}\n): UseFilteredListReturn<T> {\n  const { searchFields = [], initialSearchTerm = '', caseSensitive = false } = options;\n\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\n\n  const filteredItems = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return items;\n    }\n\n    const searchValue = caseSensitive ? searchTerm.trim() : searchTerm.toLowerCase().trim();\n\n    return items.filter((item) => {\n      // If no search fields specified, try to search in common text fields\n      if (searchFields.length === 0) {\n        const itemValues = Object.values(item as Record<string, unknown>)\n          .filter((value) => typeof value === 'string')\n          .join(' ');\n\n        const searchTarget = caseSensitive ? itemValues : itemValues.toLowerCase();\n        return searchTarget.includes(searchValue);\n      }\n\n      // Search in specified fields\n      return searchFields.some((field) => {\n        const fieldValue = item[field];\n\n        if (typeof fieldValue === 'string') {\n          const searchTarget = caseSensitive ? fieldValue : fieldValue.toLowerCase();\n          return searchTarget.includes(searchValue);\n        }\n\n        if (typeof fieldValue === 'number') {\n          return fieldValue.toString().includes(searchValue);\n        }\n\n        return false;\n      });\n    });\n  }, [items, searchTerm, searchFields, caseSensitive]);\n\n  const clearSearch = () => setSearchTerm('');\n  const hasActiveFilter = searchTerm.trim() !== '';\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    filteredItems,\n    clearSearch,\n    hasActiveFilter,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useModal.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\n\ninterface UseModalOptions {\n  defaultOpen?: boolean;\n  onOpenChange?: (isOpen: boolean) => void;\n  closeOnEscape?: boolean;\n}\n\ninterface UseModalReturn {\n  isOpen: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n  setIsOpen: (isOpen: boolean) => void;\n}\n\n/**\n * Custom hook for managing modal/panel state\n * Provides consistent modal behavior across components\n */\nexport function useModal(options: UseModalOptions = {}): UseModalReturn {\n  const { defaultOpen = false, onOpenChange, closeOnEscape = true } = options;\n\n  const [isOpen, setIsOpenState] = useState(defaultOpen);\n\n  const setIsOpen = useCallback(\n    (newIsOpen: boolean) => {\n      setIsOpenState(newIsOpen);\n      onOpenChange?.(newIsOpen);\n    },\n    [onOpenChange]\n  );\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const toggle = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n\n  // Handle escape key\n  useEffect(() => {\n    if (!closeOnEscape || !isOpen) return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        close();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, close, closeOnEscape]);\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    setIsOpen,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useMultiSelection.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useMultiSelection' has too many lines (52). Maximum allowed is 50.","line":14,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":74,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback } from 'react';\n\nimport { selectionOperations } from './multiSelection/selectionOperations';\nimport { useSelectionState } from './multiSelection/useSelectionState';\n\nimport type { UseMultiSelectionOptions, UseMultiSelectionReturn } from './multiSelection/types';\n\n/**\n * Custom hook for managing multi-selection state\n * Provides consistent multi-selection behavior across components\n */\nexport function useMultiSelection<T>(\n  options: UseMultiSelectionOptions<T> = {}\n): UseMultiSelectionReturn<T> {\n  const { defaultSelected = [], maxSelection, onSelectionChange } = options;\n\n  const { selected, setSelected } = useSelectionState(defaultSelected, onSelectionChange);\n\n  const select = useCallback(\n    (item: T) => {\n      setSelected((current: T[]) => selectionOperations.addItem(current, item, maxSelection));\n    },\n    [setSelected, maxSelection]\n  );\n\n  const deselect = useCallback(\n    (item: T) => {\n      setSelected((current: T[]) => selectionOperations.removeItem(current, item));\n    },\n    [setSelected]\n  );\n\n  const toggle = useCallback(\n    (item: T) => {\n      setSelected((current: T[]) => selectionOperations.toggleItem(current, item, maxSelection));\n    },\n    [setSelected, maxSelection]\n  );\n\n  const clear = useCallback(() => {\n    setSelected([]);\n  }, [setSelected]);\n\n  const selectAll = useCallback(\n    (items: T[]) => {\n      const itemsToSelect = selectionOperations.selectFromList(items, maxSelection);\n      setSelected(itemsToSelect);\n    },\n    [setSelected, maxSelection]\n  );\n\n  const isSelected = useCallback(\n    (item: T) => selectionOperations.isItemSelected(selected, item),\n    [selected]\n  );\n\n  const hasSelection = selected.length > 0;\n  const selectionCount = selected.length;\n\n  return {\n    selected,\n    select,\n    deselect,\n    toggle,\n    clear,\n    selectAll,\n    isSelected,\n    setSelected,\n    hasSelection,\n    selectionCount,\n  };\n}\n\n// Re-export types for convenience\nexport type { UseMultiSelectionOptions, UseMultiSelectionReturn } from './multiSelection/types';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useReaderClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSelectedNames.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSingleSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSurahListFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSwipeGestures.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRef, useCallback } from 'react';\n\nimport { computeMetrics, shouldPreventDefault } from './swipeGestures/gestureCalculations';\nimport { handleSwipeDecision } from './swipeGestures/swipeDecision';\n\nimport type { TouchPoint } from './swipeGestures/gestureCalculations';\nimport type { SwipeGesturesOptions } from './swipeGestures/types';\n\nexport const useSwipeGestures = (options: SwipeGesturesOptions) => {\n  const {\n    onSwipeLeft,\n    onSwipeRight,\n    onSwipeUp,\n    onSwipeDown,\n    threshold = 50,\n    velocity = 0.3,\n  } = options;\n\n  const touchStart = useRef<TouchPoint | null>(null);\n\n  const handleTouchStart = useCallback((event: React.TouchEvent) => {\n    const touch = event.touches[0];\n    touchStart.current = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n    };\n  }, []);\n\n  const handleTouchEnd = useCallback(\n    (event: React.TouchEvent) => {\n      if (!touchStart.current) return;\n\n      const touch = event.changedTouches[0];\n      const touchEnd: TouchPoint = { x: touch.clientX, y: touch.clientY, time: Date.now() };\n      const metrics = computeMetrics(touchEnd, touchStart.current);\n      handleSwipeDecision(\n        metrics,\n        { onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown },\n        threshold,\n        velocity\n      );\n      touchStart.current = null;\n    },\n    [onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown, threshold, velocity]\n  );\n\n  const handleTouchMove = useCallback((event: React.TouchEvent) => {\n    if (touchStart.current) {\n      const touch = event.touches[0];\n      const currentTouch: TouchPoint = { x: touch.clientX, y: touch.clientY, time: Date.now() };\n\n      if (shouldPreventDefault(currentTouch, touchStart.current)) {\n        event.preventDefault();\n      }\n    }\n  }, []);\n\n  return {\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    onTouchMove: handleTouchMove,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/AlertIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ArrowLeftIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BarsIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookReaderIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookmarkIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookmarkOutlineIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BrainIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/CheckIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronDownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronLeftIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronRightIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ClockIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/CloseIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/EllipsisHIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/FolderIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/FontSettingIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/GridIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/GripVerticalIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/HomeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/IconProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/MicIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/MoonIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PauseIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PinIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PlayIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PlusIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/RepeatIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ResetIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SearchIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ShareIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SkipBackIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SkipForwardIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SlidersIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SunIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/TranslationIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/VolumeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/VolumeOffIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/ModernLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuickSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuickSearchModal.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'QuickSearchModal' has too many lines (59). Maximum allowed is 50.","line":15,"column":38,"nodeType":"FunctionExpression","messageId":"exceed","endLine":75,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { IconSearch, IconX } from '@tabler/icons-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useRef, useEffect, memo } from 'react';\n\ninterface QuickSearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  query: string;\n  setQuery: (value: string) => void;\n  handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  children: React.ReactNode;\n}\n\nexport const QuickSearchModal = memo(function QuickSearchModal({\n  isOpen,\n  onClose,\n  query,\n  setQuery,\n  handleKeyDown,\n  children,\n}: QuickSearchModalProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => inputRef.current?.focus(), 100);\n    }\n  }, [isOpen]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-50\"\n          />\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: -20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: -20 }}\n            transition={{ duration: 0.2 }}\n            className=\"fixed top-20 left-4 right-4 mx-auto max-w-2xl z-50\"\n          >\n            <div className=\"bg-background/95 backdrop-blur-xl border border-border/50 rounded-2xl shadow-2xl overflow-hidden\">\n              <div className=\"flex items-center p-4 border-b border-border/30\">\n                <IconSearch size={20} className=\"text-muted mr-3 flex-shrink-0\" />\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder=\"Search verses, surahs, topics...\"\n                  className=\"flex-1 bg-surface/0 outline-none text-foreground placeholder:text-muted text-lg\"\n                />\n                <button\n                  onClick={onClose}\n                  className=\"p-2 hover:bg-muted/50 rounded-lg transition-colors ml-2\"\n                >\n                  <IconX size={20} className=\"text-muted\" />\n                </button>\n              </div>\n              <div className=\"max-h-96 overflow-y-auto\">{children}</div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuranBottomSheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SearchSuggestions.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SearchSuggestions' has too many lines (58). Maximum allowed is 50.","line":12,"column":39,"nodeType":"FunctionExpression","messageId":"exceed","endLine":70,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { IconClock, IconTrendingUp } from '@tabler/icons-react';\nimport { memo } from 'react';\n\ninterface SearchSuggestionsProps {\n  query: string;\n  recentSearches: string[];\n  trendingSearches: string[];\n  onSearch: (query: string) => void;\n}\n\nexport const SearchSuggestions = memo(function SearchSuggestions({\n  query,\n  recentSearches,\n  trendingSearches,\n  onSearch,\n}: SearchSuggestionsProps) {\n  if (query.length === 0) {\n    return (\n      <div className=\"p-4 space-y-6\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-3\">\n            <IconClock size={16} className=\"text-muted\" />\n            <h3 className=\"text-sm font-medium text-muted uppercase tracking-wide\">Recent</h3>\n          </div>\n          <div className=\"space-y-1\">\n            {recentSearches.map((search, index) => (\n              <button\n                key={index}\n                onClick={() => onSearch(search)}\n                className=\"w-full text-left p-3 hover:bg-muted/50 rounded-xl transition-colors group\"\n              >\n                <span className=\"text-foreground group-hover:text-primary transition-colors\">\n                  {search}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"flex items-center gap-2 mb-3\">\n            <IconTrendingUp size={16} className=\"text-muted\" />\n            <h3 className=\"text-sm font-medium text-muted uppercase tracking-wide\">Trending</h3>\n          </div>\n          <div className=\"space-y-1\">\n            {trendingSearches.map((search, index) => (\n              <button\n                key={index}\n                onClick={() => onSearch(search)}\n                className=\"w-full text-left p-3 hover:bg-muted/50 rounded-xl transition-colors group\"\n              >\n                <span className=\"text-foreground group-hover:text-primary transition-colors\">\n                  {search}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"text-center text-muted py-8\">\n        Press Enter to search for &quot;{query}&quot;\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SwipeContainer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":26,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter, usePathname } from 'next/navigation';\nimport React from 'react';\n\nimport { useSwipeGestures } from '@/app/shared/hooks/useSwipeGestures';\nimport { cn } from '@/lib/utils/cn';\n\ninterface SwipeContainerProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\n// Navigation routes in order for swipe navigation\nconst MAIN_ROUTES = ['/home', '/surah', '/bookmarks'];\n\nexport const SwipeContainer = ({ children, className }: SwipeContainerProps): React.JSX.Element => {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  // Find current route index\n  const currentRouteIndex = MAIN_ROUTES.findIndex(\n    (route) => pathname.startsWith(route) || (route === '/home' && pathname === '/')\n  );\n\n  const navigateToRoute = (direction: 'left' | 'right') => {\n    if (currentRouteIndex === -1) return;\n\n    let newIndex;\n    if (direction === 'left') {\n      // Swipe left = next route\n      newIndex = (currentRouteIndex + 1) % MAIN_ROUTES.length;\n    } else {\n      // Swipe right = previous route\n      newIndex = (currentRouteIndex - 1 + MAIN_ROUTES.length) % MAIN_ROUTES.length;\n    }\n\n    const newRoute = MAIN_ROUTES[newIndex];\n    router.push(newRoute);\n  };\n\n  const swipeGestures = useSwipeGestures({\n    onSwipeLeft: () => navigateToRoute('left'),\n    onSwipeRight: () => navigateToRoute('right'),\n    threshold: 75,\n    velocity: 0.4,\n  });\n\n  return (\n    <div {...swipeGestures} className={cn('touch-pan-y select-none touch-callout-none', className)}>\n      {children}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SwipeIndicator.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":15,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { IconChevronLeft, IconChevronRight, IconArrowDown } from '@tabler/icons-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useState, useEffect } from 'react';\n\nimport { useBreakpoint } from '@/lib/responsive';\n\ninterface SwipeIndicatorProps {\n  show?: boolean;\n  autoHide?: boolean;\n  autoHideDelay?: number;\n}\n\nexport const SwipeIndicator = ({\n  show = true,\n  autoHide = true,\n  autoHideDelay = 5000,\n}: SwipeIndicatorProps): React.JSX.Element => {\n  const [isVisible, setIsVisible] = useState(show);\n\n  useEffect(() => {\n    if (autoHide && show) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n      }, autoHideDelay);\n\n      return () => clearTimeout(timer);\n    }\n  }, [autoHide, autoHideDelay, show]);\n\n  const breakpoint = useBreakpoint();\n  const isMobile = breakpoint === 'mobile' || breakpoint === 'tablet';\n\n  if (!isMobile) return null;\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 20 }}\n          transition={{ duration: 0.3 }}\n          className=\"fixed left-4 right-4 z-30 bottom-nav-offset\"\n          onClick={() => setIsVisible(false)}\n        >\n          <div className=\"bg-surface-overlay/70 backdrop-blur-sm text-foreground rounded-2xl p-4 mx-auto max-w-sm\">\n            <div className=\"text-center mb-3\">\n              <p className=\"text-sm font-medium\">Navigation Gestures</p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 text-xs\">\n              {/* Horizontal swipes */}\n              <div className=\"flex items-center gap-2\">\n                <IconChevronLeft size={16} />\n                <span>Previous</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <IconChevronRight size={16} />\n                <span>Next</span>\n              </div>\n\n              {/* Vertical swipes */}\n              <div className=\"flex items-center gap-2 col-span-2 justify-center\">\n                <IconArrowDown size={16} />\n                <span>Swipe down for Quran selector</span>\n              </div>\n            </div>\n\n            <div className=\"mt-3 pt-3 border-t border-border/20 text-center\">\n              <p className=\"text-xs text-muted\">Tap anywhere to dismiss</p>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/NavigationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/QuranBottomSheetHeader.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":60,"fix":{"range":[105,133],"text":"@/app/shared/components/SearchInput"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { IconX } from '@tabler/icons-react';\nimport { memo } from 'react';\n\nimport { SearchInput } from '../../components/SearchInput';\n\ninterface QuranBottomSheetHeaderProps {\n  onClose: () => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n}\n\nexport const QuranBottomSheetHeader = memo(function QuranBottomSheetHeader({\n  onClose,\n  searchTerm,\n  setSearchTerm,\n}: QuranBottomSheetHeaderProps) {\n  return (\n    <>\n      <div className=\"flex justify-center pt-4 pb-2\">\n        <div className=\"w-10 h-1 bg-border rounded-full\" />\n      </div>\n      <div className=\"flex items-center justify-between px-6 py-4 border-b border-border\">\n        <h2 className=\"text-xl font-bold text-foreground\">Select Quran</h2>\n        <button\n          onClick={onClose}\n          className=\"btn-touch p-2 rounded-full hover:bg-interactive transition-colors\"\n        >\n          <IconX size={20} className=\"text-muted\" />\n        </button>\n      </div>\n      <div className=\"px-6 py-4 border-b border-border\">\n        <SearchInput\n          value={searchTerm}\n          onChange={setSearchTerm}\n          placeholder=\"Search surahs, juz, or page...\"\n          variant=\"panel\"\n          size=\"md\"\n        />\n      </div>\n    </>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/QuranTabBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/TabContent.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":63,"fix":{"range":[116,143],"text":"@/app/shared/navigation/hooks/useQuranNavigation"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'TabContent' has too many lines (59). Maximum allowed is 50.","line":18,"column":32,"nodeType":"FunctionExpression","messageId":"exceed","endLine":78,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { memo } from 'react';\n\nimport { NavigationItem } from './NavigationItem';\n\nimport type { JuzSummary } from '../hooks/useQuranNavigation';\nimport type { Surah } from '@/types';\n\ninterface TabContentProps {\n  activeTab: 'surah' | 'juz' | 'page';\n  filteredSurahs: Surah[];\n  filteredJuzs: JuzSummary[];\n  filteredPages: number[];\n  onSurahClick: (surahId: number) => void;\n  onJuzClick: (juzNumber: number) => void;\n  onPageClick: (page: number) => void;\n}\n\nexport const TabContent = memo(function TabContent({\n  activeTab,\n  filteredSurahs,\n  filteredJuzs,\n  filteredPages,\n  onSurahClick,\n  onJuzClick,\n  onPageClick,\n}: TabContentProps): React.JSX.Element {\n  if (activeTab === 'surah') {\n    return (\n      <div className=\"p-4\">\n        <div className=\"grid gap-2\">\n          {filteredSurahs.map((surah) => (\n            <NavigationItem\n              key={surah.number}\n              number={surah.number}\n              title={surah.name}\n              subtitle={`${surah.verses} verses`}\n              arabicName={surah.arabicName}\n              onClick={() => onSurahClick(surah.number)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (activeTab === 'juz') {\n    return (\n      <div className=\"p-4\">\n        <div className=\"grid gap-2\">\n          {filteredJuzs.map((juz) => (\n            <NavigationItem\n              key={juz.number}\n              number={juz.number}\n              title={`Juz ${juz.number}`}\n              subtitle={juz.surahRange}\n              onClick={() => onJuzClick(juz.number)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"grid gap-2\">\n        {filteredPages.map((page) => (\n          <NavigationItem\n            key={page}\n            number={page}\n            title={`Page ${page}`}\n            onClick={() => onPageClick(page)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useBottomSheetHandlers.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter } from 'next/navigation';\nimport { useCallback } from 'react';\n\nexport function useBottomSheetHandlers(\n  onClose: () => void,\n  onSurahSelect: (surahId: number) => void\n) {\n  const router = useRouter();\n\n  const handleSurahClick = useCallback(\n    (surahId: number) => {\n      onSurahSelect(surahId);\n      onClose();\n    },\n    [onSurahSelect, onClose]\n  );\n\n  const handleJuzClick = useCallback(\n    (juzNumber: number) => {\n      router.push(`/juz/${juzNumber}`);\n      onClose();\n    },\n    [router, onClose]\n  );\n\n  const handlePageClick = useCallback(\n    (page: number) => {\n      router.push(`/page/${page}`);\n      onClose();\n    },\n    [router, onClose]\n  );\n\n  return { handleSurahClick, handleJuzClick, handlePageClick } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useQuickSearch.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter } from 'next/navigation';\nimport { useState, useCallback } from 'react';\n\nexport function useQuickSearch(onClose: () => void) {\n  const [query, setQuery] = useState('');\n  const [recentSearches] = useState([\n    'Al-Fatiha',\n    'Ayatul Kursi',\n    'Surah Rahman',\n    'Last 10 Surahs',\n  ]);\n  const [trendingSearches] = useState([\n    'Surah Yaseen',\n    'Surah Mulk',\n    'Surah Kahf',\n    'Dua collection',\n  ]);\n  const router = useRouter();\n\n  const handleSearch = useCallback(\n    (searchQuery: string) => {\n      if (searchQuery.trim()) {\n        router.push(`/search?query=${encodeURIComponent(searchQuery.trim())}`);\n        onClose();\n        setQuery('');\n      }\n    },\n    [router, onClose]\n  );\n\n  return {\n    query,\n    setQuery,\n    recentSearches,\n    trendingSearches,\n    handleSearch,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useQuranNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/QuranAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/AudioProvider.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":67,"fix":{"range":[188,211],"text":"@/app/shared/player/context/AudioContext"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { fireEvent, render, waitFor } from '@testing-library/react';\nimport React from 'react';\n\nimport { RECITERS } from '@/lib/audio/reciters';\n\nimport { AudioProvider, useAudio } from '../context/AudioContext';\n\nconst Consumer = (): React.ReactElement => {\n  const { reciter, volume, playbackRate, setReciter, setVolume, setPlaybackRate } = useAudio();\n  return (\n    <>\n      <div data-testid=\"reciter\">{reciter.id}</div>\n      <div data-testid=\"volume\">{volume}</div>\n      <div data-testid=\"playbackRate\">{playbackRate}</div>\n      <button onClick={() => setReciter(RECITERS[2])}>reciter</button>\n      <button onClick={() => setVolume(0.5)}>volume</button>\n      <button onClick={() => setPlaybackRate(1.5)}>playbackRate</button>\n    </>\n  );\n};\n\ntest('settings persist after reload', async () => {\n  localStorage.clear();\n\n  const { getByText, unmount } = render(\n    <AudioProvider>\n      <Consumer />\n    </AudioProvider>\n  );\n\n  fireEvent.click(getByText('reciter'));\n  fireEvent.click(getByText('volume'));\n  fireEvent.click(getByText('playbackRate'));\n\n  await waitFor(() => {\n    expect(localStorage.getItem('reciterId')).toBe(String(RECITERS[2].id));\n    expect(localStorage.getItem('volume')).toBe('0.5');\n    expect(localStorage.getItem('playbackRate')).toBe('1.5');\n  });\n\n  unmount();\n\n  const { getByTestId } = render(\n    <AudioProvider>\n      <Consumer />\n    </AudioProvider>\n  );\n\n  expect(getByTestId('reciter').textContent).toBe(String(RECITERS[2].id));\n  expect(getByTestId('volume').textContent).toBe('0.5');\n  expect(getByTestId('playbackRate').textContent).toBe('1.5');\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/PlaybackOptionsModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/PlayerComponentsMobile.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":57,"fix":{"range":[117,144],"text":"@/app/shared/player/components/PlayerOptions"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":47,"fix":{"range":[169,191],"text":"@/app/shared/player/components/Timeline"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":57,"fix":{"range":[225,248],"text":"@/app/shared/player/context/AudioContext"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { render, screen, act } from '@testing-library/react';\nimport React from 'react';\n\nimport PlayerOptions from '../components/PlayerOptions';\nimport Timeline from '../components/Timeline';\nimport { AudioProvider } from '../context/AudioContext';\n\ndescribe('Player components mobile layout', () => {\n  beforeAll(() => {\n    // Mock ResizeObserver used by Radix UI components\n    class ResizeObserverMock {\n      observe(): void {}\n      unobserve(): void {}\n      disconnect(): void {}\n    }\n    window.ResizeObserver = ResizeObserverMock as unknown as typeof ResizeObserver;\n  });\n\n  test('renders options icon and progress bar on small viewports', async () => {\n    window.innerWidth = 375;\n    window.dispatchEvent(new Event('resize'));\n    await act(async () => {\n      render(\n        <AudioProvider>\n          <div>\n            <PlayerOptions />\n            <Timeline\n              current={0}\n              duration={10}\n              setSeek={() => {}}\n              interactable\n              elapsed=\"0:00\"\n              total=\"0:10\"\n            />\n          </div>\n        </AudioProvider>\n      );\n    });\n    expect(screen.getByLabelText('Options')).toBeInTheDocument();\n    expect(screen.getByLabelText('Seek')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/UseSurahRepeat.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/IconBtn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/PlaybackOptionsModal.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":66,"fix":{"range":[285,312],"text":"@/app/shared/player/hooks/usePlaybackOptions"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'PlaybackOptionsModal' has too many lines (58). Maximum allowed is 50.","line":95,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":157,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { SlidersIcon, MicIcon, RepeatIcon } from '@/app/shared/icons';\n\nimport { ReciterPanel } from './ReciterPanel';\nimport { RepeatPanel } from './RepeatPanel';\nimport { usePlaybackOptions } from '../hooks/usePlaybackOptions';\n\ninterface Props {\n  open: boolean;\n  onClose: () => void;\n  activeTab: 'reciter' | 'repeat';\n  setActiveTab: (tab: 'reciter' | 'repeat') => void;\n}\n\nfunction ModalHeader({ onClose }: { onClose: () => void }): React.JSX.Element {\n  return (\n    <div className=\"flex items-center justify-center gap-3 mb-4\">\n      <div className=\"h-10 w-10 rounded-xl grid place-items-center bg-accent/10 text-accent\">\n        <SlidersIcon />\n      </div>\n      <div className=\"font-semibold text-foreground\">Playback Options</div>\n      <button className=\"ml-auto text-muted hover:text-foreground\" onClick={onClose}>\n        ✕\n      </button>\n    </div>\n  );\n}\n\nfunction Tabs({\n  activeTab,\n  setActiveTab,\n}: Pick<Props, 'activeTab' | 'setActiveTab'>): React.JSX.Element {\n  return (\n    <div className=\"mb-4 flex justify-center gap-2\">\n      <button\n        onClick={() => setActiveTab('reciter')}\n        className={`px-3 py-1.5 rounded-full text-sm ${\n          activeTab === 'reciter'\n            ? 'bg-accent/10 text-accent'\n            : 'bg-surface hover:bg-interactive-hover'\n        }`}\n      >\n        <span className=\"inline-flex items-center gap-2\">\n          <MicIcon className=\"h-4 w-4\" />\n          Reciter\n        </span>\n      </button>\n      <button\n        onClick={() => setActiveTab('repeat')}\n        className={`px-3 py-1.5 rounded-full text-sm ${\n          activeTab === 'repeat'\n            ? 'bg-accent/10 text-accent'\n            : 'bg-surface hover:bg-interactive-hover'\n        }`}\n      >\n        <span className=\"inline-flex items-center gap-2\">\n          <RepeatIcon className=\"h-4 w-4\" />\n          Verse Repeat\n        </span>\n      </button>\n    </div>\n  );\n}\n\nfunction ModalFooter({\n  onClose,\n  onApply,\n}: {\n  onClose: () => void;\n  onApply: () => void;\n}): React.JSX.Element {\n  return (\n    <div className=\"mt-5 flex items-center justify-between text-sm\">\n      <div className=\"text-muted\">Tips: Space • ←/→ seek • ↑/↓ volume</div>\n      <div className=\"flex gap-2\">\n        <button\n          className=\"px-4 py-2 rounded-xl bg-surface hover:bg-interactive-hover text-foreground\"\n          onClick={onClose}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"px-4 py-2 rounded-xl bg-accent text-on-accent hover:opacity-90\"\n          onClick={onApply}\n        >\n          Apply\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport function PlaybackOptionsModal({\n  open,\n  onClose,\n  activeTab,\n  setActiveTab,\n}: Props): React.JSX.Element | null {\n  const {\n    localReciter,\n    setLocalReciter,\n    localRepeat,\n    setLocalRepeat,\n    rangeWarning,\n    setRangeWarning,\n    commit,\n  } = usePlaybackOptions(onClose);\n\n  useEffect(() => {\n    if (!open) setRangeWarning(null);\n  }, [open, setRangeWarning]);\n\n  if (!open) return null;\n\n  return createPortal(\n    <div\n      className=\"fixed inset-0 z-[120] grid place-items-center bg-surface-overlay/60 p-4\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) onClose();\n      }}\n      onKeyDown={(e) => {\n        if (e.target === e.currentTarget && (e.key === 'Enter' || e.key === ' ')) onClose();\n      }}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <div\n        className=\"w-full max-w-3xl rounded-2xl border border-border bg-surface p-4 md:p-6 shadow-2xl\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabIndex={-1}\n      >\n        <ModalHeader onClose={onClose} />\n        <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          {activeTab === 'reciter' && (\n            <ReciterPanel localReciter={localReciter} setLocalReciter={setLocalReciter} />\n          )}\n          {activeTab === 'repeat' && (\n            <RepeatPanel\n              localRepeat={localRepeat}\n              setLocalRepeat={setLocalRepeat}\n              rangeWarning={rangeWarning}\n              setRangeWarning={setRangeWarning}\n            />\n          )}\n        </div>\n\n        <ModalFooter onClose={onClose} onApply={commit} />\n      </div>\n    </div>,\n    document.body\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/PlayerOptions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/ReciterPanel.stories.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { ReciterPanel } from './ReciterPanel';\n\nimport type { Meta, StoryObj } from '@storybook/react';\n\nexport const meta: Meta<typeof ReciterPanel> = {\n  title: 'Player/ReciterPanel',\n  component: ReciterPanel,\n};\n\ntype Story = StoryObj<typeof ReciterPanel>;\n\nfunction ReciterPanelStory() {\n  const [reciter, setReciter] = useState('1');\n  return (\n    <div className=\"p-4 bg-surface\">\n      <ReciterPanel localReciter={reciter} setLocalReciter={setReciter} />\n    </div>\n  );\n}\n\nexport const Default: Story = {\n  render: () => <ReciterPanelStory />,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/ReciterPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/RepeatPanel.stories.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":47,"fix":{"range":[117,125],"text":"@/app/shared/player/types"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\n\nimport { RepeatPanel } from './RepeatPanel';\n\nimport type { RepeatOptions } from '../types';\nimport type { Meta, StoryObj } from '@storybook/react';\n\nexport const meta: Meta<typeof RepeatPanel> = {\n  title: 'Player/RepeatPanel',\n  component: RepeatPanel,\n};\n\ntype Story = StoryObj<typeof RepeatPanel>;\n\nfunction RepeatPanelStory() {\n  const [repeat, setRepeat] = useState<RepeatOptions>({ mode: 'off' });\n  const [warning, setWarning] = useState<string | null>(null);\n  return (\n    <div className=\"p-4 bg-surface\">\n      <RepeatPanel\n        localRepeat={repeat}\n        setLocalRepeat={setRepeat}\n        rangeWarning={warning}\n        setRangeWarning={setWarning}\n      />\n    </div>\n  );\n}\n\nexport const Default: Story = {\n  render: () => <RepeatPanelStory />,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/RepeatPanel.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[64,72],"text":"@/app/shared/player/types"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'RepeatPanel' has too many lines (72). Maximum allowed is 50.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":83,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import React from 'react';\n\nimport type { RepeatOptions } from '../types';\n\ninterface Props {\n  localRepeat: RepeatOptions;\n  setLocalRepeat: React.Dispatch<React.SetStateAction<RepeatOptions>>;\n  rangeWarning: string | null;\n  setRangeWarning: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport function RepeatPanel({\n  localRepeat,\n  setLocalRepeat,\n  rangeWarning,\n  setRangeWarning,\n}: Props): React.JSX.Element {\n  return (\n    <div className=\"md:col-span-2 grid md:grid-cols-2 gap-4\">\n      <div className=\"rounded-xl border border-border p-4\">\n        <div className=\"font-medium mb-3 text-foreground\">Mode</div>\n        <div className=\"flex items-center p-1 rounded-full bg-interactive border border-border\">\n          {(['off', 'single', 'range', 'surah'] as const).map((m) => (\n            <button\n              key={m}\n              onClick={() => setLocalRepeat({ ...localRepeat, mode: m })}\n              className={`flex-1 px-3 py-2 rounded-full text-sm font-semibold capitalize transition-colors ${\n                localRepeat.mode === m\n                  ? 'bg-surface shadow text-foreground'\n                  : 'text-muted hover:text-foreground hover:bg-surface/30'\n              }`}\n            >\n              {m}\n            </button>\n          ))}\n        </div>\n      </div>\n      <div className=\"rounded-xl border border-border p-4 grid grid-cols-2 gap-3\">\n        {rangeWarning && (\n          <div className=\"col-span-2 text-sm text-status-warning\">{rangeWarning}</div>\n        )}\n        <NumberField\n          label=\"Start\"\n          value={localRepeat.start ?? 1}\n          min={1}\n          onChange={(v) => {\n            setLocalRepeat({ ...localRepeat, start: v });\n            setRangeWarning(null);\n          }}\n        />\n        <NumberField\n          label=\"End\"\n          value={localRepeat.end ?? localRepeat.start ?? 1}\n          min={1}\n          onChange={(v) => {\n            setLocalRepeat({ ...localRepeat, end: v });\n            setRangeWarning(null);\n          }}\n        />\n        <NumberField\n          label=\"Play count\"\n          value={localRepeat.playCount ?? 1}\n          min={1}\n          onChange={(v) => setLocalRepeat({ ...localRepeat, playCount: v })}\n        />\n        <NumberField\n          label=\"Repeat each\"\n          value={localRepeat.repeatEach ?? 1}\n          min={1}\n          onChange={(v) => setLocalRepeat({ ...localRepeat, repeatEach: v })}\n        />\n        <div className=\"col-span-2\">\n          <NumberField\n            label=\"Delay (s)\"\n            value={localRepeat.delay ?? 0}\n            min={0}\n            onChange={(v) => setLocalRepeat({ ...localRepeat, delay: v })}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction NumberField({\n  label,\n  value,\n  onChange,\n  min = 0,\n}: {\n  label: string;\n  value: number;\n  onChange: (v: number) => void;\n  min?: number;\n}): React.JSX.Element {\n  return (\n    <label className=\"text-sm\">\n      <span className=\"block mb-1 text-muted\">{label}</span>\n      <input\n        type=\"number\"\n        value={Number.isFinite(value) ? value : 0}\n        min={min}\n        step={1}\n        onChange={(e) => {\n          const v = parseInt(e.target.value, 10);\n          onChange(Number.isNaN(v) ? (min ?? value) : v);\n        }}\n        className=\"w-full rounded-xl border border-border bg-surface px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent/35\"\n      />\n    </label>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/SpeedControl.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Popover from '@radix-ui/react-popover';\nimport React, { useRef, useState } from 'react';\n\nimport { useAudio } from '@/app/shared/player/context/AudioContext';\n\nfunction useSpeedPopover() {\n  const [open, setOpen] = useState(false);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const close = (): void => {\n    setOpen(false);\n    triggerRef.current?.focus();\n  };\n\n  return { open, setOpen, triggerRef, contentRef, close } as const;\n}\n\nfunction SpeedOptionButton({\n  speed,\n  active,\n  onSelect,\n}: {\n  speed: number;\n  active: boolean;\n  onSelect: (v: number) => void;\n}): React.JSX.Element {\n  return (\n    <button\n      onClick={() => onSelect(speed)}\n      className={`w-full text-center text-sm p-1.5 rounded-md ${\n        active ? 'bg-accent text-on-accent' : 'hover:bg-interactive-hover'\n      }`}\n    >\n      {speed}x\n    </button>\n  );\n}\n\nexport function SpeedControl(): React.JSX.Element {\n  const { playbackRate, setPlaybackRate } = useAudio();\n  const { open, setOpen, triggerRef, contentRef, close } = useSpeedPopover();\n  const speedOptions = [0.75, 1, 1.25, 1.5, 2];\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger asChild>\n        <button\n          ref={triggerRef}\n          onBlur={(e) => {\n            if (!contentRef.current?.contains(e.relatedTarget as Node)) {\n              setOpen(false);\n            }\n          }}\n          className=\"h-9 w-14 grid place-items-center rounded-full text-xs font-bold transition focus:outline-none focus:ring-2 text-foreground focus:ring-accent/35 hover:bg-interactive-hover\"\n        >\n          {playbackRate}x\n        </button>\n      </Popover.Trigger>\n      <Popover.Content\n        ref={contentRef}\n        side=\"top\"\n        align=\"center\"\n        sideOffset={8}\n        className=\"w-28 rounded-lg shadow-lg border p-1 bg-surface border-surface\"\n        onFocusOutside={() => setOpen(false)}\n        onEscapeKeyDown={() => setOpen(false)}\n        onInteractOutside={() => setOpen(false)}\n      >\n        {speedOptions.map((speed) => (\n          <SpeedOptionButton\n            key={speed}\n            speed={speed}\n            active={playbackRate === speed}\n            onSelect={(v) => {\n              setPlaybackRate(v);\n              close();\n            }}\n          />\n        ))}\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/Timeline.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Timeline' has too many lines (54). Maximum allowed is 50.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":69,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Slider from '@radix-ui/react-slider';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport React from 'react';\n\nimport { responsiveClasses } from '@/lib/responsive';\n\ninterface Props {\n  current: number;\n  duration: number;\n  setSeek: (sec: number) => void;\n  interactable: boolean;\n  elapsed: string;\n  total: string;\n}\n\nexport function Timeline({\n  current,\n  duration,\n  setSeek,\n  interactable,\n  elapsed,\n  total,\n}: Props): React.JSX.Element {\n  return (\n    <div className=\"flex-1 flex items-center gap-3\">\n      <div className=\"flex-1\">\n        <Tooltip.Provider delayDuration={150}>\n          <Slider.Root\n            className={`relative w-full h-2.5 group flex items-center ${\n              !interactable ? 'opacity-60 pointer-events-none' : ''\n            }`}\n            value={[current]}\n            max={Math.max(1, duration || 0)}\n            step={0.1}\n            onValueChange={([v]) => setSeek(v)}\n            aria-label=\"Seek\"\n          >\n            <Slider.Track className=\"h-0.5 rounded-full relative w-full grow bg-surface group-hover:bg-interactive-hover\">\n              <Slider.Range className=\"h-full rounded-full absolute bg-accent\" />\n            </Slider.Track>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <Slider.Thumb\n                  className=\"block h-3 w-3 rounded-full shadow-[0_1px_2px_rgba(2,6,23,0.15)] focus:outline-none focus:ring-2 focus:ring-offset-2 bg-background ring-accent focus:ring-accent/35 relative z-[120]\"\n                  aria-label=\"Position\"\n                />\n              </Tooltip.Trigger>\n              <Tooltip.Portal>\n                <Tooltip.Content\n                  sideOffset={8}\n                  className=\"rounded-md text-foreground text-xs px-2 py-1 shadow bg-surface z-[120]\"\n                >\n                  {elapsed}\n                  <Tooltip.Arrow className=\"fill-surface\" />\n                </Tooltip.Content>\n              </Tooltip.Portal>\n            </Tooltip.Root>\n          </Slider.Root>\n        </Tooltip.Provider>\n      </div>\n      <div\n        className={`flex justify-between ${responsiveClasses.timeDisplay} ${responsiveClasses.timeLabel}`}\n      >\n        <span aria-label=\"elapsed\">{elapsed}</span>\n        <span aria-label=\"duration\">{total}</span>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/TrackInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/TransportControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/VolumeControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/context/AudioContext.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":80,"fix":{"range":[177,211],"text":"@/app/shared/player/hooks/usePersistedAudioSettings"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":68,"fix":{"range":[251,279],"text":"@/app/shared/player/hooks/usePlayerVisibility"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (62). Maximum allowed is 50.","line":41,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":105,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\nimport React, { createContext, useContext, useMemo, useRef, useState } from 'react';\n\nimport { Verse } from '@/types';\n\nimport { usePersistedAudioSettings } from '../hooks/usePersistedAudioSettings';\nimport { usePlayerVisibility } from '../hooks/usePlayerVisibility';\n\nimport type { Reciter, RepeatOptions } from '@/app/shared/player/types';\n\ninterface AudioContextType {\n  playingId: number | null;\n  setPlayingId: React.Dispatch<React.SetStateAction<number | null>>;\n  isPlaying: boolean;\n  setIsPlaying: React.Dispatch<React.SetStateAction<boolean>>;\n  loadingId: number | null;\n  setLoadingId: React.Dispatch<React.SetStateAction<number | null>>;\n  activeVerse: Verse | null;\n  setActiveVerse: React.Dispatch<React.SetStateAction<Verse | null>>;\n  audioRef: React.MutableRefObject<HTMLAudioElement | null>;\n  repeatOptions: RepeatOptions;\n  setRepeatOptions: React.Dispatch<React.SetStateAction<RepeatOptions>>;\n  reciter: Reciter;\n  setReciter: React.Dispatch<React.SetStateAction<Reciter>>;\n  volume: number;\n  setVolume: React.Dispatch<React.SetStateAction<number>>;\n  playbackRate: number;\n  setPlaybackRate: React.Dispatch<React.SetStateAction<number>>;\n  isPlayerVisible: boolean;\n  openPlayer: () => void;\n  closePlayer: () => void;\n}\n\nconst AudioContext = createContext<AudioContextType | undefined>(undefined);\n\n/**\n * Provides global audio playback state.\n * Wrap your application with this provider to share the currently\n * playing and loading audio identifiers across components.\n */\nexport const AudioProvider = ({ children }: { children: React.ReactNode }): React.JSX.Element => {\n  const [playingId, setPlayingId] = useState<number | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [loadingId, setLoadingId] = useState<number | null>(null);\n  const [activeVerse, setActiveVerse] = useState<Verse | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const { repeatOptions, setRepeatOptions } = useRepeatState();\n  const { reciter, setReciter, volume, setVolume, playbackRate, setPlaybackRate } =\n    usePersistedAudioSettings();\n\n  const { isPlayerVisible, openPlayer, closePlayer } = usePlayerVisibility({\n    audioRef,\n    setIsPlaying,\n    setPlayingId,\n    setActiveVerse,\n  });\n\n  const value = useMemo(\n    () => ({\n      playingId,\n      setPlayingId,\n      isPlaying,\n      setIsPlaying,\n      loadingId,\n      setLoadingId,\n      activeVerse,\n      setActiveVerse,\n      audioRef,\n      repeatOptions,\n      setRepeatOptions,\n      reciter,\n      setReciter,\n      volume,\n      setVolume,\n      playbackRate,\n      setPlaybackRate,\n      isPlayerVisible,\n      openPlayer,\n      closePlayer,\n    }),\n    [\n      playingId,\n      setPlayingId,\n      isPlaying,\n      setIsPlaying,\n      loadingId,\n      setLoadingId,\n      activeVerse,\n      setActiveVerse,\n      repeatOptions,\n      setRepeatOptions,\n      reciter,\n      setReciter,\n      volume,\n      setVolume,\n      playbackRate,\n      setPlaybackRate,\n      isPlayerVisible,\n      openPlayer,\n      closePlayer,\n    ]\n  );\n\n  return <AudioContext.Provider value={value}>{children}</AudioContext.Provider>;\n};\n\nfunction useRepeatState(): {\n  repeatOptions: RepeatOptions;\n  setRepeatOptions: React.Dispatch<React.SetStateAction<RepeatOptions>>;\n} {\n  const [repeatOptions, setRepeatOptions] = useState<RepeatOptions>({\n    mode: 'off',\n    start: 1,\n    end: 1,\n    playCount: 1,\n    repeatEach: 1,\n    delay: 0,\n  });\n  return { repeatOptions, setRepeatOptions } as const;\n}\n\n/**\n * Hook for accessing audio playback state.\n * Use within components to read or update the current playing or\n * loading audio identifiers managed by `AudioProvider`.\n */\nexport const useAudio = (): AudioContextType => {\n  const ctx = useContext(AudioContext);\n  if (!ctx) throw new Error('useAudio must be used within AudioProvider');\n  return ctx;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useAudioPlayer.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useAudioPlayer' has too many lines (70). Maximum allowed is 50.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":106,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useRef, useState, MutableRefObject } from 'react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\ntype Options = {\n  src?: string;\n  defaultDuration?: number;\n  onTimeUpdate?: (time: number) => void;\n  onLoadedMetadata?: (duration: number) => void;\n  onError?: (error: unknown) => void;\n};\n\ninterface AudioPlayerReturn {\n  audioRef: MutableRefObject<HTMLAudioElement | null>;\n  isPlaying: boolean;\n  play: () => void;\n  pause: () => void;\n  seek: (sec: number) => number;\n  setVolume: (vol: number) => void;\n  setPlaybackRate: (rate: number) => void;\n}\n\n/**\n * Controls an `HTMLAudioElement` and exposes playback helpers.\n *\n * @param options optional callbacks and src.\n * @returns helpers and state for audio playback.\n */\nexport function useAudioPlayer(options: Options = {}): AudioPlayerReturn {\n  const { src, defaultDuration, onTimeUpdate, onLoadedMetadata, onError } = options;\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const play = useCallback(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.play().catch((err) => {\n      if (err instanceof DOMException && err.name === 'AbortError') return;\n      if (onError) onError(err);\n      else logger.error(err);\n    });\n    setIsPlaying(true);\n  }, [onError]);\n\n  const pause = useCallback(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.pause();\n    setIsPlaying(false);\n  }, []);\n\n  const seek = useCallback(\n    (sec: number) => {\n      const a = audioRef.current;\n      if (!a) return 0;\n      const max = a.duration || defaultDuration || 0;\n      a.currentTime = Math.max(0, Math.min(max, sec));\n      const t = a.currentTime || 0;\n      onTimeUpdate?.(t);\n      return t;\n    },\n    [defaultDuration, onTimeUpdate]\n  );\n\n  const setVolume = useCallback((vol: number) => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.volume = vol;\n  }, []);\n\n  const setPlaybackRate = useCallback((rate: number): void => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.playbackRate = rate;\n  }, []);\n\n  useEffect(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    if (isPlaying) {\n      a.play().catch((err) => {\n        if (err instanceof DOMException && err.name === 'AbortError') return;\n        if (onError) onError(err);\n        else logger.error(err);\n      });\n    } else {\n      a.pause();\n    }\n  }, [isPlaying, src, onError]);\n\n  useEffect(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    const onTime = (): void => onTimeUpdate?.(a.currentTime || 0);\n    const onMeta = (): void => onLoadedMetadata?.(a.duration || defaultDuration || 0);\n    a.addEventListener('timeupdate', onTime);\n    a.addEventListener('loadedmetadata', onMeta);\n    onMeta();\n    return () => {\n      a.removeEventListener('timeupdate', onTime);\n      a.removeEventListener('loadedmetadata', onMeta);\n    };\n  }, [src, defaultDuration, onTimeUpdate, onLoadedMetadata]);\n\n  return { audioRef, isPlaying, play, pause, seek, setVolume, setPlaybackRate };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePersistedAudioSettings.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":41,"fix":{"range":[126,134],"text":"@/app/shared/player/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useEffect, useState } from 'react';\n\nimport { RECITERS } from '@/lib/audio/reciters';\n\nimport type { Reciter } from '../types';\n\ninterface UsePersistedAudioSettingsReturn {\n  reciter: Reciter;\n  setReciter: React.Dispatch<React.SetStateAction<Reciter>>;\n  volume: number;\n  setVolume: React.Dispatch<React.SetStateAction<number>>;\n  playbackRate: number;\n  setPlaybackRate: React.Dispatch<React.SetStateAction<number>>;\n}\n\n/**\n * Manages audio settings with localStorage persistence.\n * Loads settings on mount and writes updates when they change.\n */\nexport function usePersistedAudioSettings(): UsePersistedAudioSettingsReturn {\n  const [reciter, setReciter] = useState<Reciter>(RECITERS[0]);\n  const [volume, setVolume] = useState(0.9);\n  const [playbackRate, setPlaybackRate] = useState(1);\n\n  // Load persisted settings on mount\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    try {\n      const found = loadReciterFromStorage();\n      if (found) setReciter(found);\n\n      const vol = loadNumberFromStorage('volume', (n) => n >= 0 && n <= 1);\n      if (vol !== null) setVolume(vol);\n\n      const rate = loadNumberFromStorage('playbackRate', (n) => n > 0);\n      if (rate !== null) setPlaybackRate(rate);\n    } catch {\n      // ignore corrupted localStorage entries\n    }\n  }, []);\n\n  // Persist settings when they change\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    try {\n      localStorage.setItem('reciterId', String(reciter.id));\n      localStorage.setItem('volume', String(volume));\n      localStorage.setItem('playbackRate', String(playbackRate));\n    } catch {\n      // ignore write errors\n    }\n  }, [reciter.id, volume, playbackRate]);\n\n  return { reciter, setReciter, volume, setVolume, playbackRate, setPlaybackRate };\n}\n\nfunction loadReciterFromStorage(): Reciter | null {\n  const reciterId = localStorage.getItem('reciterId');\n  if (!reciterId) return null;\n  const parsed = Number.parseInt(reciterId, 10);\n  const found = RECITERS.find((r) => r.id === parsed) ?? null;\n  if (!found) localStorage.removeItem('reciterId');\n  return found;\n}\n\nfunction loadNumberFromStorage(\n  key: 'volume' | 'playbackRate',\n  isValid: (n: number) => boolean\n): number | null {\n  const raw = localStorage.getItem(key);\n  if (raw === null) return null;\n  const n = Number.parseFloat(raw);\n  if (Number.isNaN(n) || !isValid(n)) {\n    localStorage.removeItem(key);\n    return null;\n  }\n  return n;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlaybackCompletion.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":47,"fix":{"range":[192,200],"text":"@/app/shared/player/types"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'usePlaybackCompletion' has too many lines (94). Maximum allowed is 50.","line":28,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":128,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":66,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":112,"endColumn":4},{"ruleId":"max-lines","severity":1,"message":"File has too many lines (214). Maximum allowed is 120.","line":140,"column":1,"nodeType":null,"messageId":"exceed","endLine":236,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useCallback, useEffect, useState, RefObject } from 'react';\n\nimport { Verse } from '@/types';\n\nimport { useSurahRepeat } from './useSurahRepeat';\n\nimport type { RepeatOptions } from '../types';\n\ninterface Options {\n  audioRef: RefObject<HTMLAudioElement | null>;\n  repeatOptions: RepeatOptions;\n  activeVerse: Verse | null;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  seek: (s: number) => void;\n  play: () => void;\n  pause: () => void;\n  setIsPlaying: (v: boolean) => void;\n  setPlayingId: (v: number | null) => void;\n}\n\n/**\n * Returns a callback for handling audio completion based on repeat settings.\n *\n * @param options playback context and controls.\n * @returns function to run when playback ends.\n */\nexport function usePlaybackCompletion({\n  audioRef,\n  repeatOptions,\n  activeVerse,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n}: Options): () => void {\n  const [verseRepeatsLeft, setVerseRepeatsLeft] = useState(repeatOptions.repeatEach ?? 1);\n  const [playRepeatsLeft, setPlayRepeatsLeft] = useState(repeatOptions.playCount ?? 1);\n\n  useEffect(() => {\n    setVerseRepeatsLeft(repeatOptions.repeatEach ?? 1);\n    setPlayRepeatsLeft(repeatOptions.playCount ?? 1);\n  }, [activeVerse, repeatOptions.repeatEach, repeatOptions.playCount]);\n\n  const delayMs = (repeatOptions.delay ?? 0) * 1000;\n\n  const handleSurahRepeat = useSurahRepeat({\n    verseRepeatsLeft,\n    playRepeatsLeft,\n    repeatEach: repeatOptions.repeatEach ?? 1,\n    delay: delayMs,\n    onNext,\n    onPrev,\n    seek,\n    play,\n    pause,\n    setIsPlaying,\n    setPlayingId,\n    setVerseRepeatsLeft,\n    setPlayRepeatsLeft,\n  });\n\n  return useCallback((): void => {\n    const mode = repeatOptions.mode;\n    const start = repeatOptions.start ?? 1;\n    const end = repeatOptions.end ?? start;\n    const delay = delayMs;\n    const currentAyah = activeVerse ? parseInt(activeVerse.verse_key.split(':')[1], 10) : null;\n\n    if (\n      mode === 'single' &&\n      handleSingleRepeatPure({\n        verseRepeatsLeft,\n        playRepeatsLeft,\n        repeatEach: repeatOptions.repeatEach ?? 1,\n        seek,\n        play,\n        setVerseRepeatsLeft,\n        setPlayRepeatsLeft,\n      })\n    )\n      return;\n\n    if (\n      mode === 'range' &&\n      handleRangeRepeatPure({\n        start,\n        end,\n        currentAyah,\n        delay,\n        verseRepeatsLeft,\n        repeatEach: repeatOptions.repeatEach ?? 1,\n        onNext,\n        onPrev,\n        seek,\n        play,\n        setVerseRepeatsLeft,\n        setPlayRepeatsLeft,\n        playRepeatsLeft,\n      })\n    )\n      return;\n    if (mode === 'surah') {\n      handleSurahRepeat();\n      return;\n    }\n\n    finalizePlaybackPure({ onNext, audioRef, pause, setIsPlaying, setPlayingId });\n  }, [\n    repeatOptions,\n    activeVerse,\n    delayMs,\n    verseRepeatsLeft,\n    playRepeatsLeft,\n    onNext,\n    onPrev,\n    seek,\n    play,\n    pause,\n    setIsPlaying,\n    setPlayingId,\n    handleSurahRepeat,\n    audioRef,\n  ]);\n}\n\nfunction handleSingleRepeatPure({\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  repeatEach,\n  seek,\n  play,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n}: {\n  verseRepeatsLeft: number;\n  playRepeatsLeft: number;\n  repeatEach: number;\n  seek: (s: number) => void;\n  play: () => void;\n  setVerseRepeatsLeft: (n: number) => void;\n  setPlayRepeatsLeft: (n: number) => void;\n}): boolean {\n  if (verseRepeatsLeft > 1) {\n    setVerseRepeatsLeft(verseRepeatsLeft - 1);\n    seek(0);\n    play();\n    return true;\n  }\n  if (playRepeatsLeft > 1) {\n    setPlayRepeatsLeft(playRepeatsLeft - 1);\n    setVerseRepeatsLeft(repeatEach);\n    seek(0);\n    play();\n    return true;\n  }\n  return false;\n}\n\nfunction handleRangeRepeatPure({\n  start,\n  end,\n  currentAyah,\n  delay,\n  verseRepeatsLeft,\n  repeatEach,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n  playRepeatsLeft,\n}: {\n  start: number;\n  end: number;\n  currentAyah: number | null;\n  delay: number;\n  verseRepeatsLeft: number;\n  repeatEach: number;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  seek: (s: number) => void;\n  play: () => void;\n  setVerseRepeatsLeft: (n: number) => void;\n  setPlayRepeatsLeft: (n: number) => void;\n  playRepeatsLeft: number;\n}): boolean {\n  if (verseRepeatsLeft > 1) {\n    setVerseRepeatsLeft(verseRepeatsLeft - 1);\n    seek(0);\n    play();\n    return true;\n  }\n  setVerseRepeatsLeft(repeatEach);\n  if (currentAyah && currentAyah < end) {\n    onNext?.();\n    return true;\n  }\n  if (playRepeatsLeft > 1) {\n    setPlayRepeatsLeft(playRepeatsLeft - 1);\n    const steps = end - start;\n    setTimeout(() => {\n      for (let i = 0; i < steps; i++) onPrev?.();\n    }, delay);\n    return true;\n  }\n  return false;\n}\n\nfunction finalizePlaybackPure({\n  onNext,\n  audioRef,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n}: {\n  onNext?: () => boolean;\n  audioRef: RefObject<HTMLAudioElement | null>;\n  pause: () => void;\n  setIsPlaying: (v: boolean) => void;\n  setPlayingId: (v: number | null) => void;\n}): void {\n  const hasNext = onNext?.() ?? false;\n  setTimeout(() => {\n    if (!hasNext || !audioRef.current?.src) {\n      pause();\n      setIsPlaying(false);\n      setPlayingId(null);\n    }\n  }, 0);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlaybackOptions.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":52,"fix":{"range":[148,171],"text":"@/app/shared/player/context/AudioContext"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":47,"fix":{"range":[211,219],"text":"@/app/shared/player/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\nimport { RECITERS } from '@/lib/audio/reciters';\n\nimport { useAudio } from '../context/AudioContext';\n\nimport type { RepeatOptions } from '../types';\n\n/**\n * Local state manager for playback options and reciter selection.\n *\n * @param onClose callback to close the options modal.\n * @returns current selections and helpers to commit changes.\n */\ninterface UsePlaybackOptionsReturn {\n  localReciter: string;\n  setLocalReciter: Dispatch<SetStateAction<string>>;\n  localRepeat: RepeatOptions;\n  setLocalRepeat: Dispatch<SetStateAction<RepeatOptions>>;\n  rangeWarning: string | null;\n  setRangeWarning: Dispatch<SetStateAction<string | null>>;\n  commit: () => void;\n}\n\nexport function usePlaybackOptions(onClose: () => void): UsePlaybackOptionsReturn {\n  const { reciter, setReciter, repeatOptions, setRepeatOptions } = useAudio();\n  const [localReciter, setLocalReciter] = useState(reciter.id.toString());\n  const [localRepeat, setLocalRepeat] = useState<RepeatOptions>(repeatOptions);\n  const [rangeWarning, setRangeWarning] = useState<string | null>(null);\n\n  useEffect(() => {\n    setLocalReciter(reciter.id.toString());\n  }, [reciter]);\n\n  useEffect(() => {\n    setLocalRepeat(repeatOptions);\n  }, [repeatOptions]);\n\n  const commit = (): void => {\n    if (hasNonIntegerValues(localRepeat)) {\n      setRangeWarning('Please enter whole numbers only.');\n      return;\n    }\n    const newReciter = RECITERS.find((r) => r.id.toString() === localReciter);\n    if (newReciter) setReciter(newReciter);\n    const { start, end, adjusted } = adjustRange(localRepeat);\n    if (adjusted) {\n      setRangeWarning('Start and end values adjusted to a valid range.');\n      setLocalRepeat({ ...localRepeat, start, end });\n      return;\n    }\n    setRangeWarning(null);\n    setRepeatOptions({ ...localRepeat, start, end });\n    onClose();\n  };\n\n  return {\n    localReciter,\n    setLocalReciter,\n    localRepeat,\n    setLocalRepeat,\n    rangeWarning,\n    setRangeWarning,\n    commit,\n  };\n}\n\nfunction hasNonIntegerValues(opts: RepeatOptions): boolean {\n  const numericKeys: (keyof RepeatOptions)[] = ['start', 'end', 'playCount', 'repeatEach', 'delay'];\n  return numericKeys.some((key) => {\n    const val = opts[key];\n    return val !== undefined && !Number.isInteger(val);\n  });\n}\n\nfunction adjustRange(opts: RepeatOptions): { start: number; end: number; adjusted: boolean } {\n  const start = Math.max(1, opts.start ?? 1);\n  const end = Math.max(start, opts.end ?? start);\n  return { start, end, adjusted: start !== opts.start || end !== opts.end };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerControls.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerKeyboard.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, Dispatch, SetStateAction } from 'react';\n\ninterface Options {\n  current: number;\n  duration: number;\n  setSeek: (sec: number) => void;\n  togglePlay: () => void;\n  setVolume: Dispatch<SetStateAction<number>>;\n}\n\n/**\n * Registers keyboard shortcuts for the audio player.\n *\n * @param options current playback data and control handlers.\n */\nexport function usePlayerKeyboard({\n  current,\n  duration,\n  setSeek,\n  togglePlay,\n  setVolume,\n}: Options): void {\n  useEffect(() => {\n    const onKey = (e: KeyboardEvent) => {\n      if ((e.target as HTMLElement)?.closest('input, textarea, [role=slider]')) return;\n      if (e.code === 'Space') {\n        e.preventDefault();\n        togglePlay();\n      }\n      if (e.key === 'ArrowLeft') setSeek(Math.max(0, current - 5));\n      if (e.key === 'ArrowRight') setSeek(Math.min(duration || 0, current + 5));\n      if (e.key === 'ArrowUp') setVolume((v) => Math.min(1, round(v + 0.05)));\n      if (e.key === 'ArrowDown') setVolume((v) => Math.max(0, round(v - 0.05)));\n    };\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [current, duration, setSeek, togglePlay, setVolume]);\n}\n\nfunction round(n: number): number {\n  return Math.round(n * 100) / 100;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerVisibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useQuranAudioController.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":39,"fix":{"range":[344,352],"text":"@/app/shared/player/types"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":44,"endColumn":32},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useQuranAudioController' has too many lines (66). Maximum allowed is 50.","line":80,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":151,"endColumn":2},{"ruleId":"max-lines","severity":1,"message":"File has too many lines (138). Maximum allowed is 120.","line":133,"column":1,"nodeType":null,"messageId":"exceed","endLine":152,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState, Dispatch, SetStateAction, RefObject } from 'react';\n\nimport { useAudio } from '@/app/shared/player/context/AudioContext';\n\nimport { usePlaybackCompletion } from './usePlaybackCompletion';\nimport { usePlayerControls } from './usePlayerControls';\nimport { useTrackTiming } from './useTrackTiming';\n\nimport type { Track } from '../types';\n\ninterface Props {\n  track?: Track | null;\n  onPrev?: () => boolean;\n  onNext?: () => boolean;\n}\n\ninterface QuranAudioControllerReturn {\n  isPlayerVisible: boolean;\n  audioRef: RefObject<HTMLAudioElement>;\n  handleEnded: () => void;\n  playerLayoutProps: {\n    cover: string;\n    title: string;\n    artist: string;\n    current: number;\n    duration: number;\n    elapsed: string;\n    total: string;\n    interactable: boolean;\n    isPlaying: boolean;\n    togglePlay: () => void;\n    setSeek: (value: number) => void;\n    onNext?: () => boolean;\n    onPrev?: () => boolean;\n    closePlayer: () => void;\n    setMobileOptionsOpen: () => void;\n  };\n  mobileOptionsOpen: boolean;\n  setMobileOptionsOpen: Dispatch<SetStateAction<boolean>>;\n  activeTab: 'reciter' | 'repeat';\n  setActiveTab: Dispatch<SetStateAction<'reciter' | 'repeat'>>;\n}\n\nfunction buildPlayerLayoutProps({\n  timing,\n  isPlaying,\n  onNext,\n  onPrev,\n  closePlayer,\n  setMobileOptionsOpen,\n  controls,\n}: {\n  timing: ReturnType<typeof useTrackTiming>;\n  isPlaying: boolean;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  closePlayer: () => void;\n  setMobileOptionsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  controls: ReturnType<typeof usePlayerControls>;\n}) {\n  return {\n    cover: timing.cover,\n    title: timing.title,\n    artist: timing.artist,\n    current: timing.current,\n    duration: timing.duration,\n    elapsed: timing.elapsed,\n    total: timing.total,\n    interactable: timing.interactable,\n    isPlaying,\n    togglePlay: controls.togglePlay,\n    setSeek: controls.setSeek,\n    onNext,\n    onPrev,\n    closePlayer,\n    setMobileOptionsOpen: () => setMobileOptionsOpen(true),\n  } as const;\n}\n\nexport function useQuranAudioController({\n  track,\n  onPrev,\n  onNext,\n}: Props): QuranAudioControllerReturn {\n  const [mobileOptionsOpen, setMobileOptionsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'reciter' | 'repeat'>('reciter');\n\n  const {\n    isPlayerVisible,\n    closePlayer,\n    audioRef,\n    isPlaying,\n    setIsPlaying,\n    setPlayingId,\n    activeVerse,\n    volume,\n    setVolume,\n    playbackRate,\n    repeatOptions,\n  } = useAudio();\n\n  const timing = useTrackTiming({ track, volume, playbackRate, contextRef: audioRef });\n\n  const controls = usePlayerControls({\n    interactable: timing.interactable,\n    isPlaying,\n    setIsPlaying,\n    setPlayingId,\n    activeVerse,\n    current: timing.current,\n    duration: timing.duration,\n    seek: timing.seek,\n    setVolume,\n    play: timing.play,\n    pause: timing.pause,\n  });\n\n  const handleEnded = usePlaybackCompletion({\n    audioRef: timing.audioRef,\n    repeatOptions,\n    activeVerse,\n    onNext,\n    onPrev,\n    seek: timing.seek,\n    play: timing.play,\n    pause: timing.pause,\n    setIsPlaying,\n    setPlayingId,\n  });\n\n  const playerLayoutProps = buildPlayerLayoutProps({\n    timing,\n    isPlaying,\n    onNext,\n    onPrev,\n    closePlayer,\n    setMobileOptionsOpen,\n    controls,\n  });\n\n  return {\n    isPlayerVisible,\n    audioRef: timing.audioRef,\n    handleEnded,\n    playerLayoutProps,\n    mobileOptionsOpen,\n    setMobileOptionsOpen,\n    activeTab,\n    setActiveTab,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useSurahRepeat.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'handleSurahRepeat' has too many lines (55). Maximum allowed is 50.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":57,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nexport function handleSurahRepeat({\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  repeatEach,\n  delay,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n}: {\n  verseRepeatsLeft: number;\n  playRepeatsLeft: number;\n  repeatEach: number;\n  delay: number;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  seek: (s: number) => void;\n  play: () => void;\n  pause: () => void;\n  setIsPlaying: (v: boolean) => void;\n  setPlayingId: (v: number | null) => void;\n  setVerseRepeatsLeft: (n: number) => void;\n  setPlayRepeatsLeft: (n: number) => void;\n}): void {\n  if (verseRepeatsLeft > 1) {\n    setVerseRepeatsLeft(verseRepeatsLeft - 1);\n    seek(0);\n    play();\n    return;\n  }\n  setVerseRepeatsLeft(repeatEach);\n  const hasNext = onNext?.() ?? false;\n  if (hasNext) return;\n  if (playRepeatsLeft > 1) {\n    setPlayRepeatsLeft(playRepeatsLeft - 1);\n    setVerseRepeatsLeft(repeatEach);\n    setTimeout(() => {\n      let hasPrev = true;\n      while (hasPrev) {\n        hasPrev = onPrev?.() ?? false;\n      }\n    }, delay);\n    return;\n  }\n  setTimeout(() => {\n    pause();\n    setIsPlaying(false);\n    setPlayingId(null);\n  }, 0);\n}\n\n/**\n * Provides a memoized callback for handling surah repeat logic.\n *\n * @param params repeat state and audio controls.\n * @returns function to execute the repeat routine.\n */\nexport function useSurahRepeat({\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  repeatEach,\n  delay,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n}: Parameters<typeof handleSurahRepeat>[0]): () => void {\n  return useCallback(\n    () =>\n      handleSurahRepeat({\n        verseRepeatsLeft,\n        playRepeatsLeft,\n        repeatEach,\n        delay,\n        onNext,\n        onPrev,\n        seek,\n        play,\n        pause,\n        setIsPlaying,\n        setPlayingId,\n        setVerseRepeatsLeft,\n        setPlayRepeatsLeft,\n      }),\n    [\n      verseRepeatsLeft,\n      playRepeatsLeft,\n      repeatEach,\n      delay,\n      onNext,\n      onPrev,\n      seek,\n      play,\n      pause,\n      setIsPlaying,\n      setPlayingId,\n      setVerseRepeatsLeft,\n      setPlayRepeatsLeft,\n    ]\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useTrackTiming.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":39,"fix":{"range":[153,161],"text":"@/app/shared/player/types"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":28},{"ruleId":"complexity","severity":1,"message":"Function 'useTrackTiming' has a complexity of 14. Maximum allowed is 10.","line":34,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":83,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useEffect, useMemo, useState, MutableRefObject } from 'react';\n\nimport { useAudioPlayer } from './useAudioPlayer';\n\nimport type { Track } from '../types';\n\nconst mmss = (s: number) =>\n  `${Math.floor(s / 60)}:${Math.floor(s % 60)\n    .toString()\n    .padStart(2, '0')}`;\n\ninterface Opts {\n  track?: Track | null;\n  volume: number;\n  playbackRate: number;\n  contextRef: MutableRefObject<HTMLAudioElement | null>;\n}\n\ninterface TrackTimingReturn {\n  audioRef: MutableRefObject<HTMLAudioElement | null>;\n  play: () => void;\n  pause: () => void;\n  seek: (sec: number) => void;\n  current: number;\n  duration: number;\n  elapsed: string;\n  total: string;\n  interactable: boolean;\n  title: string;\n  artist: string;\n  cover: string;\n}\n\nexport function useTrackTiming({\n  track,\n  volume,\n  playbackRate,\n  contextRef,\n}: Opts): TrackTimingReturn {\n  const [current, setCurrent] = useState(0);\n  const [duration, setDuration] = useState(track?.durationSec ?? 0);\n  const { audioRef, play, pause, seek, setVolume, setPlaybackRate } = useAudioPlayer({\n    src: track?.src,\n    defaultDuration: track?.durationSec,\n    onTimeUpdate: setCurrent,\n    onLoadedMetadata: setDuration,\n  });\n  useEffect(() => {\n    contextRef.current = audioRef.current;\n  }, [contextRef, audioRef]);\n  useEffect(() => {\n    setCurrent(0);\n    setDuration(track?.durationSec ?? 0);\n  }, [track?.src, track?.durationSec]);\n  useEffect(() => {\n    setVolume(volume);\n  }, [volume, setVolume]);\n  useEffect(() => {\n    setPlaybackRate(playbackRate);\n  }, [playbackRate, setPlaybackRate]);\n  const elapsed = useMemo(() => mmss(current), [current]);\n  const total = useMemo(() => mmss(duration || 0), [duration]);\n  const title = track?.title ?? 'No track selected';\n  const artist = track?.artist ?? '';\n  const cover =\n    track?.coverUrl ||\n    \"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='96' height='96'><rect width='100%' height='100%' rx='12' ry='12' fill='%23e5e7eb'/><text x='50%' y='52%' dominant-baseline='middle' text-anchor='middle' font-family='Inter, system-ui, sans-serif' font-size='12' fill='%239ca3af'>No cover</text></svg>\";\n  const interactable = Boolean(track?.src);\n  return {\n    audioRef,\n    play,\n    pause,\n    seek,\n    current,\n    duration,\n    elapsed,\n    total,\n    interactable,\n    title,\n    artist,\n    cover,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/layouts/DesktopPlayerLayout.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":61,"fix":{"range":[205,232],"text":"@/app/shared/player/components/PlayerOptions"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":51,"fix":{"range":[261,283],"text":"@/app/shared/player/components/Timeline"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":53,"fix":{"range":[313,336],"text":"@/app/shared/player/components/TrackInfo"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":69,"fix":{"range":[374,405],"text":"@/app/shared/player/components/TransportControls"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'DesktopPlayerLayout' has too many lines (52). Maximum allowed is 50.","line":29,"column":47,"nodeType":"FunctionExpression","messageId":"exceed","endLine":83,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import React from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { Button } from '@/app/shared/ui/Button';\nimport { iconClasses } from '@/lib/responsive';\n\nimport { PlayerOptions } from '../components/PlayerOptions';\nimport { Timeline } from '../components/Timeline';\nimport { TrackInfo } from '../components/TrackInfo';\nimport { TransportControls } from '../components/TransportControls';\n\ninterface DesktopPlayerLayoutProps {\n  cover: string;\n  title: string;\n  artist: string;\n  current: number;\n  duration: number;\n  elapsed: string;\n  total: string;\n  interactable: boolean;\n  isPlaying: boolean;\n  togglePlay: () => void;\n  setSeek: (sec: number) => void;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  closePlayer: () => void;\n}\n\nexport const DesktopPlayerLayout = React.memo(function DesktopPlayerLayout({\n  cover,\n  title,\n  artist,\n  current,\n  duration,\n  elapsed,\n  total,\n  interactable,\n  isPlaying,\n  togglePlay,\n  setSeek,\n  onNext,\n  onPrev,\n  closePlayer,\n}: DesktopPlayerLayoutProps): React.JSX.Element {\n  return (\n    <>\n      {/* Left media block */}\n      <TrackInfo cover={cover} title={title} artist={artist} />\n\n      {/* Transport controls */}\n      <TransportControls\n        isPlaying={isPlaying}\n        interactable={interactable}\n        onPrev={onPrev}\n        onNext={onNext}\n        togglePlay={togglePlay}\n      />\n\n      {/* Timeline & Time Labels */}\n      <Timeline\n        current={current}\n        duration={duration}\n        setSeek={setSeek}\n        interactable={interactable}\n        elapsed={elapsed}\n        total={total}\n      />\n\n      {/* Utilities */}\n      <div className=\"flex items-center gap-2\">\n        <PlayerOptions />\n        <Button\n          variant=\"icon-round\"\n          size=\"icon-round\"\n          aria-label=\"Close player\"\n          onClick={closePlayer}\n        >\n          <CloseIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n        </Button>\n      </div>\n    </>\n  );\n});\n\nexport type { DesktopPlayerLayoutProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/layouts/MobilePlayerLayout.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":59,"fix":{"range":[249,275],"text":"@/app/shared/player/components/SpeedControl"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":51,"fix":{"range":[304,326],"text":"@/app/shared/player/components/Timeline"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":69,"fix":{"range":[364,395],"text":"@/app/shared/player/components/TransportControls"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'MobilePlayerLayout' has too many lines (81). Maximum allowed is 50.","line":30,"column":46,"nodeType":"FunctionExpression","messageId":"exceed","endLine":112,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import Image from 'next/image';\nimport React from 'react';\n\nimport { CloseIcon, SlidersIcon } from '@/app/shared/icons';\nimport { Button } from '@/app/shared/ui/Button';\nimport { iconClasses } from '@/lib/responsive';\n\nimport { SpeedControl } from '../components/SpeedControl';\nimport { Timeline } from '../components/Timeline';\nimport { TransportControls } from '../components/TransportControls';\n\ninterface MobilePlayerLayoutProps {\n  cover: string;\n  title: string;\n  artist: string;\n  current: number;\n  duration: number;\n  elapsed: string;\n  total: string;\n  interactable: boolean;\n  isPlaying: boolean;\n  togglePlay: () => void;\n  setSeek: (sec: number) => void;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  setMobileOptionsOpen: () => void;\n  closePlayer: () => void;\n}\n\nexport const MobilePlayerLayout = React.memo(function MobilePlayerLayout({\n  cover,\n  title,\n  artist,\n  current,\n  duration,\n  elapsed,\n  total,\n  interactable,\n  isPlaying,\n  togglePlay,\n  setSeek,\n  onNext,\n  onPrev,\n  setMobileOptionsOpen,\n  closePlayer,\n}: MobilePlayerLayoutProps): React.JSX.Element {\n  return (\n    <>\n      {/* Top row uses 3-column grid to keep transport perfectly centered */}\n      <div className=\"grid grid-cols-[1fr_auto_1fr] items-center gap-2\">\n        <div className=\"flex items-center gap-2 min-w-0\">\n          <div className=\"hidden min-[400px]:block flex-shrink-0\">\n            <Image\n              src={cover}\n              alt=\"cover\"\n              width={32}\n              height={32}\n              className=\"h-8 w-8 rounded-full shadow-sm object-cover\"\n              onError={(e) => {\n                e.currentTarget.src =\n                  \"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32'><rect width='100%' height='100%' rx='6' ry='6' fill='%23e5e7eb'/></svg>\";\n              }}\n            />\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"text-sm font-semibold tracking-[-0.01em] truncate text-foreground\">\n              {title}\n            </div>\n            <div className=\"text-xs -mt-0.5 truncate text-muted\">{artist}</div>\n          </div>\n        </div>\n        <TransportControls\n          /* keep controls visually centered */\n\n          isPlaying={isPlaying}\n          interactable={interactable}\n          onPrev={onPrev}\n          onNext={onNext}\n          togglePlay={togglePlay}\n        />\n        <div className=\"flex items-center gap-1 justify-self-end\">\n          <SpeedControl />\n          <Button\n            variant=\"icon-round\"\n            size=\"icon-round\"\n            className=\"shrink-0\"\n            aria-label=\"Options\"\n            onClick={setMobileOptionsOpen}\n          >\n            <SlidersIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n          </Button>\n          <Button\n            variant=\"icon-round\"\n            size=\"icon-round\"\n            aria-label=\"Close player\"\n            onClick={closePlayer}\n          >\n            <CloseIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n          </Button>\n        </div>\n      </div>\n      <Timeline\n        current={current}\n        duration={duration}\n        setSeek={setSeek}\n        interactable={interactable}\n        elapsed={elapsed}\n        total={total}\n      />\n    </>\n  );\n});\n\nexport type { MobilePlayerLayoutProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceItem.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\n\ninterface ResourceItemProps<T extends Resource> {\n  item: T;\n  isSelected: boolean;\n  onToggle: (id: number) => void;\n  style?: React.CSSProperties;\n}\n\nexport const ResourceItem = <T extends Resource>({\n  item,\n  isSelected,\n  onToggle,\n  style,\n}: ResourceItemProps<T>) => {\n  const handleClick = () => {\n    onToggle(item.id);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      handleClick();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      role=\"button\"\n      tabIndex={0}\n      className={`flex items-center justify-between px-4 py-2.5 min-h-touch rounded-lg cursor-pointer transition-all duration-200 focus:outline-none focus-visible:outline-none outline-none border-0 focus:border-0 active:outline-none ${\n        isSelected\n          ? 'bg-accent/20 border border-accent/30'\n          : 'bg-surface border border-border hover:bg-interactive'\n      }`}\n      style={style}\n    >\n      <div className=\"flex-1 min-w-0 pr-3\">\n        <p\n          className={`font-medium text-sm leading-tight truncate ${\n            isSelected ? 'text-accent' : 'text-foreground'\n          }`}\n          title={item.name}\n        >\n          {item.name}\n        </p>\n      </div>\n      <div className=\"flex-shrink-0 w-6 h-6 flex items-center justify-center\">\n        {isSelected && <CheckIcon className=\"h-5 w-5 text-accent\" />}\n      </div>\n    </div>\n  );\n};\n\nconst CheckIcon = ({ className }: { className?: string }): React.JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={className}\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":31,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\n\nimport { ResourceItem } from './ResourceItem';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\n\ninterface ResourceListProps<T extends Resource> {\n  resources: T[];\n  rowHeight: number;\n  selectedIds: Set<number>;\n  onToggle: (id: number) => void;\n  height: number;\n}\n\nexport const ResourceList = <T extends Resource>({\n  resources,\n  rowHeight,\n  selectedIds,\n  onToggle,\n  height,\n}: ResourceListProps<T>) => {\n  const itemCount = resources.length;\n\n  const Row = ({ index, style }: ListChildComponentProps) => {\n    const item = resources[index];\n    return (\n      <div style={style}>\n        <div className=\"px-1 pb-2\">\n          <ResourceItem\n            key={item.id}\n            item={item}\n            isSelected={selectedIds.has(item.id)}\n            onToggle={onToggle}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <List\n      height={Math.min(height, itemCount * rowHeight)}\n      width=\"100%\"\n      itemCount={itemCount}\n      itemSize={rowHeight}\n    >\n      {Row}\n    </List>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceTabs.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":18,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":68,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\nimport { ChevronLeftIcon, ChevronRightIcon } from '@/app/shared/icons';\n\ninterface ResourceTabsProps {\n  languages: string[];\n  activeFilter: string;\n  onTabClick: (lang: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement | null>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n  className?: string;\n}\n\nexport const ResourceTabs = ({\n  languages,\n  activeFilter,\n  onTabClick,\n  tabsContainerRef,\n  canScrollLeft,\n  canScrollRight,\n  scrollTabsLeft,\n  scrollTabsRight,\n  className = '',\n}: ResourceTabsProps): React.JSX.Element => (\n  <div className={`flex items-center overflow-hidden ${className}`}>\n    <button\n      onClick={scrollTabsLeft}\n      disabled={!canScrollLeft}\n      className={`p-1 rounded-full mr-2 transition-colors ${\n        canScrollLeft\n          ? 'text-muted hover:text-foreground hover:bg-interactive-hover'\n          : 'text-muted cursor-not-allowed'\n      }`}\n    >\n      <ChevronLeftIcon size={20} />\n    </button>\n    <div ref={tabsContainerRef} className=\"flex items-center space-x-2 overflow-hidden flex-1\">\n      {languages.map((lang) => (\n        <button\n          key={lang}\n          onClick={() => onTabClick(lang)}\n          className={`flex-shrink-0 px-3 py-1 text-sm font-semibold border-b-2 transition-colors flex items-center justify-center ${\n            activeFilter === lang\n              ? 'border-accent text-accent'\n              : 'border-transparent text-muted hover:text-foreground hover:border-border'\n          }`}\n        >\n          {lang}\n        </button>\n      ))}\n    </div>\n    <button\n      onClick={scrollTabsRight}\n      disabled={!canScrollRight}\n      className={`p-1 rounded-full ml-2 transition-colors ${\n        canScrollRight\n          ? 'text-muted hover:text-foreground hover:bg-interactive-hover'\n          : 'text-muted cursor-not-allowed'\n      }`}\n    >\n      <ChevronRightIcon size={20} />\n    </button>\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/components/ResourcePanelHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/hooks/useListHeight.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\nexport const useListHeight = (isOpen: boolean) => {\n  const listContainerRef = useRef<HTMLDivElement>(null);\n  const [listHeight, setListHeight] = useState(0);\n\n  useEffect(() => {\n    const element = listContainerRef.current;\n    if (!element || !isOpen) return;\n\n    const updateHeight = () => {\n      const rect = element.getBoundingClientRect();\n      const fallback = window.innerHeight - rect.top;\n      setListHeight(rect.height || fallback);\n    };\n\n    updateHeight();\n\n    const ResizeObserverConstructor =\n      typeof ResizeObserver !== 'undefined' ? ResizeObserver : ResizeObserverPolyfill;\n\n    if (ResizeObserverConstructor) {\n      const observer = new ResizeObserverConstructor((entries) => {\n        for (const entry of entries) {\n          const rect = entry.target.getBoundingClientRect();\n          const fallback = window.innerHeight - rect.top;\n          setListHeight(entry.contentRect.height || fallback);\n        }\n      });\n      observer.observe(element);\n      return () => observer.disconnect();\n    }\n\n    window.addEventListener('resize', updateHeight);\n    return () => window.removeEventListener('resize', updateHeight);\n  }, [isOpen]);\n\n  return {\n    listContainerRef,\n    listHeight,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Juz.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { JuzNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getSurahByPage, JUZ_START_PAGES } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface JuzSummary {\n  number: number;\n  name: string;\n  surahRange: string;\n}\n\ninterface Props {\n  juzs: JuzSummary[];\n  chapters: Chapter[];\n  selectedJuzId: number | null;\n  setSelectedJuzId: (id: number) => void;\n  setSelectedPageId: (id: number) => void;\n  setSelectedSurahId: (id: number) => void;\n  rememberScroll: () => void;\n}\n\nexport const Juz = ({\n  juzs,\n  chapters,\n  selectedJuzId,\n  setSelectedJuzId,\n  setSelectedPageId,\n  setSelectedSurahId,\n  rememberScroll,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {juzs.map((juz) => {\n      const isActive = juz.number === selectedJuzId;\n      return (\n        <li key={juz.number}>\n          <JuzNavigationCard\n            href={`/juz/${juz.number}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: juz.number,\n              title: `Juz ${juz.number}`,\n              subtitle: juz.surahRange,\n            }}\n            onNavigate={() => {\n              setSelectedJuzId(juz.number);\n              const page = JUZ_START_PAGES[juz.number - 1];\n              setSelectedPageId(page);\n              const chap = getSurahByPage(page, chapters);\n              if (chap) setSelectedSurahId(chap.id);\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PageNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getJuzByPage, getSurahByPage } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Props {\n  pages: number[];\n  chapters: Chapter[];\n  selectedPageId: number | null;\n  setSelectedPageId: (id: number) => void;\n  setSelectedJuzId: (id: number) => void;\n  setSelectedSurahId: (id: number) => void;\n  rememberScroll: () => void;\n}\n\nexport const Page = ({\n  pages,\n  chapters,\n  selectedPageId,\n  setSelectedPageId,\n  setSelectedJuzId,\n  setSelectedSurahId,\n  rememberScroll,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {pages.map((p) => {\n      const isActive = p === selectedPageId;\n      return (\n        <li key={p}>\n          <PageNavigationCard\n            href={`/page/${p}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: p,\n              title: `Page ${p}`,\n            }}\n            onNavigate={() => {\n              setSelectedPageId(p);\n              setSelectedJuzId(getJuzByPage(p));\n              const chap = getSurahByPage(p, chapters);\n              if (chap) setSelectedSurahId(chap.id);\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Surah.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SurahNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getJuzByPage } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Props {\n  chapters: Chapter[];\n  selectedSurahId: number | null;\n  setSelectedSurahId: (id: number) => void;\n  setSelectedPageId: (id: number) => void;\n  setSelectedJuzId: (id: number) => void;\n  rememberScroll: () => void;\n  isTafsirPath: boolean;\n}\n\nexport const Surah = ({\n  chapters,\n  selectedSurahId,\n  setSelectedSurahId,\n  setSelectedPageId,\n  setSelectedJuzId,\n  rememberScroll,\n  isTafsirPath,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {chapters.map((chapter) => {\n      const isActive = chapter.id === selectedSurahId;\n      return (\n        <li key={chapter.id}>\n          <SurahNavigationCard\n            href={isTafsirPath ? `/tafsir/${chapter.id}/1` : `/surah/${chapter.id}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: chapter.id,\n              title: chapter.name_simple,\n              subtitle: `${chapter.revelation_place.charAt(0).toUpperCase() + chapter.revelation_place.slice(1)} • ${chapter.verses_count} verses`,\n              arabic: chapter.name_arabic,\n            }}\n            onNavigate={() => {\n              setSelectedSurahId(chapter.id);\n              const firstPage = chapter.pages?.[0] ?? 1;\n              setSelectedPageId(firstPage);\n              setSelectedJuzId(getJuzByPage(firstPage));\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/components/SidebarTabs.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":92,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface Tab {\n  key: 'Surah' | 'Juz' | 'Page';\n  label: string;\n}\n\ninterface Props {\n  tabs: Tab[];\n  activeTab: 'Surah' | 'Juz' | 'Page';\n  setActiveTab: (tab: 'Surah' | 'Juz' | 'Page') => void;\n  prepareForTabSwitch: (tab: 'Surah' | 'Juz' | 'Page') => void;\n}\n\nexport const SidebarTabs = ({ tabs, activeTab, setActiveTab, prepareForTabSwitch }: Props) => (\n  <div className=\"flex items-center p-1 rounded-full bg-interactive border border-border\">\n    {tabs.map(({ key, label }) => (\n      <button\n        key={key}\n        onClick={() => {\n          prepareForTabSwitch(key);\n          setActiveTab(key);\n        }}\n        className={`w-1/3 px-4 py-2 text-sm font-semibold rounded-full transition-colors ${\n          activeTab === key\n            ? 'bg-surface text-foreground shadow'\n            : 'text-muted hover:text-foreground hover:bg-surface/30'\n        }`}\n      >\n        {label}\n      </button>\n    ))}\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/hooks/useSelectionSync.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":19,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\nimport { getJuzByPage, getSurahByPage, JUZ_START_PAGES } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Args {\n  currentSurahId?: number;\n  currentJuzId?: number;\n  currentPageId?: number;\n  chapters: Chapter[];\n}\n\nexport const useSelectionSync = ({\n  currentSurahId,\n  currentJuzId,\n  currentPageId,\n  chapters,\n}: Args) => {\n  const [selectedSurahId, setSelectedSurahId] = useState<number | null>(currentSurahId ?? null);\n  const [selectedJuzId, setSelectedJuzId] = useState<number | null>(currentJuzId ?? null);\n  const [selectedPageId, setSelectedPageId] = useState<number | null>(currentPageId ?? null);\n\n  useEffect(() => {\n    if (currentSurahId) {\n      setSelectedSurahId(currentSurahId);\n      const chapter = chapters.find((c) => c.id === currentSurahId);\n      const page = chapter?.pages?.[0] ?? 1;\n      setSelectedPageId(page);\n      setSelectedJuzId(getJuzByPage(page));\n    } else if (currentJuzId) {\n      setSelectedJuzId(currentJuzId);\n      const page = JUZ_START_PAGES[currentJuzId - 1];\n      setSelectedPageId(page);\n      const chapter = getSurahByPage(page, chapters);\n      if (chapter) setSelectedSurahId(chapter.id);\n    } else if (currentPageId) {\n      setSelectedPageId(currentPageId);\n      const page = currentPageId;\n      setSelectedJuzId(getJuzByPage(page));\n      const chapter = getSurahByPage(page, chapters);\n      if (chapter) setSelectedSurahId(chapter.id);\n    }\n  }, [currentSurahId, currentJuzId, currentPageId, chapters]);\n\n  return {\n    selectedSurahId,\n    setSelectedSurahId,\n    selectedJuzId,\n    setSelectedJuzId,\n    selectedPageId,\n    setSelectedPageId,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/useSidebarScroll.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (62). Maximum allowed is 50.","line":16,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":76,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef } from 'react';\n\nimport { useSidebar } from '@/app/providers/SidebarContext';\nimport { useScrollCentering } from '@/lib/hooks/useScrollCentering';\nimport { useScrollPersistence } from '@/lib/hooks/useScrollPersistence';\n\ntype TabKey = 'Surah' | 'Juz' | 'Page';\n\ninterface Options {\n  activeTab: TabKey;\n  selectedSurahId: number | null;\n  selectedJuzId: number | null;\n  selectedPageId: number | null;\n}\n\nexport const useSidebarScroll = ({\n  activeTab,\n  selectedSurahId,\n  selectedJuzId,\n  selectedPageId,\n}: Options) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const {\n    surahScrollTop,\n    setSurahScrollTop,\n    juzScrollTop,\n    setJuzScrollTop,\n    pageScrollTop,\n    setPageScrollTop,\n  } = useSidebar();\n\n  const {\n    handleScroll,\n    prepareForTabSwitch: persistencePrepare,\n    rememberScroll: persistRememberScroll,\n  } = useScrollPersistence<TabKey>({\n    scrollRef,\n    activeTab,\n    scrollTops: {\n      Surah: surahScrollTop,\n      Juz: juzScrollTop,\n      Page: pageScrollTop,\n    },\n    setScrollTops: {\n      Surah: setSurahScrollTop,\n      Juz: setJuzScrollTop,\n      Page: setPageScrollTop,\n    },\n    storageKeys: {\n      Surah: 'surahScrollTop',\n      Juz: 'juzScrollTop',\n      Page: 'pageScrollTop',\n    },\n  });\n\n  const { skipNextCentering, prepareForTabSwitch: centeringPrepare } = useScrollCentering<TabKey>({\n    scrollRef,\n    activeTab,\n    selectedIds: {\n      Surah: selectedSurahId,\n      Juz: selectedJuzId,\n      Page: selectedPageId,\n    },\n    scrollTops: {\n      Surah: surahScrollTop,\n      Juz: juzScrollTop,\n      Page: pageScrollTop,\n    },\n  });\n\n  const rememberScroll = (tab: TabKey) => {\n    persistRememberScroll(tab);\n    skipNextCentering(tab);\n  };\n\n  const prepareForTabSwitch = (nextTab: TabKey) => {\n    persistencePrepare();\n    centeringPrepare(nextTab);\n  };\n\n  return { scrollRef, handleScroll, prepareForTabSwitch, rememberScroll };\n};\n\nexport type { TabKey };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/BaseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Button.stories.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":51,"fix":{"range":[56,83],"text":"@/.storybook/preview"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Button } from './Button';\nimport preview from '../../../.storybook/preview';\n\nimport type { Meta, StoryObj } from '@storybook/react';\n\nconst meta: Meta<typeof Button> = {\n  title: 'Shared/UI/Button',\n  component: Button,\n  decorators: [...(preview.decorators || [])],\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Primary: Story = {\n  args: {\n    children: 'Primary Button',\n    variant: 'primary',\n    size: 'md',\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/GlassCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":40,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":101,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React from 'react';\n\nimport { cn } from '@/lib/utils/cn';\n\nexport const GLASS_CARD_VARIANTS = {\n  surface: 'bg-surface-glass/60',\n  primary: 'bg-surface/60',\n  input: 'bg-input-background backdrop-blur-xl bg-surface-glass/60',\n} as const;\n\nexport const GLASS_CARD_SIZES = {\n  compact: 'p-3',\n  comfortable: 'p-4',\n  spacious: 'p-4 sm:p-5',\n  large: 'p-4 sm:p-6 md:p-8',\n} as const;\n\nexport const GLASS_CARD_RADIUS = {\n  lg: 'rounded-lg',\n  xl: 'rounded-xl',\n  '2xl': 'rounded-2xl',\n} as const;\n\nexport interface GlassCardProps {\n  children: React.ReactNode;\n  variant?: keyof typeof GLASS_CARD_VARIANTS;\n  size?: keyof typeof GLASS_CARD_SIZES;\n  radius?: keyof typeof GLASS_CARD_RADIUS;\n  className?: string;\n  href?: string;\n  onClick?: () => void;\n  asChild?: boolean;\n  animate?: boolean;\n}\n\nexport const GlassCard = React.forwardRef<HTMLDivElement | HTMLAnchorElement, GlassCardProps>(\n  (\n    {\n      children,\n      variant = 'surface',\n      size = 'comfortable',\n      radius = 'xl',\n      className,\n      href,\n      onClick,\n      animate = true,\n      ...props\n    },\n    ref\n  ) => {\n    const baseClasses = cn(\n      'backdrop-blur-xl shadow-lg hover:shadow-xl transition-all duration-300',\n      animate && 'content-visibility-auto animate-fade-in-up',\n      GLASS_CARD_VARIANTS[variant],\n      GLASS_CARD_SIZES[size],\n      GLASS_CARD_RADIUS[radius],\n      className\n    );\n\n    // If href is provided, render as Link\n    if (href) {\n      return (\n        <Link\n          ref={ref as React.ForwardedRef<HTMLAnchorElement>}\n          href={href}\n          className={cn('group', baseClasses)}\n          {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}\n        >\n          {children}\n        </Link>\n      );\n    }\n\n    // If onClick is provided, render as button\n    if (onClick) {\n      return (\n        <button\n          ref={ref as React.ForwardedRef<HTMLButtonElement>}\n          onClick={onClick}\n          className={cn('group text-left', baseClasses)}\n          {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\n        >\n          {children}\n        </button>\n      );\n    }\n\n    // Default: render as div\n    return (\n      <div\n        ref={ref as React.ForwardedRef<HTMLDivElement>}\n        className={cn('group', baseClasses)}\n        {...(props as React.HTMLAttributes<HTMLDivElement>)}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nGlassCard.displayName = 'GlassCard';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/NumberBadge.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\ninterface NumberBadgeProps {\n  number: string | number;\n  isActive?: boolean;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst sizeClasses = {\n  sm: 'w-8 h-8 text-sm',\n  md: 'w-12 h-12 text-lg',\n  lg: 'w-16 h-16 text-xl',\n};\n\nexport const NumberBadge = ({\n  number,\n  isActive = false,\n  className,\n  size = 'md',\n}: NumberBadgeProps) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center rounded-xl font-bold transition-colors',\n        sizeClasses[size],\n        isActive\n          ? 'bg-number-badge text-accent'\n          : 'bg-number-badge text-accent group-hover:bg-number-badge-hover',\n        className\n      )}\n    >\n      {number}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Panel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Panel' has too many lines (99). Maximum allowed is 50.","line":31,"column":27,"nodeType":"FunctionExpression","messageId":"exceed","endLine":138,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'Panel' has a complexity of 25. Maximum allowed is 10.","line":31,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":138,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { memo } from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\nimport { Button } from './Button';\n\nexport const PANEL_VARIANTS = {\n  sidebar: 'fixed top-0 bottom-0 right-0 w-80 bg-surface shadow-lg pt-safe pb-safe',\n  modal: 'fixed inset-4 bg-surface rounded-lg shadow-xl max-w-2xl max-h-96 mx-auto my-auto',\n  'modal-center': 'relative w-full max-w-md rounded-lg bg-surface shadow-xl',\n  'bottom-sheet':\n    'fixed bottom-0 left-0 right-0 bg-surface rounded-t-3xl shadow-2xl max-h-[90dvh] pb-safe',\n  overlay: 'fixed top-16 right-4 w-72 bg-surface rounded-lg shadow-lg border border-border',\n  fullscreen: 'fixed inset-0 bg-surface pt-safe pb-safe',\n} as const;\n\nexport interface PanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  variant?: keyof typeof PANEL_VARIANTS | string;\n  title?: string;\n  children: React.ReactNode;\n  className?: string;\n  showCloseButton?: boolean;\n  closeOnOverlayClick?: boolean;\n}\n\nexport const Panel = memo(function Panel({\n  isOpen,\n  onClose,\n  variant = 'sidebar',\n  title,\n  children,\n  className,\n  showCloseButton = true,\n  closeOnOverlayClick = true,\n}: PanelProps): React.JSX.Element {\n  if (!isOpen) return null;\n\n  const variantClass =\n    variant in PANEL_VARIANTS ? PANEL_VARIANTS[variant as keyof typeof PANEL_VARIANTS] : variant;\n\n  const showOverlay =\n    variant === 'sidebar' ||\n    variant === 'modal' ||\n    variant === 'modal-center' ||\n    variant === 'bottom-sheet' ||\n    variant === 'fullscreen';\n\n  // Modal center variant has different structure\n  if (variant === 'modal-center') {\n    return (\n      <div\n        className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-40 flex items-center justify-center\"\n        onClick={closeOnOverlayClick ? onClose : undefined}\n        onKeyDown={(e) => {\n          if (closeOnOverlayClick && (e.key === 'Escape' || e.key === 'Enter')) {\n            onClose();\n          }\n        }}\n        role=\"button\"\n        tabIndex={closeOnOverlayClick ? 0 : -1}\n        aria-label=\"Close panel\"\n      >\n        <div\n          className={cn('z-50 text-foreground p-6', variantClass, className)}\n          onPointerDown={(e) => e.stopPropagation()}\n          role=\"dialog\"\n          aria-modal=\"true\"\n        >\n          {/* Header */}\n          {(title || showCloseButton) && (\n            <header className=\"flex items-center justify-between mb-4\">\n              {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}\n              {showCloseButton && (\n                <Button variant=\"ghost\" size=\"icon\" onClick={onClose} aria-label=\"Close panel\">\n                  <CloseIcon size={18} />\n                </Button>\n              )}\n            </header>\n          )}\n\n          {/* Content */}\n          <div className=\"flex-1\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Standard panel variants\n  return (\n    <>\n      {/* Overlay */}\n      {showOverlay && (\n        <div\n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-40\"\n          onClick={closeOnOverlayClick ? onClose : undefined}\n          onKeyDown={(e) => {\n            if (closeOnOverlayClick && (e.key === 'Escape' || e.key === 'Enter')) {\n              onClose();\n            }\n          }}\n          role=\"button\"\n          tabIndex={closeOnOverlayClick ? 0 : -1}\n          aria-label=\"Close panel\"\n        />\n      )}\n\n      {/* Panel */}\n      <div\n        className={cn(\n          'z-50 text-foreground transition-transform duration-300',\n          variantClass,\n          isOpen ? 'translate-x-0' : 'translate-x-full',\n          className\n        )}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <header className=\"flex items-center justify-between p-4 border-b border-border\">\n            {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}\n            {showCloseButton && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onClose} aria-label=\"Close panel\">\n                <CloseIcon size={18} />\n              </Button>\n            )}\n          </header>\n        )}\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">{children}</div>\n      </div>\n    </>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ResourcePanel.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":57,"fix":{"range":[128,153],"text":"@/app/shared/components/SearchInput"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":38,"fix":{"range":[183,191],"text":"@/app/shared/icons"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":38,"fix":{"range":[219,229],"text":"@/app/shared/Spinner"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ResourcePanel' has too many lines (94). Maximum allowed is 50.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":128,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":29,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":56,"column":86,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":56,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":113,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":113,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\n\nimport { Panel } from './Panel';\nimport { SearchInput } from '../components/SearchInput';\nimport { CheckIcon } from '../icons';\nimport { Spinner } from '../Spinner';\n\nimport type { ResourceSelectionProps } from '@/types/components';\n\ninterface ResourceItem {\n  id: string | number;\n  name: string;\n  description?: string;\n  meta?: string;\n}\n\ninterface ResourcePanelProps<T extends ResourceItem> extends ResourceSelectionProps<T> {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  emptyStateMessage?: string;\n  searchPlaceholder?: string;\n  variant?: 'sidebar' | 'modal';\n  renderItem?: (item: T, isSelected: boolean, onSelect: () => void) => React.ReactNode;\n}\n\nexport function ResourcePanel<T extends ResourceItem>({\n  isOpen,\n  onClose,\n  title,\n  items,\n  selectedId,\n  onSelect,\n  loading = false,\n  emptyStateMessage = 'No items found',\n  searchPlaceholder = 'Search...',\n  variant = 'sidebar',\n  renderItem,\n}: ResourcePanelProps<T>) {\n  const [internalSearchTerm, setInternalSearchTerm] = useState('');\n\n  const filteredItems = useMemo(() => {\n    if (!internalSearchTerm.trim()) return items;\n\n    const searchLower = internalSearchTerm.toLowerCase().trim();\n    return items.filter(\n      (item) =>\n        item.name.toLowerCase().includes(searchLower) ||\n        item.description?.toLowerCase().includes(searchLower) ||\n        item.meta?.toLowerCase().includes(searchLower)\n    );\n  }, [items, internalSearchTerm]);\n\n  const defaultRenderItem = (item: T, isSelected: boolean, onSelectItem: () => void) => (\n    <button\n      key={item.id}\n      onClick={onSelectItem}\n      className={`w-full text-left p-3 rounded-lg transition-colors ${\n        isSelected\n          ? 'bg-accent/20 text-accent border border-accent/30'\n          : 'hover:bg-interactive/50 text-foreground'\n      }`}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-medium truncate\">{item.name}</h4>\n          {item.description && (\n            <p className=\"text-sm text-muted mt-1 line-clamp-2\">{item.description}</p>\n          )}\n          {item.meta && <p className=\"text-xs text-muted mt-1\">{item.meta}</p>}\n        </div>\n        {isSelected && <CheckIcon size={18} className=\"text-accent ml-2 flex-shrink-0\" />}\n      </div>\n    </button>\n  );\n\n  return (\n    <Panel\n      isOpen={isOpen}\n      onClose={onClose}\n      title={title}\n      variant={variant}\n      className=\"flex flex-col h-full\"\n    >\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        {/* Search */}\n        <div className=\"p-4 pb-2 border-b border-border\">\n          <SearchInput\n            value={internalSearchTerm}\n            onChange={setInternalSearchTerm}\n            placeholder={searchPlaceholder}\n            variant=\"panel\"\n            size=\"sm\"\n          />\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-4\">\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <Spinner className=\"h-6 w-6\" />\n            </div>\n          ) : filteredItems.length === 0 ? (\n            <div className=\"text-center py-8 text-muted\">\n              <p>{emptyStateMessage}</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {filteredItems.map((item) => {\n                const isSelected = item.id === selectedId;\n                const handleSelect = () => {\n                  onSelect(item.id);\n                  onClose();\n                };\n\n                return renderItem\n                  ? renderItem(item, isSelected, handleSelect)\n                  : defaultRenderItem(item, isSelected, handleSelect);\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </Panel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SearchField.stories.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":51,"fix":{"range":[101,128],"text":"@/.storybook/preview"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useState } from 'react';\n\nimport { SearchField } from './SearchField';\nimport preview from '../../../.storybook/preview';\n\nimport type { Meta, StoryObj } from '@storybook/react';\n\nconst meta: Meta<typeof SearchField> = {\n  title: 'Shared/UI/SearchField',\n  component: SearchField,\n  decorators: [...(preview.decorators || [])],\n};\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nfunction DefaultComponent(args: React.ComponentProps<typeof SearchField>): React.JSX.Element {\n  const [term, setTerm] = useState('');\n  return <SearchField {...args} searchTerm={term} setSearchTerm={setTerm} />;\n}\n\nexport const Default: Story = {\n  render: (args) => <DefaultComponent {...args} />,\n  args: {\n    placeholder: 'Search...',\n  },\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SearchField.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":57,"fix":{"range":[72,97],"text":"@/app/shared/components/SearchInput"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":89,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":91},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":60,"column":86,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":64,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport React from 'react';\n\nimport { SearchInput } from '../components/SearchInput';\n\nimport type { SearchProps } from '@/types/components';\n\ninterface SearchFieldProps extends SearchProps {\n  variant?: 'main' | 'default' | 'glass' | 'header' | 'panel';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  label?: string;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Generic search field component with optional label\n * Replaces simple search wrapper components throughout the app\n */\nexport const SearchField = ({\n  searchTerm,\n  setSearchTerm,\n  placeholder = 'Search...',\n  variant = 'default',\n  size = 'md',\n  className = '',\n  label,\n  onKeyDown,\n}: SearchFieldProps): React.JSX.Element => (\n  <div className={className}>\n    {label && (\n      <h2 className=\"text-sm font-semibold px-2 mb-3 text-muted uppercase tracking-wide\">\n        {label}\n      </h2>\n    )}\n    <SearchInput\n      value={searchTerm}\n      onChange={setSearchTerm}\n      placeholder={placeholder}\n      variant={variant}\n      size={size}\n      onKeyDown={onKeyDown}\n    />\n  </div>\n);\n\n// Predefined search fields for common use cases\nexport const FontSearchField = (props: Omit<SearchFieldProps, 'placeholder' | 'label'>) => (\n  <SearchField\n    {...props}\n    label=\"SEARCH FONTS\"\n    placeholder=\"Search for a font...\"\n    variant=\"panel\"\n    size=\"sm\"\n    className=\"px-2\"\n  />\n);\n\nexport const TranslationSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search by name or style...\" variant=\"panel\" />\n);\n\nexport const TafsirSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search tafsirs (exact match)...\" variant=\"panel\" />\n);\n\nexport const BookmarkSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search Bookmarks\" size=\"sm\" className=\"w-48\" />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SettingsPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SettingsPanel' has too many lines (72). Maximum allowed is 50.","line":39,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":111,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { memo } from 'react';\n\nimport { cn } from '@/lib/utils/cn';\n\nimport { Panel } from './Panel';\nimport {\n  SettingItem,\n  ToggleSetting,\n  SelectSetting,\n  RangeSetting,\n  type SettingItemProps,\n  type ToggleSettingProps,\n  type SelectSettingProps,\n  type RangeSettingProps,\n} from './settings';\n\nimport type { SettingsPanelProps } from '@/types/components';\n\ntype SettingsPanelItem =\n  | ({ type: 'toggle' } & ToggleSettingProps)\n  | ({ type: 'select' } & SelectSettingProps)\n  | ({ type: 'range' } & RangeSettingProps)\n  | ({ type: 'item' } & SettingItemProps)\n  | { type: 'custom'; element: React.ReactNode };\n\ninterface SettingsSection {\n  title?: string;\n  items: SettingsPanelItem[];\n}\n\ninterface SettingsPanelComponentProps extends SettingsPanelProps {\n  sections?: SettingsSection[];\n  actions?: React.ReactNode[];\n  children?: React.ReactNode;\n}\n\nexport const SettingsPanel = memo(function SettingsPanel({\n  isOpen,\n  onClose,\n  title = 'Settings',\n  sections = [],\n  actions = [],\n  className,\n  children,\n}: SettingsPanelComponentProps): React.JSX.Element {\n  return (\n    <Panel\n      isOpen={isOpen}\n      onClose={onClose}\n      title={title}\n      variant=\"sidebar\"\n      className={cn('flex flex-col h-full', className)}\n    >\n      <div className=\"flex-1 overflow-y-auto\">\n        {sections.map((section, index) => (\n          <div key={index} className=\"mb-6\">\n            {section.title && (\n              <h3 className=\"px-4 py-2 text-sm font-semibold text-muted uppercase tracking-wider\">\n                {section.title}\n              </h3>\n            )}\n            <div className=\"bg-surface/50 rounded-lg mx-4 mb-4\">\n              {section.items.map((item, itemIndex) => {\n                switch (item.type) {\n                  case 'toggle': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <ToggleSetting key={itemIndex} {...props} />;\n                  }\n                  case 'select': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <SelectSetting key={itemIndex} {...props} />;\n                  }\n                  case 'range': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <RangeSetting key={itemIndex} {...props} />;\n                  }\n                  case 'item': {\n                    const { type: _unusedType, children: itemChildren, ...props } = item;\n                    void _unusedType;\n                    return (\n                      <SettingItem key={itemIndex} {...props}>\n                        {itemChildren}\n                      </SettingItem>\n                    );\n                  }\n                  case 'custom':\n                  default:\n                    return <div key={itemIndex}>{item.element}</div>;\n                }\n              })}\n            </div>\n          </div>\n        ))}\n        {children}\n      </div>\n\n      {actions.length > 0 && (\n        <div className=\"border-t border-border p-4 space-y-2\">\n          {actions.map((action, index) => (\n            <div key={index}>{action}</div>\n          ))}\n        </div>\n      )}\n    </Panel>\n  );\n});\n\nexport { SettingItem, ToggleSetting, SelectSetting, RangeSetting } from './settings';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SidebarCard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Link from 'next/link';\n\nimport { cn } from '@/lib/utils/cn';\n\ninterface SidebarCardProps {\n  href: string;\n  isActive?: boolean;\n  onClick?: () => void;\n  children: React.ReactNode;\n  className?: string;\n  scroll?: boolean;\n  'data-active'?: boolean;\n}\n\nexport const SidebarCard = ({\n  href,\n  isActive = false,\n  onClick,\n  children,\n  className,\n  scroll = false,\n  'data-active': dataActive,\n  ...props\n}: SidebarCardProps) => {\n  return (\n    <Link\n      href={href}\n      scroll={scroll}\n      data-active={dataActive}\n      onClick={onClick}\n      className={cn(\n        'group flex items-center p-4 gap-4 rounded-xl transition transform hover:scale-[1.02] h-[80px]',\n        isActive\n          ? 'bg-accent text-on-accent shadow-lg shadow-accent/30'\n          : 'bg-surface text-foreground shadow',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/TabToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ThemeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { SunIcon, MoonIcon } from '@/app/shared/icons';\n\ninterface ThemeSelectorProps {\n  className?: string;\n}\n\nexport const ThemeSelector = ({ className }: ThemeSelectorProps): React.JSX.Element => {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    const html = document.documentElement;\n    if (html.classList.contains('dark')) {\n      html.classList.remove('dark');\n      setTheme('light');\n    } else {\n      html.classList.add('dark');\n      setTheme('dark');\n    }\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={`p-2 bg-button-secondary/40 rounded-full hover:bg-button-secondary-hover/60 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent ${className || ''}`}\n      aria-label=\"Toggle Theme\"\n    >\n      {theme === 'dark' ? (\n        <SunIcon className=\"w-5 h-5 text-accent\" />\n      ) : (\n        <MoonIcon className=\"w-5 h-5 text-accent\" />\n      )}\n    </button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ThemeToggle.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (64). Maximum allowed is 50.","line":16,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":66,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { SunIcon, MoonIcon } from '@/app/shared/icons';\n\nimport { Button } from './Button';\n\ninterface ThemeToggleProps {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'tabs' | string;\n  size?: 'sm' | 'md' | 'lg' | 'icon';\n  className?: string;\n}\n\nexport const ThemeToggle = ({\n  variant = 'ghost',\n  className,\n}: ThemeToggleProps): React.JSX.Element => {\n  const { setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<'light' | 'dark'>('light');\n\n  React.useEffect(() => {\n    const isDark = document.documentElement.classList.contains('dark');\n    setCurrentTheme(isDark ? 'dark' : 'light');\n  }, []);\n\n  const handleThemeChange = (theme: 'light' | 'dark') => {\n    setTheme(theme);\n    setCurrentTheme(theme);\n  };\n\n  // Tab-style variant\n  if (variant === 'tabs') {\n    return (\n      <div\n        className={`flex items-center p-1 rounded-full bg-interactive border border-border ${className || ''}`}\n      >\n        <button\n          onClick={() => handleThemeChange('light')}\n          className={`flex items-center justify-center px-3 py-2 rounded-full text-sm font-semibold transition-colors ${\n            currentTheme === 'light'\n              ? 'bg-surface shadow text-foreground'\n              : 'text-muted hover:text-foreground hover:bg-surface/50'\n          }`}\n          aria-label=\"Light theme\"\n        >\n          <SunIcon className=\"w-4 h-4\" />\n        </button>\n        <button\n          onClick={() => handleThemeChange('dark')}\n          className={`flex items-center justify-center px-3 py-2 rounded-full text-sm font-semibold transition-colors ${\n            currentTheme === 'dark'\n              ? 'bg-surface shadow text-foreground'\n              : 'text-muted hover:text-foreground hover:bg-surface/50'\n          }`}\n          aria-label=\"Dark theme\"\n        >\n          <MoonIcon className=\"w-4 h-4\" />\n        </button>\n      </div>\n    );\n  }\n\n  // Original button style for backward compatibility\n  const toggleTheme = () => {\n    const isDark = document.documentElement.classList.contains('dark');\n    setTheme(isDark ? 'light' : 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"icon-round\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className={`bg-button-secondary/40 hover:bg-button-secondary-hover/60 ${className || ''}`}\n      aria-label=\"Toggle Theme\"\n    >\n      {currentTheme === 'dark' ? (\n        <SunIcon className=\"w-5 h-5 text-accent\" />\n      ) : (\n        <MoonIcon className=\"w-5 h-5 text-accent\" />\n      )}\n    </Button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.variants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/renderers.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":60,"fix":{"range":[109,128],"text":"@/app/shared/ui/base-card.config"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { motion } from 'framer-motion';\nimport Link from 'next/link';\n\nimport type { AnimationConfig } from '../base-card.config';\nimport type React from 'react';\n\ninterface RenderFramerMotionProps {\n  href?: string;\n  scroll: boolean;\n  baseClasses: string;\n  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;\n  dataActive?: boolean;\n  role?: string;\n  tabIndex?: number;\n  ariaLabel?: string;\n  onKeyDown?: (e: React.KeyboardEvent) => void;\n  animationConfig: AnimationConfig;\n  children: React.ReactNode;\n  props: Record<string, unknown>;\n}\n\nexport function renderFramerMotion({\n  href,\n  scroll,\n  baseClasses,\n  onClick,\n  dataActive,\n  role,\n  tabIndex,\n  ariaLabel,\n  onKeyDown,\n  animationConfig,\n  children,\n  props,\n}: RenderFramerMotionProps): React.JSX.Element {\n  const MotionComponent = href ? motion(Link) : motion.div;\n  const framer = animationConfig.framer!;\n\n  return (\n    <MotionComponent\n      {...(href ? { href, scroll } : {})}\n      className={baseClasses}\n      onClick={onClick}\n      data-active={dataActive}\n      role={role}\n      tabIndex={tabIndex}\n      aria-label={ariaLabel}\n      onKeyDown={onKeyDown}\n      initial={framer.initial}\n      animate={framer.animate}\n      exit={framer.exit}\n      transition={framer.transition}\n      whileHover={framer.hover}\n      {...props}\n    >\n      {children}\n    </MotionComponent>\n  );\n}\n\ninterface RenderCSSProps {\n  href?: string;\n  scroll: boolean;\n  baseClasses: string;\n  onClick?: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement>;\n  dataActive?: boolean;\n  role?: string;\n  tabIndex?: number;\n  ariaLabel?: string;\n  onKeyDown?: (e: React.KeyboardEvent) => void;\n  children: React.ReactNode;\n  props: Record<string, unknown>;\n}\n\nexport function renderCSS({\n  href,\n  scroll,\n  baseClasses,\n  onClick,\n  dataActive,\n  role,\n  tabIndex,\n  ariaLabel,\n  onKeyDown,\n  children,\n  props,\n}: RenderCSSProps): React.JSX.Element {\n  if (href) {\n    return (\n      <Link\n        href={href}\n        scroll={scroll}\n        className={baseClasses}\n        onClick={onClick}\n        data-active={dataActive}\n        {...props}\n      >\n        {children}\n      </Link>\n    );\n  }\n\n  return (\n    <div\n      className={baseClasses}\n      onClick={onClick}\n      data-active={dataActive}\n      role={role}\n      tabIndex={tabIndex}\n      aria-label={ariaLabel}\n      onKeyDown={onKeyDown}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/variant.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":73,"fix":{"range":[89,108],"text":"@/app/shared/ui/base-card.config"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { cn } from '@/lib/utils/cn';\n\nimport type { AnimationConfig, CardVariant } from '../base-card.config';\n\nexport function buildVariantClasses(\n  cardVariant: CardVariant,\n  animationConfig: AnimationConfig,\n  isActive: boolean\n): string {\n  return cn(\n    cardVariant.padding,\n    cardVariant.height,\n    cardVariant.borderRadius,\n    isActive ? cardVariant.background.active : cardVariant.background.inactive,\n    isActive ? cardVariant.shadow.active : cardVariant.shadow.inactive,\n    animationConfig.type === 'css' && cardVariant.hover.duration,\n    animationConfig.type === 'css' && cardVariant.hover.value,\n    'group'\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkFolderCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[148,159],"text":"@/app/shared/ui/BaseCard"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { ChevronDownIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\nimport { BaseCard, BaseCardProps } from '../BaseCard';\n\nimport type { Folder } from '@/types/bookmark';\n\n/**\n * BookmarkFolderCard\n *\n * Specialized folder card for bookmark sidebar that maintains current design\n * while using the unified BaseCard system for consistent hover/animation behavior.\n */\n\ninterface BookmarkFolderCardProps extends Omit<BaseCardProps, 'children'> {\n  folder: Folder;\n  isExpanded?: boolean;\n  onToggleExpansion?: (folderId: string) => void;\n}\n\nexport const BookmarkFolderCard = ({\n  folder,\n  isExpanded = false,\n  onToggleExpansion,\n  className,\n  ...props\n}: BookmarkFolderCardProps): React.JSX.Element => {\n  const handleClick = () => {\n    onToggleExpansion?.(folder.id);\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\" // Use navigation variant for consistent hover behavior\n      animation=\"navigation\"\n      onClick={handleClick}\n      className={cn(\n        // Override with folder-specific styles while maintaining base structure\n        'p-3 rounded-lg border transition-all duration-200 cursor-pointer group h-auto',\n        'bg-surface border-border hover:border-accent/30 hover:bg-surface-hover hover:shadow-sm',\n        className as string\n      )}\n      {...props}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3 min-w-0\">\n          <div\n            className=\"w-8 h-8 rounded-lg flex items-center justify-center text-on-accent text-sm font-semibold\"\n            style={{\n              // Use folder color if provided, otherwise fall back to accent token\n              backgroundColor: folder.color || 'rgb(var(--color-accent))',\n            }}\n          >\n            {folder.name.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"font-semibold text-sm text-foreground truncate\">{folder.name}</div>\n            <div className=\"text-xs text-muted\">\n              {folder.bookmarks.length} verse{folder.bookmarks.length !== 1 ? 's' : ''}\n            </div>\n          </div>\n        </div>\n        <ChevronDownIcon\n          className={cn(\n            'w-4 h-4 text-muted transition-transform duration-200',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </div>\n    </BaseCard>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkNavigationCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":58,"fix":{"range":[105,136],"text":"@/app/shared/design-system/card-tokens"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":55,"fix":{"range":[180,191],"text":"@/app/shared/ui/BaseCard"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":42,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":101,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport React from 'react';\n\nimport { cn } from '@/lib/utils/cn';\n\nimport { colors } from '../../design-system/card-tokens';\nimport { BaseCard, BaseCardProps } from '../BaseCard';\n\n/**\n * BookmarkNavigationCard\n *\n * Specialized navigation card for bookmark sections (All Bookmarks, Pinned, etc.)\n * that maintains the current design while using the unified BaseCard system.\n */\n\n// Valid bookmark section identifiers\nexport type SectionId = 'bookmarks' | 'pinned' | 'last-read' | 'memorization';\n\nexport interface BookmarkNavigationContent {\n  id: SectionId;\n  icon: React.ComponentType<{ size?: number; className?: string }>;\n  label: string;\n  description: string;\n}\n\ninterface BookmarkNavigationCardProps extends Omit<BaseCardProps, 'children'> {\n  content: BookmarkNavigationContent;\n  onSectionChange?: (sectionId: SectionId) => void;\n}\n\n// Map section IDs to URLs for smooth navigation\nconst routes: Record<SectionId, string> = {\n  bookmarks: '/bookmarks',\n  pinned: '/bookmarks/pinned',\n  'last-read': '/bookmarks/last-read',\n  memorization: '/bookmarks/memorization',\n};\n\nconst getSectionHref = (sectionId: SectionId): string => routes[sectionId];\n\nexport const BookmarkNavigationCard = ({\n  content,\n  onSectionChange,\n  isActive = false,\n  className,\n  onClick,\n  ...props\n}: BookmarkNavigationCardProps): React.JSX.Element => {\n  const { id, icon: IconComponent, label, description } = content;\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\n    // Trigger section change before navigation for immediate feedback\n    onSectionChange?.(id);\n    if (onClick && typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\"\n      animation=\"navigation\"\n      isActive={Boolean(isActive)}\n      href={getSectionHref(id)}\n      scroll={false}\n      className={cn('items-center', className as string)}\n      onClick={handleClick}\n      {...props}\n    >\n      {/* Icon Badge */}\n      <div\n        className={cn(\n          'w-8 h-8 rounded-lg flex items-center justify-center text-sm font-semibold shrink-0 transition-colors duration-200',\n          isActive\n            ? 'bg-on-accent/20 text-on-accent'\n            : `${colors.background.gradientBase} ${colors.text.accent} ${colors.background.gradientHover}`\n        )}\n      >\n        <IconComponent size={16} />\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 min-w-0 ml-3\">\n        <div\n          className={cn(\n            'font-semibold text-sm truncate transition-colors duration-200',\n            isActive ? 'text-on-accent' : 'text-foreground group-hover:text-accent'\n          )}\n        >\n          {label}\n        </div>\n        <div className=\"text-xs leading-tight truncate transition-colors duration-200\">\n          <span className={isActive ? colors.text.activeSecondary : 'text-muted'}>\n            {description}\n          </span>\n        </div>\n      </div>\n    </BaseCard>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkVerseCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[145,156],"text":"@/app/shared/ui/BaseCard"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { cn } from '@/lib/utils/cn';\nimport { parseVerseKey } from '@/lib/utils/verse';\n\nimport { BaseCard, BaseCardProps } from '../BaseCard';\n\nimport type { Bookmark } from '@/types/bookmark';\n\n/**\n * BookmarkVerseCard\n *\n * Specialized verse card for bookmark folder contents that maintains current design\n * while using the unified BaseCard system for consistent behavior.\n */\n\ninterface BookmarkVerseCardProps extends Omit<BaseCardProps, 'children'> {\n  bookmark: Bookmark;\n}\n\nexport const BookmarkVerseCard = ({\n  bookmark,\n  className,\n  ...props\n}: BookmarkVerseCardProps): React.JSX.Element => {\n  const { surahNumber, ayahNumber } = parseVerseKey(bookmark.verseKey);\n\n  return (\n    <BaseCard\n      variant=\"navigation\" // Use navigation variant for consistent hover\n      animation=\"navigation\"\n      className={cn(\n        // Override with verse-specific styles while maintaining base behavior\n        'p-2.5 rounded-lg border transition-all duration-200 cursor-pointer group h-auto',\n        'bg-surface/60 border-border/60 hover:border-accent/30 hover:bg-surface-hover hover:shadow-sm',\n        'min-h-0', // Allow shrinking\n        className as string\n      )}\n      {...props}\n    >\n      <div className=\"flex items-start space-x-2.5\">\n        {/* Verse indicator */}\n        <div className=\"flex-shrink-0 w-7 h-7 rounded-md bg-accent/10 text-accent flex items-center justify-center text-xs font-semibold group-hover:bg-accent/15\">\n          {ayahNumber}\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          {/* Surah info */}\n          <div className=\"text-xs font-semibold text-foreground truncate\">\n            {bookmark.surahName || `Surah ${surahNumber}`}\n          </div>\n\n          {/* Verse key */}\n          <div className=\"text-xs text-muted/80 leading-tight\">\n            {bookmark.verseKey || `${surahNumber}:${ayahNumber}`}\n          </div>\n\n          {/* Optional verse preview - only show translation or first few words */}\n          {(bookmark.translation || bookmark.verseText) && (\n            <div className=\"text-xs text-muted-foreground mt-1 line-clamp-1 leading-tight\">\n              {bookmark.translation\n                ? bookmark.translation.length > 50\n                  ? `${bookmark.translation.substring(0, 50)}...`\n                  : bookmark.translation\n                : bookmark.verseText && bookmark.verseText.length > 40\n                  ? `${bookmark.verseText.substring(0, 40)}...`\n                  : bookmark.verseText}\n            </div>\n          )}\n        </div>\n      </div>\n    </BaseCard>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/ContentBookmarkCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":55,"fix":{"range":[106,117],"text":"@/app/shared/ui/BaseCard"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ContentBookmarkCard' has too many lines (51). Maximum allowed is 50.","line":30,"column":41,"nodeType":"FunctionExpression","messageId":"exceed","endLine":80,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport React, { memo, useCallback } from 'react';\n\nimport { BaseCard, BaseCardProps } from '../BaseCard';\nimport { Header } from './content-bookmark/Header';\nimport { VersePreview } from './content-bookmark/VersePreview';\ninterface BookmarkData {\n  verseKey?: string;\n  verseText?: string;\n  translation?: string;\n  surahName?: string;\n  createdAt: number;\n  verseId: string | number;\n  verseApiId?: number;\n}\ninterface ContentBookmarkCardProps extends Omit<BaseCardProps, 'children'> {\n  bookmark: BookmarkData;\n  isPlaying?: boolean;\n  isLoadingAudio?: boolean;\n  onPlayPause?: () => void;\n  isBookmarked?: boolean;\n  onBookmark?: () => void;\n  onNavigateToVerse?: () => void;\n  settings?: {\n    arabicFontFace?: string;\n    arabicFontSize?: number;\n    tajweed?: boolean;\n  };\n}\nexport const ContentBookmarkCard = memo(function ContentBookmarkCard({\n  bookmark,\n  isPlaying = false,\n  isLoadingAudio = false,\n  onPlayPause,\n  isBookmarked = true,\n  onBookmark,\n  onNavigateToVerse,\n  settings = {},\n  onClick,\n  ...props\n}: ContentBookmarkCardProps) {\n  const { verseKey, verseText, translation, surahName, createdAt } = bookmark;\n  const { arabicFontFace = 'font-amiri', arabicFontSize = 18, tajweed = false } = settings;\n  const handleCardClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\n      onNavigateToVerse?.();\n      onClick?.(e);\n    },\n    [onNavigateToVerse, onClick]\n  );\n  return (\n    <BaseCard\n      variant=\"bookmark\"\n      animation=\"bookmark\"\n      onClick={handleCardClick}\n      role=\"article\"\n      aria-label={`Bookmark for verse ${verseKey} from ${surahName}`}\n      {...props}\n    >\n      <Header\n        verseKey={verseKey}\n        surahName={surahName}\n        createdAt={createdAt}\n        isPlaying={isPlaying}\n        isLoadingAudio={isLoadingAudio}\n        isBookmarked={isBookmarked}\n        onPlayPause={onPlayPause}\n        onBookmark={onBookmark}\n        onNavigateToVerse={onNavigateToVerse}\n      />\n      <VersePreview\n        verseText={verseText}\n        translation={translation}\n        arabicFontFace={arabicFontFace}\n        arabicFontSize={arabicFontSize}\n        tajweed={tajweed}\n      />\n    </BaseCard>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/EnhancedFolderCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":55,"fix":{"range":[303,314],"text":"@/app/shared/ui/BaseCard"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'EnhancedFolderCard' has too many lines (84). Maximum allowed is 50.","line":34,"column":46,"nodeType":"FunctionExpression","messageId":"exceed","endLine":122,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport { FolderContextMenu } from '@/app/(features)/bookmarks/components/FolderContextMenu';\nimport { FolderIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\nimport { BaseCard, BaseCardProps } from '../BaseCard';\n\n/**\n * EnhancedFolderCard\n *\n * Maintains the exact visual design of the current FolderCard\n * while using the unified BaseCard system underneath.\n */\n\ninterface FolderData {\n  name: string;\n  icon?: string;\n  color?: string;\n  bookmarks: Array<{ verseId: string; verseKey?: string }> | { length: number };\n}\n\ninterface EnhancedFolderCardProps extends Omit<BaseCardProps, 'children' | 'onClick'> {\n  folder: FolderData;\n  onEdit: () => void;\n  onDelete: () => void;\n  onRename: () => void;\n  onColorChange: () => void;\n  onClick?: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport const EnhancedFolderCard = React.memo(function EnhancedFolderCard({\n  folder,\n  onEdit,\n  onDelete,\n  onRename,\n  onColorChange,\n  onClick,\n  'aria-label': ariaLabel,\n  ...props\n}: EnhancedFolderCardProps): React.JSX.Element {\n  const bookmarkCount = Array.isArray(folder.bookmarks)\n    ? folder.bookmarks.length\n    : folder.bookmarks.length;\n\n  const defaultAriaLabel = `Open folder ${folder.name} with ${bookmarkCount} bookmarks`;\n\n  return (\n    <BaseCard\n      variant=\"folder\"\n      animation=\"folder\"\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement> | undefined}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={(ariaLabel || defaultAriaLabel) as string}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick?.(e as unknown as React.MouseEvent<HTMLElement>);\n        }\n      }}\n      className=\"relative\"\n      {...props}\n    >\n      <div className=\"flex items-start justify-between mb-4\">\n        {/* Icon and main content */}\n        <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n          <div className=\"flex-shrink-0 p-3 rounded-lg bg-gradient-to-br from-accent/10 to-accent/5 group-hover:from-accent/20 group-hover:to-accent/10 transition-colors duration-300\">\n            {folder.icon ? (\n              <span className={cn('text-2xl', folder.color || 'text-accent')} aria-hidden=\"true\">\n                {folder.icon}\n              </span>\n            ) : (\n              <FolderIcon\n                size={28}\n                className={cn(folder.color || 'text-accent')}\n                aria-hidden=\"true\"\n              />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-lg text-foreground truncate mb-1 group-hover:text-accent transition-colors duration-200\">\n              {folder.name}\n            </h3>\n            <p className=\"text-sm text-muted font-medium\">\n              {bookmarkCount} {bookmarkCount === 1 ? 'verse' : 'verses'}\n            </p>\n          </div>\n        </div>\n\n        {/* Context Menu */}\n        <div className=\"flex-shrink-0\">\n          <FolderContextMenu\n            onEdit={onEdit}\n            onDelete={onDelete}\n            onRename={onRename}\n            onColorChange={onColorChange}\n          />\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      <div className=\"w-full h-1.5 bg-surface-hover rounded-full overflow-hidden\">\n        <motion.div\n          initial={{ width: 0 }}\n          animate={{ width: bookmarkCount > 0 ? '100%' : '25%' }}\n          transition={{ delay: 0.2, duration: 0.6, ease: 'easeOut' }}\n          className=\"h-full bg-gradient-to-r from-accent to-accent/80 rounded-full\"\n        />\n      </div>\n\n      {/* Last updated info */}\n      <div className=\"mt-3 flex items-center justify-between text-xs text-muted\">\n        <span>\n          {bookmarkCount > 0 ? `Last added ${new Date().toLocaleDateString()}` : 'Empty folder'}\n        </span>\n      </div>\n    </BaseCard>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/StandardNavigationCard.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":68,"fix":{"range":[76,107],"text":"@/app/shared/design-system/card-tokens"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":55,"fix":{"range":[151,162],"text":"@/app/shared/ui/BaseCard"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":46,"fix":{"range":[194,208],"text":"@/app/shared/ui/NumberBadge"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":33,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":88,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 12. Maximum allowed is 10.","line":33,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":88,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\nimport React from 'react';\n\nimport { buildTextClasses } from '../../design-system/card-tokens';\nimport { BaseCard, BaseCardProps } from '../BaseCard';\nimport { NumberBadge } from '../NumberBadge';\n\n/**\n * StandardNavigationCard\n *\n * A specialized navigation card that maintains the exact visual appearance\n * of current Surah/Juz/Page cards while providing layout flexibility.\n */\n\ninterface NavigationCardContent {\n  // Core navigation data\n  id: number;\n  title: string;\n  subtitle?: string;\n  arabic?: string;\n\n  // Display options\n  showBadge?: boolean;\n  showArabic?: boolean;\n  titleWeight?: 'bold' | 'semibold';\n}\n\ninterface StandardNavigationCardProps extends Omit<BaseCardProps, 'children'> {\n  content: NavigationCardContent;\n  onNavigate?: (id: number) => void;\n}\n\nexport const StandardNavigationCard = ({\n  content,\n  onNavigate,\n  isActive = false,\n  className = 'items-center ml-2',\n  ...props\n}: StandardNavigationCardProps): React.JSX.Element => {\n  const {\n    id,\n    title,\n    subtitle,\n    arabic,\n    showBadge = true,\n    showArabic = false,\n    titleWeight = 'semibold',\n  } = content;\n\n  const handleClick: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement> = () => {\n    onNavigate?.(id);\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\"\n      animation=\"navigation\"\n      isActive={Boolean(isActive)}\n      className={className as string}\n      onClick={handleClick}\n      {...props}\n    >\n      {/* Number Badge */}\n      {showBadge && <NumberBadge number={id} isActive={Boolean(isActive)} />}\n\n      {/* Content Area */}\n      <div className={showArabic ? 'flex-grow min-w-0' : undefined}>\n        {/* Primary Title */}\n        <p\n          className={`\n          ${titleWeight === 'bold' ? 'font-bold' : 'font-semibold'}\n          ${buildTextClasses('primary', Boolean(isActive))}\n        `}\n        >\n          {title}\n        </p>\n\n        {/* Subtitle (if provided) */}\n        {subtitle && <p className={buildTextClasses('secondary', Boolean(isActive))}>{subtitle}</p>}\n      </div>\n\n      {/* Arabic Text (if enabled) */}\n      {showArabic && arabic && (\n        <p className={buildTextClasses('arabic', Boolean(isActive))}>{arabic}</p>\n      )}\n    </BaseCard>\n  );\n};\n\n/**\n * Convenience components for specific navigation types\n */\n\n// For Surah cards (complex layout with Arabic)\nexport const SurahNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: true,\n      titleWeight: 'bold',\n    }}\n  />\n);\n\n// For Juz cards (medium layout, no Arabic)\nexport const JuzNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: false,\n      titleWeight: 'semibold',\n    }}\n  />\n);\n\n// For Page cards (simple layout)\nexport const PageNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: false,\n      titleWeight: 'semibold',\n      subtitle: undefined, // Pages don't have subtitles\n    }}\n  />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/__tests__/BookmarkNavigationCard.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":68,"fix":{"range":[178,203],"text":"@/app/shared/ui/cards/BookmarkNavigationCard"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_scroll' is assigned a value but never used.","line":18,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":90,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":92}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import userEvent from '@testing-library/user-event';\n\nimport { renderWithProviders, screen } from '@/app/testUtils/renderWithProviders';\n\nimport { BookmarkNavigationCard } from '../BookmarkNavigationCard';\n\nimport type { MockProps } from '@/tests/mocks';\n\njest.mock('next/link', () => {\n  return ({\n    children,\n    href,\n    onClick,\n    ...props\n  }: MockProps<\n    React.AnchorHTMLAttributes<HTMLAnchorElement> & { scroll?: boolean; href: string }\n  >) => {\n    const { scroll: _scroll, ...rest } = props;\n    return (\n      <a\n        href={href}\n        onClick={(e) => {\n          e.preventDefault();\n          onClick?.(e);\n        }}\n        {...rest}\n      >\n        {children}\n      </a>\n    );\n  };\n});\n\nconst DummyIcon = ({ size = 16, className = '' }: { size?: number; className?: string }) => (\n  <svg data-testid=\"icon\" width={size} height={size} className={className} />\n);\n\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\ndescribe('BookmarkNavigationCard', () => {\n  const content = {\n    id: 'bookmarks',\n    icon: DummyIcon,\n    label: 'Bookmarks',\n    description: 'All bookmarks',\n  };\n\n  it('calls onSectionChange when clicked', async () => {\n    const handleSectionChange = jest.fn();\n    renderWithProviders(\n      <BookmarkNavigationCard content={content} onSectionChange={handleSectionChange} />\n    );\n\n    await userEvent.click(screen.getByText('Bookmarks'));\n    expect(handleSectionChange).toHaveBeenCalledWith('bookmarks');\n  });\n\n  it('applies active styling', () => {\n    const { container } = renderWithProviders(\n      <BookmarkNavigationCard content={content} isActive />\n    );\n\n    expect(container.firstChild).toHaveClass('bg-accent');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/__tests__/StandardNavigationCard.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":68,"fix":{"range":[178,203],"text":"@/app/shared/ui/cards/StandardNavigationCard"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import userEvent from '@testing-library/user-event';\n\nimport { renderWithProviders, screen } from '@/app/testUtils/renderWithProviders';\n\nimport { StandardNavigationCard } from '../StandardNavigationCard';\n\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\ndescribe('StandardNavigationCard', () => {\n  const content = {\n    id: 1,\n    title: 'Al-Fatihah',\n    subtitle: 'The Opening',\n  };\n\n  it('calls onNavigate when clicked', async () => {\n    const handleNavigate = jest.fn();\n    renderWithProviders(<StandardNavigationCard content={content} onNavigate={handleNavigate} />);\n\n    await userEvent.click(screen.getByText('Al-Fatihah'));\n    expect(handleNavigate).toHaveBeenCalledWith(1);\n  });\n\n  it('applies active styling', () => {\n    const { container } = renderWithProviders(\n      <StandardNavigationCard content={content} isActive />\n    );\n\n    expect(container.firstChild).toHaveClass('bg-accent');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/content-bookmark/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/content-bookmark/VersePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/RangeSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/SelectSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/SettingItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/ToggleSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/utils/time.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":1,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":19,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const formatTimeAgo = (timestamp: number): string => {\n  const now = Date.now();\n  const diff = now - timestamp;\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const weeks = Math.floor(days / 7);\n  const months = Math.floor(days / 30);\n  const years = Math.floor(days / 365);\n\n  if (years > 0) return `${years} year${years === 1 ? '' : 's'} ago`;\n  if (months > 0) return `${months} month${months === 1 ? '' : 's'} ago`;\n  if (weeks > 0) return `${weeks} week${weeks === 1 ? '' : 's'} ago`;\n  if (days > 0) return `${days} day${days === 1 ? '' : 's'} ago`;\n  if (hours > 0) return `${hours} hour${hours === 1 ? '' : 's'} ago`;\n  if (minutes > 0) return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;\n  return 'Just now';\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/DesktopVerseActions.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":61,"fix":{"range":[198,225],"text":"@/app/shared/components/BookmarkModal"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":17,"endColumn":19,"fix":{"range":[340,348],"text":"@/app/shared/icons"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":18,"column":1,"nodeType":"ImportDeclaration","endLine":18,"endColumn":38,"fix":{"range":[376,386],"text":"@/app/shared/Spinner"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (112). Maximum allowed is 50.","line":22,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":140,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 17. Maximum allowed is 10.","line":22,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":140,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":38,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":38,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useState } from 'react';\n\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { BookmarkModal } from '../components/BookmarkModal';\nimport {\n  PlayIcon,\n  PauseIcon,\n  BookmarkIcon,\n  BookmarkOutlineIcon,\n  ShareIcon,\n  BookReaderIcon,\n} from '../icons';\nimport { Spinner } from '../Spinner';\nimport { VerseActionsProps } from './types';\nimport { defaultShare } from './utils';\n\nexport const DesktopVerseActions = ({\n  verseKey,\n  verseId,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n  className = '',\n}: VerseActionsProps): React.JSX.Element => {\n  const [isBookmarkModalOpen, setIsBookmarkModalOpen] = useState(false);\n  const handleShare = onShare || defaultShare;\n\n  const handleBookmarkClick = () => {\n    if (showRemove && onBookmark) {\n      onBookmark();\n    } else {\n      setIsBookmarkModalOpen(true);\n    }\n  };\n\n  return (\n    <div className={cn('text-center space-y-2 flex-shrink-0', className)}>\n      <p className=\"font-semibold text-accent text-sm\">{verseKey}</p>\n      <div className=\"flex flex-col items-center space-y-1 text-muted\">\n        <button\n          aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n          onClick={onPlayPause}\n          title=\"Play/Pause\"\n          className={cn(\n            'p-1.5 rounded-full hover:bg-accent/10 transition',\n            isPlaying ? 'text-accent' : 'hover:text-accent',\n            touchClasses.focus\n          )}\n        >\n          {isLoadingAudio ? (\n            <Spinner className=\"h-4 w-4 text-accent\" />\n          ) : isPlaying ? (\n            <PauseIcon size={18} />\n          ) : (\n            <PlayIcon size={18} />\n          )}\n        </button>\n\n        <Link\n          href={`/tafsir/${verseKey.replace(':', '/')}`}\n          aria-label=\"View tafsir\"\n          title=\"Tafsir\"\n          className={cn(\n            'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n            touchClasses.focus\n          )}\n        >\n          <BookReaderIcon size={18} />\n        </Link>\n\n        {onNavigateToVerse && (\n          <Link\n            href=\"#\"\n            onClick={(e) => {\n              e.preventDefault();\n              onNavigateToVerse();\n            }}\n            aria-label=\"Go to verse\"\n            title=\"Go to verse\"\n            className={cn(\n              'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n              touchClasses.focus\n            )}\n          >\n            <BookReaderIcon size={18} />\n          </Link>\n        )}\n\n        <button\n          aria-label={\n            showRemove ? 'Remove bookmark' : isBookmarked ? 'Remove bookmark' : 'Add bookmark'\n          }\n          title={showRemove ? 'Remove bookmark' : 'Bookmark'}\n          onClick={handleBookmarkClick}\n          className={cn(\n            'p-1.5 rounded-full hover:bg-accent/10 transition',\n            isBookmarked || showRemove ? 'text-accent' : 'hover:text-accent',\n            touchClasses.focus\n          )}\n        >\n          {isBookmarked || showRemove ? (\n            <BookmarkIcon size={18} />\n          ) : (\n            <BookmarkOutlineIcon size={18} />\n          )}\n        </button>\n\n        <button\n          aria-label=\"Share\"\n          title=\"Share\"\n          onClick={handleShare}\n          className={cn(\n            'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n            touchClasses.focus\n          )}\n        >\n          <ShareIcon size={18} />\n        </button>\n      </div>\n\n      {/* BookmarkModal */}\n      <BookmarkModal\n        isOpen={isBookmarkModalOpen}\n        onClose={() => setIsBookmarkModalOpen(false)}\n        verseId={verseId || verseKey}\n        verseKey={verseKey}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/MobileBottomSheet.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":38,"fix":{"range":[217,225],"text":"@/app/shared/icons"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'MobileBottomSheet' has too many lines (70). Maximum allowed is 50.","line":38,"column":39,"nodeType":"FunctionExpression","messageId":"exceed","endLine":108,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { memo } from 'react';\n\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { CloseIcon } from '../icons';\nimport { ActionList } from './components/ActionList';\nimport { useVerseActions } from './hooks/useVerseActions';\n\ninterface MobileBottomSheetProps {\n  isOpen: boolean;\n  onClose: () => void;\n  verseKey: string;\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  isBookmarked: boolean;\n  onPlayPause: () => void;\n  onBookmark: () => void;\n  onShare: () => void;\n  onNavigateToVerse?: () => void;\n  showRemove?: boolean;\n}\n\nconst backdropVariants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 },\n};\n\nconst sheetVariants = {\n  hidden: { y: '100%', opacity: 0 },\n  visible: { y: 0, opacity: 1 },\n  exit: { y: '100%', opacity: 0 },\n};\n\nexport const MobileBottomSheet = memo(function MobileBottomSheet({\n  isOpen,\n  onClose,\n  verseKey,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n}: MobileBottomSheetProps): React.JSX.Element {\n  const actions = useVerseActions({\n    isPlaying,\n    isLoadingAudio,\n    isBookmarked,\n    showRemove,\n    verseKey,\n    onPlayPause,\n    onBookmark,\n    onShare,\n    onNavigateToVerse,\n    onClose,\n  });\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            variants={backdropVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-modal touch-none\"\n            onClick={onClose}\n          />\n          <motion.div\n            variants={sheetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n            className=\"fixed bottom-0 left-0 right-0 bg-surface rounded-t-3xl shadow-2xl z-modal touch-pan-y pb-safe flex flex-col max-h-[90dvh]\"\n          >\n            <div className=\"flex justify-center pt-4 pb-2\">\n              <div className=\"w-10 h-1 bg-border rounded-full\" />\n            </div>\n            <div className=\"flex items-center justify-between px-6 py-4 border-b border-border\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Verse {verseKey}</h2>\n              <button\n                onClick={onClose}\n                className={cn(\n                  'p-2 rounded-full hover:bg-interactive transition-colors',\n                  touchClasses.target,\n                  touchClasses.gesture,\n                  touchClasses.focus\n                )}\n                aria-label=\"Close\"\n              >\n                <CloseIcon size={20} className=\"text-muted\" />\n              </button>\n            </div>\n            <ActionList actions={actions} onClose={onClose} />\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/MobileVerseActions.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":61,"fix":{"range":[310,337],"text":"@/app/shared/components/BookmarkModal"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":42,"fix":{"range":[371,379],"text":"@/app/shared/icons"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (68). Maximum allowed is 50.","line":14,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":31,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { MobileBottomSheet } from './MobileBottomSheet';\nimport { VerseActionsProps } from './types';\nimport { defaultShare } from './utils';\nimport { BookmarkModal } from '../components/BookmarkModal';\nimport { EllipsisHIcon } from '../icons';\n\nexport const MobileVerseActions = ({\n  verseKey,\n  verseId,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n  className = '',\n}: VerseActionsProps): React.JSX.Element => {\n  const [isBottomSheetOpen, setIsBottomSheetOpen] = useState(false);\n  const [isBookmarkModalOpen, setIsBookmarkModalOpen] = useState(false);\n  const handleShare = onShare || defaultShare;\n\n  const handleBookmarkClick = () => {\n    if (showRemove && onBookmark) {\n      onBookmark();\n    } else {\n      setIsBookmarkModalOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <div className={cn('flex items-center justify-between', className)}>\n        {/* Verse number on the left */}\n        <div className=\"flex-shrink-0\">\n          <span className=\"font-semibold text-accent text-sm\">{verseKey}</span>\n        </div>\n\n        {/* Three-dot menu on the right */}\n        <button\n          onClick={() => setIsBottomSheetOpen(true)}\n          className={cn(\n            'p-1 rounded-full hover:bg-interactive transition-colors',\n            touchClasses.target,\n            touchClasses.gesture,\n            touchClasses.focus\n          )}\n          aria-label=\"Open verse actions menu\"\n        >\n          <EllipsisHIcon size={18} className=\"text-muted\" />\n        </button>\n      </div>\n\n      {/* Bottom Sheet */}\n      <MobileBottomSheet\n        isOpen={isBottomSheetOpen}\n        onClose={() => setIsBottomSheetOpen(false)}\n        verseKey={verseKey}\n        isPlaying={isPlaying}\n        isLoadingAudio={isLoadingAudio}\n        isBookmarked={isBookmarked}\n        onPlayPause={onPlayPause}\n        onBookmark={handleBookmarkClick}\n        onShare={handleShare}\n        onNavigateToVerse={onNavigateToVerse}\n        showRemove={showRemove}\n      />\n\n      {/* BookmarkModal */}\n      <BookmarkModal\n        isOpen={isBookmarkModalOpen}\n        onClose={() => setIsBookmarkModalOpen(false)}\n        verseId={verseId || verseKey}\n        verseKey={verseKey}\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/ResponsiveVerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/components/ActionList.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":44,"fix":{"range":[196,204],"text":"@/app/shared/verse-actions/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport Link from 'next/link';\nimport { memo } from 'react';\n\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { VerseActionItem } from '../types';\n\ninterface ActionListProps {\n  actions: VerseActionItem[];\n  onClose: () => void;\n}\n\nexport const ActionList = memo(function ActionList({\n  actions,\n  onClose,\n}: ActionListProps): React.JSX.Element {\n  return (\n    <div className=\"flex-1 overflow-y-auto p-4 pb-8\">\n      <div className=\"space-y-2\">\n        {actions.map((action) =>\n          action.href ? (\n            <Link\n              key={action.label}\n              href={action.href}\n              onClick={onClose}\n              className={cn(\n                'flex items-center gap-4 p-4 rounded-2xl transition-all duration-200',\n                'hover:bg-interactive active:bg-interactive',\n                touchClasses.target,\n                touchClasses.gesture,\n                touchClasses.focus,\n                touchClasses.active,\n                action.active && 'bg-accent/10 text-accent'\n              )}\n            >\n              <div className=\"flex-shrink-0\">{action.icon}</div>\n              <span className=\"text-sm font-medium\">{action.label}</span>\n            </Link>\n          ) : (\n            <button\n              key={action.label}\n              onClick={action.onClick}\n              className={cn(\n                'flex w-full items-center gap-4 p-4 rounded-2xl transition-all duration-200',\n                'hover:bg-interactive active:bg-interactive',\n                touchClasses.target,\n                touchClasses.gesture,\n                touchClasses.focus,\n                touchClasses.active,\n                action.active && 'bg-accent/10 text-accent'\n              )}\n            >\n              <div className=\"flex-shrink-0\">{action.icon}</div>\n              <span className=\"text-sm font-medium\">{action.label}</span>\n            </button>\n          )\n        )}\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/hooks/useVerseActions.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":22,"fix":{"range":[194,205],"text":"@/app/shared/icons"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":41,"fix":{"range":[233,246],"text":"@/app/shared/Spinner"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":44,"fix":{"range":[282,290],"text":"@/app/shared/verse-actions/types"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useVerseActions' has too many lines (63). Maximum allowed is 50.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":93,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"'use client';\n\nimport { ReactElement, createElement, useCallback } from 'react';\n\nimport {\n  PlayIcon,\n  PauseIcon,\n  BookmarkIcon,\n  BookmarkOutlineIcon,\n  ShareIcon,\n  BookReaderIcon,\n} from '../../icons';\nimport { Spinner } from '../../Spinner';\nimport { VerseActionItem } from '../types';\n\ninterface UseVerseActionsParams {\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  isBookmarked: boolean;\n  showRemove: boolean;\n  verseKey: string;\n  onPlayPause: () => void;\n  onBookmark: () => void;\n  onShare: () => void;\n  onNavigateToVerse?: () => void;\n  onClose: () => void;\n}\n\nexport function useVerseActions({\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  showRemove,\n  verseKey,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  onClose,\n}: UseVerseActionsParams): VerseActionItem[] {\n  const handleAction = useCallback(\n    (action: () => void) => {\n      action();\n      onClose();\n    },\n    [onClose]\n  );\n  const playPauseIcon: ReactElement = isLoadingAudio\n    ? createElement(Spinner, { className: 'h-5 w-5 text-accent' })\n    : isPlaying\n      ? createElement(PauseIcon, { size: 20 })\n      : createElement(PlayIcon, { size: 20 });\n\n  const bookmarkIcon: ReactElement =\n    isBookmarked || showRemove\n      ? createElement(BookmarkIcon, { size: 20 })\n      : createElement(BookmarkOutlineIcon, { size: 20 });\n\n  return [\n    {\n      label: isPlaying ? 'Pause Audio' : 'Play Audio',\n      icon: playPauseIcon,\n      onClick: () => handleAction(onPlayPause),\n      active: isPlaying,\n    },\n    {\n      label: 'View Tafsir',\n      icon: createElement(BookReaderIcon, { size: 20 }),\n      onClick: () => {},\n      href: `/tafsir/${verseKey.replace(':', '/')}`,\n    },\n    ...(onNavigateToVerse\n      ? [\n          {\n            label: 'Go to Verse',\n            icon: createElement(BookReaderIcon, { size: 20 }),\n            onClick: () => handleAction(onNavigateToVerse),\n          },\n        ]\n      : []),\n    {\n      label: showRemove ? 'Remove Bookmark' : isBookmarked ? 'Remove Bookmark' : 'Add Bookmark',\n      icon: bookmarkIcon,\n      onClick: () => handleAction(onBookmark),\n      active: isBookmarked || showRemove,\n    },\n    {\n      label: 'Share',\n      icon: createElement(ShareIcon, { size: 20 }),\n      onClick: () => handleAction(onShare),\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/utils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ErrorHandler } from '@/src/infrastructure/errors';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nexport const defaultShare = () => {\n  const url = typeof window !== 'undefined' ? window.location.href : '';\n  if (navigator.share) {\n    navigator.share({ title: 'Quran', url }).catch((err) => {\n      logger.warn('Share failed', undefined, err);\n      ErrorHandler.handleSync(err, { logError: false, reportError: false });\n    });\n  } else if (navigator.clipboard) {\n    navigator.clipboard.writeText(url).catch((err) => {\n      logger.warn('Share failed', undefined, err);\n      ErrorHandler.handleSync(err, { logError: false, reportError: false });\n    });\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/contextTestUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/assertions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/measures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/tester.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/tracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performanceTestUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/render.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, RenderOptions } from '@testing-library/react';\nimport { renderHook, RenderHookOptions } from '@testing-library/react';\nimport React from 'react';\n\nimport { createProviderWrapper, ContextProviderName } from './providers';\n\nexport function renderWithSpecificProviders(\n  ui: React.ReactElement,\n  providers: ContextProviderName[],\n  options?: Omit<RenderOptions, 'wrapper'>\n) {\n  const Wrapper = createProviderWrapper(providers, { provider: () => new Map() });\n  return render(ui, { wrapper: Wrapper, ...options });\n}\n\nexport function renderHookWithProviders<TProps, TResult>(\n  callback: (props: TProps) => TResult,\n  providers: ContextProviderName[],\n  options?: RenderHookOptions<TProps>\n) {\n  const Wrapper = createProviderWrapper(providers, { provider: () => new Map() });\n  return renderHook(callback, { wrapper: Wrapper, ...options });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/renderWithProviders.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":67},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, RenderOptions } from '@testing-library/react';\nimport { SWRConfig } from 'swr';\n\nimport { BookmarkProvider } from '@/app/providers/BookmarkContext';\nimport { SettingsProvider } from '@/app/providers/SettingsContext';\nimport { SidebarProvider } from '@/app/providers/SidebarContext';\nimport { ThemeProvider } from '@/app/providers/ThemeContext';\nimport { AudioProvider } from '@/app/shared/player/context/AudioContext';\n\nconst Providers = ({ children }: { children: React.ReactNode }) => (\n  <SWRConfig value={{ provider: () => new Map() }}>\n    <AudioProvider>\n      <SettingsProvider>\n        <BookmarkProvider>\n          <ThemeProvider>\n            <SidebarProvider>{children}</SidebarProvider>\n          </ThemeProvider>\n        </BookmarkProvider>\n      </SettingsProvider>\n    </AudioProvider>\n  </SWRConfig>\n);\n\nexport const renderWithProviders = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>\n) => render(ui, { wrapper: Providers, ...options });\n\nexport * from '@testing-library/react';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/assertions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/viewport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/audio.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/env/config.ts","messages":[{"ruleId":"import/order","severity":1,"message":"There should be at least one empty line between import groups","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":25,"fix":{"range":[24,24],"text":"\n"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":83,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":84,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { z } from 'zod';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // API Configuration\n  NEXT_PUBLIC_API_URL: z.string().url().default('https://api.quran.com/api/v4'),\n  NEXT_PUBLIC_AUDIO_CDN_URL: z.string().url().default('https://verses.quran.com'),\n  NEXT_PUBLIC_IMAGE_CDN_URL: z.string().url().default('https://cdn.quran.com'),\n\n  // Cache Configuration\n  CACHE_TTL: z.string().default('3600').transform(Number),\n  ENABLE_OFFLINE_MODE: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n\n  // Logging Configuration\n  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),\n  ENABLE_CONSOLE_LOGGING: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n\n  // Performance Configuration\n  ENABLE_ANALYTICS: z\n    .string()\n    .default('false')\n    .transform((v) => v === 'true'),\n  API_TIMEOUT: z.string().default('10000').transform(Number),\n\n  // Feature Flags\n  ENABLE_TAFSIR: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_BOOKMARKS: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_SEARCH: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_AUDIO: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n});\n\nexport type Config = z.infer<typeof envSchema>;\n\nlet config: Config;\n\ntry {\n  config = envSchema.parse(process.env);\n} catch (error) {\n  logger.error('❌ Invalid environment configuration:', undefined, error as Error);\n\n  // Provide fallback configuration in case of validation errors\n  config = {\n    NODE_ENV: 'development',\n    NEXT_PUBLIC_API_URL: 'https://api.quran.com/api/v4',\n    NEXT_PUBLIC_AUDIO_CDN_URL: 'https://verses.quran.com',\n    NEXT_PUBLIC_IMAGE_CDN_URL: 'https://cdn.quran.com',\n    CACHE_TTL: 3600,\n    ENABLE_OFFLINE_MODE: true,\n    LOG_LEVEL: 'info',\n    ENABLE_CONSOLE_LOGGING: true,\n    ENABLE_ANALYTICS: false,\n    API_TIMEOUT: 10000,\n    ENABLE_TAFSIR: true,\n    ENABLE_BOOKMARKS: true,\n    ENABLE_SEARCH: true,\n    ENABLE_AUDIO: true,\n  } as Config;\n}\n\nexport { config };\n\n// Helper functions for environment checks\nexport const isDevelopment = () => config.NODE_ENV === 'development';\nexport const isProduction = () => config.NODE_ENV === 'production';\nexport const isTest = () => config.NODE_ENV === 'test';\n\n// Feature flag helpers\nexport const isFeatureEnabled = (\n  feature: keyof Pick<\n    Config,\n    'ENABLE_TAFSIR' | 'ENABLE_BOOKMARKS' | 'ENABLE_SEARCH' | 'ENABLE_AUDIO' | 'ENABLE_ANALYTICS'\n  >\n): boolean => {\n  return config[feature];\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/features.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":125,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Application Configuration\n *\n * Centralised entry point that composes individual configuration segments and\n * validates them using Zod schemas.\n */\nimport { z } from 'zod';\n\nimport { apiConfig, apiSchema } from './api';\nimport { appConfig, appSchema } from './app';\nimport { audioConfig, audioSchema } from './audio';\nimport { cacheConfig, cacheSchema } from './cache';\nimport { featuresConfig, featuresSchema } from './features';\nimport { loggingConfig, loggingSchema } from './logging';\nimport { monitoringConfig, monitoringSchema } from './monitoring';\nimport { searchConfig, searchSchema } from './search';\nimport { securityConfig, securitySchema } from './security';\nimport { storageConfig, storageSchema } from './storage';\nimport { uiConfig, uiSchema } from './ui';\n\nconst configSchema = z.object({\n  app: appSchema,\n  api: apiSchema,\n  features: featuresSchema,\n  cache: cacheSchema,\n  storage: storageSchema,\n  audio: audioSchema,\n  ui: uiSchema,\n  search: searchSchema,\n  security: securitySchema,\n  monitoring: monitoringSchema,\n  logging: loggingSchema,\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nconst rawConfig = {\n  app: appConfig,\n  api: apiConfig,\n  features: featuresConfig,\n  cache: cacheConfig,\n  storage: storageConfig,\n  audio: audioConfig,\n  ui: uiConfig,\n  search: searchConfig,\n  security: securityConfig,\n  monitoring: monitoringConfig,\n  logging: loggingConfig,\n};\n\n/**\n * Validated and typed configuration.\n *\n * Throws an error if configuration validation fails.\n */\nexport const config: Config = (() => {\n  try {\n    return configSchema.parse(rawConfig);\n  } catch (error) {\n    let message = '❌ Configuration validation failed';\n\n    if (error instanceof z.ZodError) {\n      const details = error.errors\n        .map((err) => `  - ${err.path.join('.')}: ${err.message}`)\n        .join('\\n');\n      message += `\\n${details}`;\n    }\n\n    throw new Error(message);\n  }\n})();\n\n/** Environment helpers */\nexport const isDevelopment = config.app.environment === 'development';\nexport const isProduction = config.app.environment === 'production';\nexport const isTest = config.app.environment === 'test';\nexport const isStaging = config.app.environment === 'staging';\n\n/** Feature flags helper */\nexport const features = config.features;\n\n/**\n * Logging configuration helper\n */\nexport const shouldLog = (level: string): boolean => {\n  const levels = { debug: 0, info: 1, warn: 2, error: 3 } as const;\n  const currentLevel = levels[config.logging.level as keyof typeof levels] ?? 1;\n  const targetLevel = levels[level as keyof typeof levels] ?? 1;\n  return targetLevel >= currentLevel;\n};\n\n/**\n * Validate configuration at startup.\n *\n * Call this during application initialisation to ensure all required\n * configuration is present and valid.\n */\nexport function validateConfig(): string[] {\n  const warnings: string[] = [];\n\n  if (isProduction) {\n    if (!config.monitoring.sentry?.dsn && config.features.enableErrorTracking) {\n      warnings.push('⚠️  Error tracking is enabled but no Sentry DSN is configured');\n    }\n\n    if (!config.monitoring.analytics?.googleAnalyticsId && config.features.enableAnalytics) {\n      warnings.push('⚠️  Analytics is enabled but no Google Analytics ID is configured');\n    }\n  }\n\n  try {\n    new URL(config.api.quranBaseUrl);\n  } catch {\n    throw new Error('Invalid Quran API base URL');\n  }\n\n  return warnings;\n}\n\n/**\n * Get configuration subset for client-side usage.\n *\n * Only returns configuration that's safe to expose to the browser.\n */\nexport function getClientConfig() {\n  return {\n    app: {\n      name: config.app.name,\n      version: config.app.version,\n      environment: config.app.environment,\n    },\n    api: {\n      quranBaseUrl: config.api.quranBaseUrl,\n      timeout: config.api.timeout,\n    },\n    features: config.features,\n    ui: config.ui,\n    audio: config.audio,\n    search: config.search,\n    cache: {\n      ttl: config.cache.ttl,\n      enableIndexedDBCache: config.cache.enableIndexedDBCache,\n    },\n    storage: {\n      enableIndexedDB: config.storage.enableIndexedDB,\n      enableLocalStorage: config.storage.enableLocalStorage,\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/search.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/data/__tests__/juzData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/jest.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/jest.setup.js","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":25,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":25,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":26,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport 'cross-fetch/polyfill';\nimport { jest } from '@jest/globals';\nimport nodeFetch from 'node-fetch';\n\n// Ensure fetch is available in the JSDOM environment\nif (typeof globalThis.fetch === 'undefined') {\n  if (typeof global.fetch === 'function') {\n    globalThis.fetch = (...args) => global.fetch(...args);\n  } else {\n    globalThis.fetch = (...args) => nodeFetch(...args);\n  }\n}\n\n// Minimal mock that satisfies Next's useIntersection requirements\nclass IntersectionObserverMock {\n  constructor(cb) {\n    this.cb = cb;\n  }\n  observe = (el) => {\n    if (this.cb) {\n      this.cb([{ isIntersecting: true, target: el }]);\n    }\n  };\n  unobserve = () => {};\n  disconnect = () => {};\n}\n\nObject.defineProperty(window, 'IntersectionObserver', {\n  writable: true,\n  configurable: true,\n  value: IntersectionObserverMock,\n});\nObject.defineProperty(global, 'IntersectionObserver', {\n  writable: true,\n  configurable: true,\n  value: IntersectionObserverMock,\n});\n\njest.mock('@/app/shared/components/adaptive-navigation', () => () => null);\njest.mock('@/lib/api/chapters', () => ({\n  getChapters: jest.fn().mockResolvedValue([\n    { id: 1, name_simple: 'Al-Fatihah', verses_count: 7 },\n    { id: 2, name_simple: 'Al-Baqarah', verses_count: 286 },\n  ]),\n}));\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus.hooks.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":19,"fix":{"range":[174,182],"text":"@/lib/focus"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (115). Maximum allowed is 50.","line":12,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":137,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":27,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":27,"endColumn":56},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":31,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":34,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":40,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":40,"endColumn":56},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":41,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":48,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":57,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":57,"endColumn":89},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":70,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":70,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":71,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":71,"endColumn":43},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":74,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":74,"endColumn":46},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":82,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":83,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":83,"endColumn":43},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":84,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":84,"endColumn":60},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":84,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":84,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":93,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":93,"endColumn":51},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":94,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":96,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":95,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":95,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport {\n  useFocusTrap,\n  useFocusRestoration,\n  useAutoFocus,\n  useResponsiveFocus,\n  useRovingTabIndex,\n} from '../focus';\nimport { setupDom } from './focus/test-utils';\n\ndescribe('focus hooks', () => {\n  let container: HTMLElement;\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    ({ container, cleanup } = setupDom());\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('useFocusTrap', () => {\n    it('traps focus within container and wraps on Tab', () => {\n      const containerRef = { current: container };\n      renderHook(() => useFocusTrap(true, containerRef));\n      expect(document.activeElement?.id).toBe('btn1');\n      const lastEl = container.querySelector('#select1') as HTMLSelectElement;\n      lastEl.focus();\n      act(() => {\n        const tabEvent = new KeyboardEvent('keydown', { key: 'Tab', bubbles: true });\n        document.dispatchEvent(tabEvent);\n      });\n      expect(document.activeElement?.id).toBe('btn1');\n    });\n\n    it('handles Shift+Tab from first to last', () => {\n      const containerRef = { current: container };\n      renderHook(() => useFocusTrap(true, containerRef));\n      act(() => {\n        const shiftTab = new KeyboardEvent('keydown', {\n          key: 'Tab',\n          shiftKey: true,\n          bubbles: true,\n        });\n        document.dispatchEvent(shiftTab);\n      });\n      expect(document.activeElement?.id).toBe('select1');\n    });\n\n    it('restores previous focus when deactivated', () => {\n      const external = document.createElement('button');\n      document.body.appendChild(external);\n      external.focus();\n      const containerRef = { current: container };\n      const { rerender } = renderHook(({ active }) => useFocusTrap(active, containerRef), {\n        initialProps: { active: true },\n      });\n      rerender({ active: false });\n      expect(document.activeElement).toBe(external);\n      document.body.removeChild(external);\n    });\n  });\n\n  describe('useFocusRestoration', () => {\n    it('saves and restores focus by id', () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      target.focus();\n      const { result } = renderHook(() => useFocusRestoration());\n      act(() => result.current.saveFocus());\n      const other = container.querySelector('#btn1') as HTMLButtonElement;\n      other.focus();\n      act(() => result.current.restoreFocus());\n      expect(document.activeElement).toBe(target);\n    });\n\n    it('handles elements without id', () => {\n      const btn = document.createElement('button');\n      container.appendChild(btn);\n      btn.focus();\n      const { result } = renderHook(() => useFocusRestoration());\n      act(() => result.current.saveFocus());\n      expect(() => act(() => result.current.restoreFocus())).not.toThrow();\n      container.removeChild(btn);\n    });\n  });\n\n  describe('useAutoFocus', () => {\n    it('focuses element when condition is true', async () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      const ref = { current: target };\n      renderHook(() => useAutoFocus(true, ref, 10));\n      await act(async () => {\n        await new Promise((r) => setTimeout(r, 20));\n      });\n      expect(document.activeElement).toBe(target);\n    });\n\n    it('does not focus element when condition is false', async () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      const ref = { current: target };\n      renderHook(() => useAutoFocus(false, ref, 10));\n      await act(async () => {\n        await new Promise((r) => setTimeout(r, 20));\n      });\n      expect(document.activeElement).not.toBe(target);\n    });\n  });\n\n  describe('useResponsiveFocus', () => {\n    it('manages focus across breakpoint changes', () => {\n      const target = container.querySelector('#btn1') as HTMLButtonElement;\n      target.focus();\n      const { rerender } = renderHook(\n        ({ bp }: { bp: 'mobile' | 'tablet' | 'desktop' }) => useResponsiveFocus(bp, true),\n        { initialProps: { bp: 'mobile' } }\n      );\n      expect(() => rerender({ bp: 'desktop' })).not.toThrow();\n    });\n  });\n\n  describe('useRovingTabIndex', () => {\n    it('sets tabIndex and focuses active item', () => {\n      const button1 = container.querySelector('#btn1') as HTMLButtonElement;\n      const button2 = container.querySelector('#btn2') as HTMLButtonElement;\n      const input1 = container.querySelector('#input1') as HTMLInputElement;\n      const items = [{ current: button1 }, { current: button2 }, { current: input1 }];\n      const setActive = jest.fn();\n      renderHook(() => useRovingTabIndex(items, 0, setActive));\n      expect(button1.tabIndex).toBe(0);\n      expect(button2.tabIndex).toBe(-1);\n      expect(input1.tabIndex).toBe(-1);\n      expect(document.activeElement).toBe(button1);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus.utilities.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":94,"fix":{"range":[83,91],"text":"@/lib/focus"}},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":20,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":20,"endColumn":41},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":28,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":28,"endColumn":41},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":36,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":36,"endColumn":41},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":44,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":44,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { getFocusableElements, focusVisibleClasses, getFocusVisibleClasses } from '../focus';\nimport { setupDom } from './focus/test-utils';\n\ndescribe('focus utilities', () => {\n  let container: HTMLElement;\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    ({ container, cleanup } = setupDom());\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('getFocusableElements', () => {\n    it('finds all focusable elements in order', () => {\n      const focusable = getFocusableElements(container);\n      expect(focusable).toHaveLength(5);\n      expect(focusable.map((el) => el.id)).toEqual(['btn1', 'input1', 'link1', 'btn2', 'select1']);\n    });\n\n    it('excludes disabled elements', () => {\n      const disabledButton = container.querySelector('#btn1') as HTMLButtonElement;\n      disabledButton.disabled = true;\n      const focusable = getFocusableElements(container);\n      expect(focusable).toHaveLength(4);\n      expect(focusable.map((el) => el.id)).not.toContain('btn1');\n    });\n\n    it('excludes hidden elements', () => {\n      const hiddenInput = container.querySelector('#input1') as HTMLInputElement;\n      hiddenInput.style.display = 'none';\n      const focusable = getFocusableElements(container);\n      expect(focusable).toHaveLength(4);\n      expect(focusable.map((el) => el.id)).not.toContain('input1');\n    });\n\n    it('excludes elements with visibility hidden', () => {\n      const hiddenLink = container.querySelector('#link1') as HTMLAnchorElement;\n      hiddenLink.style.visibility = 'hidden';\n      const focusable = getFocusableElements(container);\n      expect(focusable).toHaveLength(4);\n      expect(focusable.map((el) => el.id)).not.toContain('link1');\n    });\n  });\n\n  describe('focus visible utilities', () => {\n    it('returns base classes by default', () => {\n      expect(getFocusVisibleClasses()).toBe(focusVisibleClasses.base);\n    });\n\n    it('returns specified variant classes', () => {\n      expect(getFocusVisibleClasses('button')).toBe(focusVisibleClasses.button);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/accessibility-performance.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":55,"fix":{"range":[154,170],"text":"@/lib/responsive"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { setupMobilePerformanceTest } from './test-utils';\nimport { useResponsiveState } from '../../responsive';\n\ndescribe('Accessibility Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('should maintain focus performance during responsive changes', async () => {\n    const focusableElement = document.createElement('button');\n    focusableElement.textContent = 'Test Button';\n    document.body.appendChild(focusableElement);\n\n    focusableElement.focus();\n\n    const startTime = performance.now();\n\n    matchMediaUtils.setViewportWidth(375);\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    matchMediaUtils.setViewportWidth(768);\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const focusTime = endTime - startTime;\n\n    expect(focusTime).toBeLessThan(50);\n    expect(document.activeElement).toBe(focusableElement);\n\n    document.body.removeChild(focusableElement);\n  });\n\n  it('should optimize screen reader announcements', async () => {\n    const announcementSpy = jest.spyOn(console, 'log').mockImplementation();\n\n    renderHook(() => useResponsiveState());\n\n    matchMediaUtils.setViewportWidth(375);\n    matchMediaUtils.setViewportWidth(768);\n    matchMediaUtils.setViewportWidth(1024);\n\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 50));\n    });\n\n    expect(announcementSpy).toHaveBeenCalledTimes(0);\n\n    announcementSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/cpu-battery.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":70,"fix":{"range":[185,201],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (72). Maximum allowed is 50.","line":6,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":103,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":24,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":24,"endColumn":63},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":31,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":33,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":32,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":32,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\nimport { useBreakpoint, useResponsiveState } from '../../responsive';\n\ndescribe('CPU and Battery Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('CPU Performance', () => {\n    it('should throttle expensive operations on mobile', async () => {\n      simulateDevice('iPhone SE');\n\n      const { result } = renderHook(() => useResponsiveState());\n\n      const startTime = performance.now();\n\n      for (let i = 0; i < 100; i++) {\n        matchMediaUtils.setViewportWidth(375 + (i % 10));\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 1));\n        });\n      }\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(2000);\n      expect(result.current.isMobile).toBe(false);\n    });\n\n    it('should debounce resize events efficiently', async () => {\n      let resizeCallCount = 0;\n\n      renderHook(() => {\n        resizeCallCount++;\n        return useBreakpoint();\n      });\n\n      const startTime = performance.now();\n\n      for (let i = 0; i < 20; i++) {\n        matchMediaUtils.setViewportWidth(375 + i * 10);\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 0));\n        });\n      }\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(1000);\n      expect(resizeCallCount).toBeLessThan(25);\n    });\n  });\n\n  describe('Battery Usage Optimization', () => {\n    it('should minimize unnecessary re-renders', async () => {\n      let renderCount = 0;\n\n      renderHook(() => {\n        renderCount++;\n        return useBreakpoint();\n      });\n\n      for (let i = 0; i < 10; i++) {\n        matchMediaUtils.setViewportWidth(375);\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 5));\n        });\n      }\n\n      expect(renderCount).toBeLessThanOrEqual(2);\n    });\n\n    it('should use passive event listeners where possible', () => {\n      const addEventListenerSpy = jest.spyOn(document, 'addEventListener');\n\n      renderHook(() => useBreakpoint());\n\n      const passiveListeners = addEventListenerSpy.mock.calls.filter(\n        (call) => call[2] && typeof call[2] === 'object' && call[2].passive\n      );\n\n      expect(passiveListeners.length).toBeGreaterThanOrEqual(0);\n\n      addEventListenerSpy.mockRestore();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/layout-shift.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/memory-network.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":70,"fix":{"range":[186,202],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (99). Maximum allowed is 50.","line":6,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":134,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'matchMediaUtils' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":25,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":25,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":49,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":49,"endColumn":66},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":51,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":53,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":52,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":52,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":111,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":111,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { setupMobilePerformanceTest, testPerformance } from './test-utils';\nimport { useBreakpoint, useResponsiveState } from '../../responsive';\n\ndescribe('Memory and Network Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('Memory Usage Optimization', () => {\n    it('should cleanup event listeners properly', () => {\n      const addEventListenerSpy = jest.spyOn(window, 'addEventListener');\n      const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');\n\n      const { unmount } = renderHook(() => useBreakpoint());\n\n      void addEventListenerSpy.mock.calls.length;\n\n      unmount();\n\n      const removeCalls = removeEventListenerSpy.mock.calls.length;\n\n      expect(removeCalls).toBeGreaterThan(0);\n\n      addEventListenerSpy.mockRestore();\n      removeEventListenerSpy.mockRestore();\n    });\n\n    it('should not create memory leaks during rapid re-renders', async () => {\n      interface PerformanceWithMemory extends Performance {\n        memory?: { usedJSHeapSize: number };\n      }\n      const performanceWithMemory = performance as PerformanceWithMemory;\n      const initialMemory = performanceWithMemory.memory\n        ? performanceWithMemory.memory.usedJSHeapSize\n        : 0;\n\n      for (let i = 0; i < 50; i++) {\n        const { unmount } = renderHook(() => useResponsiveState());\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 1));\n        });\n\n        unmount();\n      }\n\n      const globalWithGc = global as typeof globalThis & { gc?: () => void };\n      if (globalWithGc.gc) {\n        globalWithGc.gc();\n      }\n\n      const finalMemory = performanceWithMemory.memory\n        ? performanceWithMemory.memory.usedJSHeapSize\n        : 0;\n\n      if (performanceWithMemory.memory) {\n        const memoryGrowth = finalMemory - initialMemory;\n        expect(memoryGrowth).toBeLessThan(1024 * 1024);\n      }\n    });\n  });\n\n  describe('Network Performance', () => {\n    it('should optimize image loading for mobile connections', async () => {\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: '3g',\n          downlink: 1.5,\n          rtt: 200,\n        },\n        configurable: true,\n      });\n\n      const container = document.createElement('div');\n      container.innerHTML = `\n        <img src=\"/test-image-1.jpg\" alt=\"Test 1\" />\n        <img src=\"/test-image-2.jpg\" alt=\"Test 2\" />\n        <img src=\"/test-image-3.jpg\" alt=\"Test 3\" />\n      `;\n      document.body.appendChild(container);\n\n      const result = await testPerformance.testImageLoading(container);\n\n      expect(result.totalImages).toBe(3);\n\n      document.body.removeChild(container);\n    });\n\n    it('should preload critical resources efficiently', async () => {\n      const criticalResources = ['/critical-style.css', '/critical-script.js', '/hero-image.jpg'];\n\n      const startTime = performance.now();\n\n      const preloadPromises = criticalResources.map((resource) => {\n        return new Promise((resolve) => {\n          const link = document.createElement('link');\n          link.rel = 'preload';\n          link.href = resource;\n\n          const timeout = setTimeout(() => resolve(resource), 50);\n\n          link.onload = () => {\n            clearTimeout(timeout);\n            resolve(resource);\n          };\n          link.onerror = () => {\n            clearTimeout(timeout);\n            resolve(resource);\n          };\n\n          document.head.appendChild(link);\n        });\n      });\n\n      await Promise.all(preloadPromises);\n\n      const endTime = performance.now();\n      const preloadTime = endTime - startTime;\n\n      expect(preloadTime).toBeLessThan(500);\n    }, 10000);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/real-world.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":55,"fix":{"range":[170,186],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (59). Maximum allowed is 50.","line":6,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":81,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\nimport { useResponsiveState } from '../../responsive';\n\ndescribe('Real-World Performance Scenarios', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('should handle typical user interactions efficiently', async () => {\n    simulateDevice('iPhone 12 Pro');\n\n    const { result } = renderHook(() => useResponsiveState());\n\n    const startTime = performance.now();\n\n    const scenarios = [\n      () => matchMediaUtils.setViewportWidth(390),\n      () => matchMediaUtils.setViewportWidth(844),\n      () => matchMediaUtils.setViewportWidth(390),\n      () => matchMediaUtils.setViewportWidth(375),\n    ];\n\n    for (const scenario of scenarios) {\n      scenario();\n      await act(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 16));\n      });\n    }\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(100);\n    expect(result.current.isMobile).toBe(true);\n  });\n\n  it('should maintain performance during complex responsive layouts', async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n      <div class=\"responsive-grid\">\n        ${Array.from({ length: 50 }, (_, i) => `<div class=\"grid-item\">Item ${i + 1}</div>`).join('')}\n      </div>\n    `;\n    document.body.appendChild(container);\n\n    const startTime = performance.now();\n\n    simulateDevice('iPhone SE');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    simulateDevice('iPad');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    simulateDevice('Desktop Small');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(150);\n\n    document.body.removeChild(container);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/responsive-hooks.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":70,"fix":{"range":[185,201],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":6,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\nimport { useBreakpoint, useResponsiveState } from '../../responsive';\n\ndescribe('Responsive Hook Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('should initialize quickly on mobile devices', async () => {\n    simulateDevice('iPhone SE');\n    matchMediaUtils.setViewportWidth(375);\n\n    const startTime = performance.now();\n\n    const { result } = renderHook(() => useBreakpoint());\n\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const initTime = endTime - startTime;\n\n    expect(initTime).toBeLessThan(50);\n    expect(result.current).toBe('mobile');\n  });\n\n  it('should handle rapid viewport changes efficiently', async () => {\n    const { result } = renderHook(() => useBreakpoint());\n\n    const startTime = performance.now();\n\n    const widths = [375, 390, 414, 428, 375];\n\n    for (const width of widths) {\n      matchMediaUtils.setViewportWidth(width);\n\n      await act(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 1));\n      });\n    }\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(100);\n    expect(result.current).toBe('mobile');\n  });\n\n  it('should maintain performance with multiple responsive hooks', async () => {\n    const startTime = performance.now();\n\n    const { result: breakpoint } = renderHook(() => useBreakpoint());\n    const { result: responsiveState1 } = renderHook(() => useResponsiveState());\n    const { result: responsiveState2 } = renderHook(() => useResponsiveState());\n    const { result: responsiveState3 } = renderHook(() => useResponsiveState());\n\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const initTime = endTime - startTime;\n\n    expect(initTime).toBeLessThan(100);\n\n    expect(breakpoint.current).toBe(responsiveState1.current.breakpoint);\n    expect(responsiveState1.current.breakpoint).toBe(responsiveState2.current.breakpoint);\n    expect(responsiveState2.current.breakpoint).toBe(responsiveState3.current.breakpoint);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":98,"fix":{"range":[71,95],"text":"@/lib/__tests__/responsive-test-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { createMatchMediaMock, simulateDevice, testPerformance } from '../responsive-test-utils';\n\ninterface MobilePerformanceTestSetup {\n  matchMediaUtils: ReturnType<typeof createMatchMediaMock>;\n  cleanup: () => void;\n}\n\nexport const setupMobilePerformanceTest = (): MobilePerformanceTestSetup => {\n  const matchMediaUtils = createMatchMediaMock();\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    configurable: true,\n    value: matchMediaUtils.matchMediaMock,\n  });\n\n  jest.spyOn(performance, 'now').mockImplementation(() => Date.now());\n\n  return {\n    matchMediaUtils,\n    cleanup: () => {\n      matchMediaUtils.cleanup();\n      jest.restoreAllMocks();\n    },\n  };\n};\n\nexport { simulateDevice, testPerformance };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-focus.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[95,103],"text":"@/lib/focus"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useResponsiveFocus } from '../focus';\nimport { setupDom } from './focus/test-utils';\n\ndescribe('useResponsiveFocus', () => {\n  let container: HTMLElement;\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    ({ container, cleanup } = setupDom());\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('restores focus after breakpoint change', async () => {\n    const button = container.querySelector('#btn1') as HTMLButtonElement;\n    button.focus();\n\n    const { rerender } = renderHook(({ bp }) => useResponsiveFocus(bp, true), {\n      initialProps: { bp: 'mobile' },\n    });\n\n    act(() => {\n      rerender({ bp: 'desktop' });\n    });\n\n    document.body.focus();\n\n    await act(async () => {\n      await new Promise((r) => setTimeout(r, 200));\n    });\n\n    expect(document.activeElement).toBe(button);\n  });\n\n  it('skips restoration when disabled', async () => {\n    const button = container.querySelector('#btn1') as HTMLButtonElement;\n    button.focus();\n\n    const { rerender } = renderHook(({ bp, enabled }) => useResponsiveFocus(bp, enabled), {\n      initialProps: { bp: 'mobile', enabled: false },\n    });\n\n    act(() => {\n      rerender({ bp: 'desktop', enabled: false });\n    });\n\n    document.body.focus();\n\n    await act(async () => {\n      await new Promise((r) => setTimeout(r, 200));\n    });\n\n    expect(document.activeElement).toBe(document.body);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/accessibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/breakpoints.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":30,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":91,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":79,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getOrientationByWidth } from './orientation';\n\nimport type { Orientation } from './orientation';\n\n/**\n * Device presets for responsive testing\n */\nexport const devicePresets = {\n  'iPhone SE': { width: 375, height: 667, orientation: 'portrait' },\n  'iPhone 12 Pro': { width: 390, height: 844, orientation: 'portrait' },\n  'iPhone 12 Pro Landscape': { width: 844, height: 390, orientation: 'landscape' },\n  iPad: { width: 768, height: 1024, orientation: 'portrait' },\n  'iPad Landscape': { width: 1024, height: 768, orientation: 'landscape' },\n  'Desktop Small': { width: 1024, height: 768, orientation: 'landscape' },\n  'Desktop Large': { width: 1440, height: 900, orientation: 'landscape' },\n  'Desktop 4K': { width: 3840, height: 2160, orientation: 'landscape' },\n} as const;\n\nexport type DevicePreset = keyof typeof devicePresets;\n\n/**\n * Mock window.matchMedia for responsive testing\n */\ninterface MatchMediaMock {\n  matchMediaMock: jest.Mock;\n  setViewportWidth: (width: number) => void;\n  cleanup: () => void;\n}\n\nexport const createMatchMediaMock = (): MatchMediaMock => {\n  let currentWidth = 1024; // Default desktop width\n\n  const listeners = new Map<string, Set<(e: MediaQueryListEvent) => void>>();\n\n  const evaluate = (query: string) => {\n    const minWidthMatch = query.match(/\\(min-width:\\s*(\\d+)px\\)/);\n    const orientationMatch = query.match(/\\(orientation:\\s*(landscape|portrait)\\)/);\n\n    if (minWidthMatch) {\n      const minWidth = parseInt(minWidthMatch[1], 10);\n      return currentWidth >= minWidth;\n    }\n    if (orientationMatch) {\n      const orientation = orientationMatch[1];\n      return getOrientationByWidth(currentWidth) === orientation;\n    }\n    return false;\n  };\n\n  const matchMediaMock = jest.fn((query: string) => {\n    const mockMediaQueryList = {\n      matches: evaluate(query),\n      media: query,\n      onchange: null as ((e: MediaQueryListEvent) => void) | null,\n      addEventListener: jest.fn((event: string, listener: (e: MediaQueryListEvent) => void) => {\n        if (event !== 'change') return;\n        const set = listeners.get(query) ?? new Set();\n        set.add(listener);\n        listeners.set(query, set);\n      }),\n      removeEventListener: jest.fn((event: string, listener: (e: MediaQueryListEvent) => void) => {\n        if (event !== 'change') return;\n        const set = listeners.get(query);\n        set?.delete(listener);\n      }),\n      dispatchEvent: jest.fn(),\n    };\n\n    return mockMediaQueryList;\n  });\n\n  const notify = () => {\n    listeners.forEach((set, query) => {\n      const matches = evaluate(query);\n      set.forEach((listener) => listener({ matches, media: query } as MediaQueryListEvent));\n    });\n  };\n\n  const setViewportWidth = (width: number) => {\n    currentWidth = width;\n    notify();\n  };\n\n  return {\n    matchMediaMock,\n    setViewportWidth,\n    cleanup: () => {\n      listeners.clear();\n    },\n  };\n};\n\n/**\n * Device simulation utilities\n */\ninterface SimulatedDevice {\n  width: number;\n  height: number;\n  orientation: Orientation;\n}\n\nexport const simulateDevice = (deviceOrWidth: DevicePreset | number): SimulatedDevice => {\n  const device =\n    typeof deviceOrWidth === 'number'\n      ? { width: deviceOrWidth, height: 800, orientation: 'landscape' as const }\n      : devicePresets[deviceOrWidth];\n\n  Object.defineProperty(window, 'innerWidth', {\n    writable: true,\n    configurable: true,\n    value: device.width,\n  });\n\n  Object.defineProperty(window, 'innerHeight', {\n    writable: true,\n    configurable: true,\n    value: device.height,\n  });\n\n  return device;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/orientation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive.orientation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":69,"fix":{"range":[107,120],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":6,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":68,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":10,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":10,"endColumn":31},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":36,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":36,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":61,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":63,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":62,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":62,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook } from '@testing-library/react';\n\nimport { useOrientation, getOrientationValue } from '../responsive';\nimport { testResponsiveHook } from './responsive/test-utils';\n\ndescribe('Responsive Orientation', () => {\n  describe('useOrientation', () => {\n    it('detects orientation correctly', async () => {\n      await testResponsiveHook(\n        () => useOrientation(),\n        [\n          {\n            device: 'iPhone 12 Pro',\n            expected: 'portrait',\n            description: 'Portrait device returns portrait',\n          },\n          {\n            device: 'iPhone 12 Pro Landscape',\n            expected: 'landscape',\n            description: 'Landscape device returns landscape',\n          },\n          {\n            device: 'Desktop Small',\n            expected: 'landscape',\n            description: 'Desktop returns landscape',\n          },\n        ]\n      );\n    });\n\n    it('handles SSR correctly', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      const { result } = renderHook(() => useOrientation());\n      expect(result.current).toBe('portrait');\n\n      globalWithWindow.window = originalWindow;\n    });\n  });\n\n  describe('getOrientationValue', () => {\n    it('returns orientation-specific value when available', () => {\n      const config = { landscape: 'wide' };\n      expect(getOrientationValue(config, 'default', 'landscape')).toBe('wide');\n    });\n\n    it('falls back to default when orientation value is missing', () => {\n      const config = { portrait: 'tall' };\n      expect(getOrientationValue(config, 'default', 'landscape')).toBe('default');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles missing window object', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      expect(() => {\n        renderHook(() => useOrientation());\n      }).not.toThrow();\n\n      globalWithWindow.window = originalWindow;\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive.width.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":24,"fix":{"range":[182,195],"text":"@/lib/responsive"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (96). Maximum allowed is 50.","line":12,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":119,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":26,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":26,"endColumn":30},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":49,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":49,"endColumn":58},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":56,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":56,"endColumn":58},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":57,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":60,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":68,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":68,"endColumn":96},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":107,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":109,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":108,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":108,"endColumn":41},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":115,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":115,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport {\n  useBreakpoint,\n  useResponsiveValue,\n  getResponsiveValue,\n  getVariantForBreakpoint,\n  layoutPatterns,\n} from '../responsive';\nimport { testResponsiveHook, setupMatchMediaMock } from './responsive/test-utils';\n\ndescribe('Responsive Width', () => {\n  let matchMediaUtils: ReturnType<typeof setupMatchMediaMock>;\n\n  beforeEach(() => {\n    matchMediaUtils = setupMatchMediaMock();\n  });\n  afterEach(() => {\n    matchMediaUtils.cleanup();\n    jest.clearAllMocks();\n  });\n\n  describe('useBreakpoint', () => {\n    it('returns correct breakpoints for devices', async () => {\n      await testResponsiveHook(\n        () => useBreakpoint(),\n        [\n          { device: 'iPhone SE', expected: 'mobile', description: 'iPhone SE should be mobile' },\n          { device: 'iPad', expected: 'tablet', description: 'iPad should be tablet' },\n          {\n            device: 'Desktop Small',\n            expected: 'desktop',\n            description: 'Desktop Small should be desktop',\n          },\n          {\n            device: 'Desktop Large',\n            expected: 'wide',\n            description: 'Desktop Large should be wide',\n          },\n        ]\n      );\n    });\n\n    it('handles SSR correctly', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      const { result } = renderHook(() => useBreakpoint());\n      expect(result.current).toBe('mobile');\n\n      globalWithWindow.window = originalWindow;\n    });\n\n    it('updates on resize', () => {\n      const { result } = renderHook(() => useBreakpoint());\n      act(() => {\n        matchMediaUtils.setViewportWidth(375);\n        matchMediaUtils.setViewportWidth(768);\n      });\n      expect(result.current).toBe('tablet');\n    });\n  });\n\n  describe('useResponsiveValue', () => {\n    it('returns values for breakpoints', async () => {\n      await testResponsiveHook(\n        () => useResponsiveValue({ mobile: 'compact', tablet: 'default', desktop: 'expanded' }),\n        [\n          { device: 'iPhone SE', expected: 'compact', description: 'Mobile uses compact value' },\n          { device: 'iPad', expected: 'default', description: 'Tablet uses default value' },\n          {\n            device: 'Desktop Small',\n            expected: 'expanded',\n            description: 'Desktop uses expanded value',\n          },\n        ]\n      );\n    });\n\n    it('falls back to mobile', () => {\n      const config = { mobile: 'fallback' };\n      expect(getResponsiveValue('tablet', config)).toBe('fallback');\n      expect(getResponsiveValue('desktop', config)).toBe('fallback');\n    });\n  });\n\n  describe('helpers', () => {\n    it('maps breakpoints to variants', () => {\n      expect(getVariantForBreakpoint('mobile')).toBe('compact');\n      expect(getVariantForBreakpoint('tablet')).toBe('default');\n      expect(getVariantForBreakpoint('desktop')).toBe('expanded');\n      expect(getVariantForBreakpoint('wide')).toBe('expanded');\n    });\n\n    it('includes pt-safe for mobile and tablet headers', () => {\n      expect(layoutPatterns.adaptiveHeader.mobile).toContain('pt-safe');\n      expect(layoutPatterns.adaptiveHeader.tablet).toContain('pt-safe');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles missing window', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n      expect(() => {\n        renderHook(() => useBreakpoint());\n      }).not.toThrow();\n      globalWithWindow.window = originalWindow;\n    });\n\n    it('handles zero-width viewports', () => {\n      matchMediaUtils.setViewportWidth(0);\n      const { result } = renderHook(() => useBreakpoint());\n      expect(result.current).toBe('mobile');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":100,"fix":{"range":[73,97],"text":"@/lib/__tests__/responsive-test-utils"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { createMatchMediaMock, testResponsiveHook, devicePresets } from '../responsive-test-utils';\n\n/**\n * Set up matchMedia mock for responsive tests\n */\nexport const setupMatchMediaMock = (): ReturnType<typeof createMatchMediaMock> => {\n  const utils = createMatchMediaMock();\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    configurable: true,\n    value: utils.matchMediaMock,\n  });\n  return utils;\n};\n\nexport { testResponsiveHook, devicePresets };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/apiMocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/chapters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/fetch-verses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/get-juz.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/paginate-verses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/random-verse.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (65). Maximum allowed is 50.","line":9,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":91,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getSurahList } from '@/lib/api/chapters';\nimport { apiFetch } from '@/lib/api/client';\nimport { getRandomVerse, clearSurahListCache } from '@/lib/api/verses';\nimport { Verse } from '@/types';\n\njest.mock('@/lib/api/chapters');\njest.mock('@/lib/api/client');\n\ndescribe('getRandomVerse', () => {\n  afterEach(() => {\n    jest.resetAllMocks();\n    jest.restoreAllMocks();\n    clearSurahListCache();\n  });\n\n  const mockSurahs = [\n    { number: 1, name: 'Al-Fatihah', arabicName: 'الفاتحة', verses: 7, meaning: '' },\n    { number: 2, name: 'Al-Baqarah', arabicName: 'البقرة', verses: 286, meaning: '' },\n  ];\n\n  it('uses Math.random by default', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 5, verse_key: '2:72', text_uthmani: 'test' } as Verse,\n    });\n\n    const mathSpy = jest.spyOn(Math, 'random').mockReturnValueOnce(0.5).mockReturnValueOnce(0.25);\n\n    const verse = await getRandomVerse(20);\n\n    expect(mathSpy).toHaveBeenCalledTimes(2);\n    expect(apiFetch).toHaveBeenCalledWith(\n      'verses/by_key/2:72',\n      { translations: '20', fields: 'text_uthmani' },\n      'Failed to fetch random verse'\n    );\n    expect(verse).toMatchObject({ id: 5, verse_key: '2:72', text_uthmani: 'test' });\n  });\n\n  it('uses provided RNG when supplied', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    const rng = jest.fn().mockReturnValueOnce(0).mockReturnValueOnce(0);\n\n    const verse = await getRandomVerse(20, rng);\n\n    expect(rng).toHaveBeenCalledTimes(2);\n    expect(apiFetch).toHaveBeenCalledWith(\n      'verses/by_key/1:1',\n      { translations: '20', fields: 'text_uthmani' },\n      'Failed to fetch random verse'\n    );\n    expect(verse).toMatchObject({ id: 1, verse_key: '1:1', text_uthmani: 'alpha' });\n  });\n\n  it('caches surah list between calls', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    await getRandomVerse(20, () => 0);\n    await getRandomVerse(20, () => 0);\n\n    expect(getSurahList).toHaveBeenCalledTimes(1);\n  });\n\n  it('can clear cached surah list', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    await getRandomVerse(20, () => 0);\n    clearSurahListCache();\n    await getRandomVerse(20, () => 0);\n\n    expect(getSurahList).toHaveBeenCalledTimes(2);\n  });\n\n  it('falls back to local verse on API error', async () => {\n    (getSurahList as jest.Mock).mockRejectedValue(new Error('fail'));\n\n    const verse = await getRandomVerse(20);\n\n    expect(verse).toMatchObject({ id: expect.any(Number), verse_key: expect.any(String) });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/search-verses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/tafsir.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/translations.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/verse-by-id.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/chapters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/fallback-verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/translations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/extras.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":44,"fix":{"range":[141,152],"text":"@/lib/api/chapters"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":38,"fix":{"range":[181,190],"text":"@/lib/api/client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { logger } from '@/src/infrastructure/monitoring/Logger';\nimport { Verse, Juz, Surah } from '@/types';\n\nimport { getSurahList } from '../chapters';\nimport { apiFetch } from '../client';\nimport { normalizeVerse, ApiVerse } from './normalize';\n\nlet surahList: Surah[] | null = null;\n\nexport function clearSurahListCache(): void {\n  surahList = null;\n}\n\ninterface SearchApiResult {\n  verse_key: string;\n  verse_id: number;\n  text: string;\n  translations?: Verse['translations'];\n}\n\nexport async function searchVerses(query: string): Promise<Verse[]> {\n  const data = await apiFetch<{ search?: { results: SearchApiResult[] } }>(\n    'search',\n    { q: query, size: '20', translations: '20' },\n    'Failed to search verses'\n  );\n  const results: SearchApiResult[] = data.search?.results || [];\n  return results.map((r) => ({\n    id: r.verse_id,\n    verse_key: r.verse_key,\n    text_uthmani: r.text,\n    translations: r.translations,\n  })) as Verse[];\n}\n\nexport async function getJuz(juzId: string | number): Promise<Juz> {\n  const data = await apiFetch<{ juz: Juz }>(`juzs/${juzId}`, {}, 'Failed to fetch juz');\n  return data.juz as Juz;\n}\n\nexport async function getRandomVerse(\n  translationId: number,\n  rng: () => number = Math.random\n): Promise<Verse> {\n  try {\n    const surahs = surahList ?? (surahList = await getSurahList());\n    const randomSurah = surahs[Math.floor(rng() * surahs.length)];\n    const randomAyah = Math.floor(rng() * randomSurah.verses) + 1;\n    const verseKey = `${randomSurah.number}:${randomAyah}`;\n    const data = await apiFetch<{ verse: ApiVerse }>(\n      `verses/by_key/${verseKey}`,\n      { translations: translationId.toString(), fields: 'text_uthmani' },\n      'Failed to fetch random verse'\n    );\n    return normalizeVerse(data.verse);\n  } catch (error) {\n    logger.warn('API unavailable, using fallback verse:', undefined, error as Error);\n    const { fallbackVerse } = await import('../fallback-verse');\n    return fallbackVerse;\n  }\n}\n\nexport async function getVerseById(\n  verseId: string | number,\n  translationId: number\n): Promise<Verse> {\n  const data = await apiFetch<{ verse: ApiVerse }>(\n    `verses/${verseId}`,\n    { translations: translationId.toString(), fields: 'text_uthmani' },\n    'Failed to fetch verse'\n  );\n  return normalizeVerse(data.verse);\n}\n\n/**\n * Fetch a single verse by its composite key (e.g., \"2:255\").\n */\nexport async function getVerseByKey(verseKey: string, translationId: number): Promise<Verse> {\n  const data = await apiFetch<{ verse: ApiVerse }>(\n    `verses/by_key/${encodeURIComponent(verseKey)}`,\n    { translations: translationId.toString(), fields: 'text_uthmani' },\n    'Failed to fetch verse by key'\n  );\n  return normalizeVerse(data.verse);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/fetchers.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":38,"fix":{"range":[60,69],"text":"@/lib/api/client"}},{"ruleId":"max-params","severity":1,"message":"Async function 'fetchVerses' has too many parameters (6). Maximum allowed is 4.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":26,"endColumn":34},{"ruleId":"max-params","severity":1,"message":"Function 'getVersesByChapter' has too many parameters (5). Maximum allowed is 4.","line":63,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":63,"endColumn":35},{"ruleId":"max-params","severity":1,"message":"Function 'getVersesByJuz' has too many parameters (5). Maximum allowed is 4.","line":73,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":73,"endColumn":31},{"ruleId":"max-params","severity":1,"message":"Function 'getVersesByPage' has too many parameters (5). Maximum allowed is 4.","line":83,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":83,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Verse } from '@/types';\n\nimport { apiFetch } from '../client';\nimport { normalizeVerse, ApiVerse } from './normalize';\n\nimport type { LanguageCode } from '@/lib/text/languageCodes';\n\nexport interface PaginatedVerses {\n  verses: Verse[];\n  totalPages: number;\n}\n\n/**\n * Fetch verses grouped by chapter, juz or page and return pagination info.\n *\n * @param type            Grouping method for the verses.\n * @param id              Identifier for the grouping (chapter/juz/page).\n * @param translationIds  One or more translation IDs.\n * @param page            Page number (1-indexed).\n * @param perPage         Number of verses per page.\n * @param wordLang        Language code for word translations.\n *\n * Handles single vs array translation IDs and normalizes API pagination\n * metadata, defaulting to one page when the server omits totals.\n */\nexport async function fetchVerses(\n  type: 'by_chapter' | 'by_juz' | 'by_page',\n  id: string | number,\n  translationIds: number | number[],\n  page = 1,\n  perPage = 20,\n  wordLang: string = 'en'\n): Promise<PaginatedVerses> {\n  const lang = wordLang as LanguageCode;\n  const translationIdsArray = Array.isArray(translationIds) ? translationIds : [translationIds];\n  const translationParam = translationIdsArray.join(',');\n\n  const data = await apiFetch<{\n    verses: ApiVerse[];\n    meta?: { total_pages: number };\n    pagination?: { total_pages: number };\n  }>(\n    `verses/${type}/${id}`,\n    {\n      language: lang,\n      words: 'true',\n      word_translation_language: lang,\n      word_fields: 'text_uthmani',\n      translations: translationParam,\n      fields: 'text_uthmani,audio',\n      per_page: perPage.toString(),\n      page: page.toString(),\n    },\n    'Failed to fetch verses'\n  );\n  const totalPages = data.meta?.total_pages ?? data.pagination?.total_pages ?? 1;\n  return {\n    totalPages,\n    verses: data.verses.map((v) => normalizeVerse(v, lang)),\n  };\n}\n\nexport function getVersesByChapter(\n  chapterId: string | number,\n  translationIds: number | number[],\n  page = 1,\n  perPage = 20,\n  wordLang: string = 'en'\n): Promise<PaginatedVerses> {\n  return fetchVerses('by_chapter', chapterId, translationIds, page, perPage, wordLang);\n}\n\nexport function getVersesByJuz(\n  juzId: string | number,\n  translationIds: number | number[],\n  page = 1,\n  perPage = 20,\n  wordLang: string = 'en'\n): Promise<PaginatedVerses> {\n  return fetchVerses('by_juz', juzId, translationIds, page, perPage, wordLang);\n}\n\nexport function getVersesByPage(\n  pageId: string | number,\n  translationIds: number | number[],\n  page = 1,\n  perPage = 20,\n  wordLang: string = 'en'\n): Promise<PaginatedVerses> {\n  return fetchVerses('by_page', pageId, translationIds, page, perPage, wordLang);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/normalize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/audio/__tests__/reciters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/audio/reciters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/focusable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/hooks.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { getFocusableElements } from './focusable';\n\ntype FocusHandlers = { saveFocus: () => void; restoreFocus: () => void };\n\nexport const useFocusTrap = (\n  isActive: boolean,\n  containerRef: React.RefObject<HTMLElement>\n): void => {\n  const prev = React.useRef<HTMLElement | null>(null);\n  React.useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    prev.current = document.activeElement as HTMLElement;\n    const focusables = getFocusableElements(containerRef.current);\n    if (!focusables.length) return;\n    focusables[0].focus();\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n      if (focusables.length === 1) {\n        e.preventDefault();\n        return;\n      }\n      const first = focusables[0];\n      const last = focusables[focusables.length - 1];\n      if (e.shiftKey && document.activeElement === first) {\n        e.preventDefault();\n        last.focus();\n      } else if (!e.shiftKey && document.activeElement === last) {\n        e.preventDefault();\n        first.focus();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isActive, containerRef]);\n  React.useEffect(() => {\n    if (!isActive && prev.current) {\n      prev.current.focus();\n      prev.current = null;\n    }\n  }, [isActive]);\n};\n\nexport const useFocusRestoration = (): FocusHandlers => {\n  const saved = React.useRef<string | null>(null);\n  const saveFocus = React.useCallback(() => {\n    const el = document.activeElement as HTMLElement;\n    if (el?.id) saved.current = el.id;\n  }, []);\n  const restoreFocus = React.useCallback(() => {\n    if (saved.current) {\n      document.getElementById(saved.current)?.focus();\n      saved.current = null;\n    }\n  }, []);\n  return { saveFocus, restoreFocus };\n};\n\nexport const useAutoFocus = (\n  shouldFocus: boolean,\n  ref: React.RefObject<HTMLElement>,\n  delay = 100\n): void => {\n  React.useEffect(() => {\n    if (!shouldFocus || !ref.current) return;\n    const t = setTimeout(() => ref.current?.focus(), delay);\n    return () => clearTimeout(t);\n  }, [shouldFocus, ref, delay]);\n};\n\nexport const useResponsiveFocus = (\n  breakpoint: 'mobile' | 'tablet' | 'desktop',\n  enabled = true\n): FocusHandlers => {\n  const focus = useFocusRestoration();\n  React.useEffect(() => {\n    if (!enabled) return;\n    focus.saveFocus();\n    const t = setTimeout(() => focus.restoreFocus(), 150);\n    return () => clearTimeout(t);\n  }, [breakpoint, focus, enabled]);\n  return enabled ? focus : { saveFocus() {}, restoreFocus() {} };\n};\n\nexport const useRovingTabIndex = (\n  items: React.RefObject<HTMLElement>[],\n  activeIndex: number,\n  onActiveIndexChange: (index: number) => void\n): void => {\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key))\n        return;\n      e.preventDefault();\n      let idx = activeIndex;\n      switch (e.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft':\n          idx = activeIndex > 0 ? activeIndex - 1 : items.length - 1;\n          break;\n        case 'ArrowDown':\n        case 'ArrowRight':\n          idx = activeIndex < items.length - 1 ? activeIndex + 1 : 0;\n          break;\n        case 'Home':\n          idx = 0;\n          break;\n        case 'End':\n          idx = items.length - 1;\n          break;\n      }\n      onActiveIndexChange(idx);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [activeIndex, items.length, onActiveIndexChange]);\n  React.useEffect(() => {\n    items.forEach((ref, i) => {\n      if (ref.current) {\n        ref.current.tabIndex = i === activeIndex ? 0 : -1;\n        if (i === activeIndex) ref.current.focus();\n      }\n    });\n  }, [activeIndex, items]);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useDraggableSelection.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useResourceSearch.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useScrollCentering.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (98). Maximum allowed is 50.","line":19,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":123,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\n\nimport { useScrollCentering } from '@/lib/hooks/useScrollCentering';\n\ntype Tab = 'Surah' | 'Juz' | 'Page';\n\nconst makeRect = (top: number, bottom: number): DOMRect => ({\n  top,\n  bottom,\n  left: 0,\n  right: 0,\n  width: 0,\n  height: bottom - top,\n  x: 0,\n  y: top,\n  toJSON: () => ({}),\n});\n\ndescribe('useScrollCentering', () => {\n  const scrollRef = { current: document.createElement('div') } as React.RefObject<HTMLDivElement>;\n\n  const createEls = () => {\n    const surahEl = document.createElement('div');\n    const juzEl = document.createElement('div');\n    surahEl.scrollIntoView = jest.fn();\n    juzEl.scrollIntoView = jest.fn();\n    scrollRef.current!.innerHTML = '';\n    scrollRef.current!.appendChild(surahEl);\n    scrollRef.current!.appendChild(juzEl);\n    return { surahEl, juzEl };\n  };\n\n  beforeEach(() => {\n    sessionStorage.clear();\n    jest.restoreAllMocks();\n    scrollRef.current!.innerHTML = '';\n  });\n\n  it('centers active element on initial render when outside view', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).toHaveBeenCalledWith({ block: 'center' });\n  });\n\n  it('does not recenter when element is already in view after scrolling', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(10, 20));\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 50, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).not.toHaveBeenCalled();\n  });\n\n  it('centers element after switching tabs', () => {\n    const { surahEl, juzEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(juzEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    const { result, rerender } = renderHook(\n      ({ activeTab }) =>\n        useScrollCentering<Tab>({\n          scrollRef,\n          activeTab,\n          selectedIds: { Surah: 1, Juz: 1, Page: null },\n          scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n        }),\n      { initialProps: { activeTab: 'Surah' as Tab } }\n    );\n    act(() => result.current.prepareForTabSwitch('Juz'));\n    delete surahEl.dataset.active;\n    juzEl.dataset.active = 'true';\n    rerender({ activeTab: 'Juz' });\n    expect(juzEl.scrollIntoView).toHaveBeenCalledWith({ block: 'center' });\n  });\n\n  it('skipNextCentering prevents centering and clears the session flag', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    sessionStorage.setItem('skipCenterSurah', '1');\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).not.toHaveBeenCalled();\n    expect(sessionStorage.getItem('skipCenterSurah')).toBeNull();\n  });\n\n  it('exposes skipNextCentering helper', () => {\n    const { result } = renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    act(() => result.current.skipNextCentering('Surah'));\n    expect(sessionStorage.getItem('skipCenterSurah')).toBe('1');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useScrollPersistence.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (108). Maximum allowed is 50.","line":7,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":121,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\n\nimport { useScrollPersistence } from '@/lib/hooks/useScrollPersistence';\n\ntype Tab = 'Surah' | 'Juz' | 'Page';\n\ndescribe('useScrollPersistence', () => {\n  const scrollRef = { current: document.createElement('div') } as React.RefObject<HTMLDivElement>;\n  const scrollTops: Record<Tab, number> = { Surah: 0, Juz: 0, Page: 0 };\n  const setScrollTops: Record<Tab, jest.Mock> = {\n    Surah: jest.fn((top: number) => {\n      scrollTops.Surah = top;\n    }),\n    Juz: jest.fn((top: number) => {\n      scrollTops.Juz = top;\n    }),\n    Page: jest.fn((top: number) => {\n      scrollTops.Page = top;\n    }),\n  };\n  const storageKeys: Record<Tab, string> = {\n    Surah: 'surahScrollTop',\n    Juz: 'juzScrollTop',\n    Page: 'pageScrollTop',\n  };\n\n  beforeEach(() => {\n    sessionStorage.clear();\n    Object.values(setScrollTops).forEach((fn) => fn.mockClear());\n    scrollTops.Surah = 0;\n    scrollTops.Juz = 0;\n    scrollTops.Page = 0;\n  });\n\n  it('restores scroll position from sessionStorage', () => {\n    sessionStorage.setItem('surahScrollTop', '30');\n    renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    expect(scrollRef.current?.scrollTop).toBe(30);\n  });\n\n  it('defaults to state value when sessionStorage is empty', () => {\n    scrollTops.Surah = 40;\n    renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    expect(scrollRef.current?.scrollTop).toBe(40);\n  });\n\n  it('stores scroll on scroll event', () => {\n    const setSpy = jest.spyOn(sessionStorage, 'setItem');\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n\n    act(() => {\n      result.current.handleScroll({\n        currentTarget: { scrollTop: 42 },\n      } as React.UIEvent<HTMLDivElement>);\n    });\n    expect(setScrollTops.Surah).toHaveBeenCalledWith(42);\n    expect(setSpy).toHaveBeenCalledWith('surahScrollTop', '42');\n    setSpy.mockRestore();\n  });\n\n  it('prepares for tab switch', () => {\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    act(() => {\n      scrollRef.current!.scrollTop = 15;\n      result.current.prepareForTabSwitch();\n    });\n    expect(setScrollTops.Surah).toHaveBeenCalledWith(15);\n  });\n\n  it('remembers scroll for a tab', () => {\n    const setSpy = jest.spyOn(sessionStorage, 'setItem');\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    act(() => {\n      scrollRef.current!.scrollTop = 25;\n      result.current.rememberScroll('Page');\n    });\n    expect(setScrollTops.Page).toHaveBeenCalledWith(25);\n    expect(setSpy).toHaveBeenCalledWith('pageScrollTop', '25');\n    setSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useSelectableResources.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (63). Maximum allowed is 50.","line":18,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":94,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useSelectableResources } from '@/lib/hooks/useSelectableResources';\n\ninterface Item {\n  id: number;\n  name: string;\n  lang: string;\n}\n\nconst resources: Item[] = [\n  { id: 1, name: 'Eng A', lang: 'English' },\n  { id: 2, name: 'Eng B', lang: 'English' },\n  { id: 3, name: 'Arb A', lang: 'Arabic' },\n  { id: 4, name: 'Arb B', lang: 'Arabic' },\n];\n\ndescribe('useSelectableResources', () => {\n  it('groups resources by language and filters search results', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({ resources, selectionLimit: 3 })\n    );\n\n    expect(result.current.languages).toEqual(['All', 'Arabic', 'English']);\n\n    const groups = result.current.groupedResources;\n    expect(groups.English.map((r) => r.id)).toEqual([1, 2]);\n    expect(groups.Arabic.map((r) => r.id)).toEqual([3, 4]);\n\n    act(() => result.current.setSearchTerm('arb'));\n    expect(result.current.groupedResources.Arabic.map((r) => r.id)).toEqual([3, 4]);\n    expect(result.current.groupedResources.English).toBeUndefined();\n  });\n\n  it('enforces selectionLimit and reports toggle status', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({ resources, selectionLimit: 2 })\n    );\n\n    let changed = false;\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(1);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.selectedIds.has(1)).toBe(true);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(2);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.orderedSelection).toEqual([1, 2]);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(3);\n    });\n    expect(changed).toBe(false);\n    expect(result.current.selectedIds.size).toBe(2);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(1);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.selectedIds.has(1)).toBe(false);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(3);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.orderedSelection).toEqual([2, 3]);\n  });\n\n  it('reorders selections via drag and drop', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({\n        resources,\n        selectionLimit: 3,\n        initialSelectedIds: [1, 2, 3],\n      })\n    );\n\n    const dragStartEvent = {\n      dataTransfer: { effectAllowed: '' },\n    } as unknown as React.DragEvent<HTMLDivElement>;\n    act(() => result.current.handleDragStart(dragStartEvent, 1));\n\n    const dropEvent = {\n      preventDefault: () => {},\n    } as unknown as React.DragEvent<HTMLDivElement>;\n    act(() => result.current.handleDrop(dropEvent, 3));\n\n    expect(result.current.orderedSelection).toEqual([2, 3, 1]);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useDraggableSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useResourceSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useScrollCentering.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (58). Maximum allowed is 50.","line":15,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RefObject, useCallback, useEffect, useLayoutEffect, useRef } from 'react';\n\ninterface ScrollCenteringOptions<T extends string> {\n  scrollRef: RefObject<HTMLDivElement | null>;\n  activeTab: T;\n  selectedIds: Record<T, number | null>;\n  scrollTops: Record<T, number>;\n}\n\ninterface ScrollCenteringResult<T extends string> {\n  skipNextCentering: (tab: T) => void;\n  prepareForTabSwitch: (nextTab: T) => void;\n}\n\nexport const useScrollCentering = <T extends string>({\n  scrollRef,\n  activeTab,\n  selectedIds,\n  scrollTops,\n}: ScrollCenteringOptions<T>): ScrollCenteringResult<T> => {\n  const tabs = Object.keys(selectedIds) as T[];\n  const shouldCenterRef = useRef<Record<T, boolean>>(\n    tabs.reduce((acc, t) => ({ ...acc, [t]: true }), {} as Record<T, boolean>)\n  );\n\n  useLayoutEffect(() => {\n    tabs.forEach((tab) => {\n      if (sessionStorage.getItem(`skipCenter${tab}`) === '1') {\n        shouldCenterRef.current[tab] = false;\n        sessionStorage.removeItem(`skipCenter${tab}`);\n      }\n    });\n  }, [tabs]);\n\n  const prevIds = useRef<Record<T, number | null>>(\n    tabs.reduce((acc, t) => ({ ...acc, [t]: selectedIds[t] }), {} as Record<T, number | null>)\n  );\n\n  useEffect(() => {\n    tabs.forEach((tab) => {\n      const currentId = selectedIds[tab];\n      if (prevIds.current[tab] !== currentId) {\n        if (activeTab !== tab) {\n          shouldCenterRef.current[tab] = true;\n        }\n        prevIds.current[tab] = currentId;\n      }\n    });\n  }, [activeTab, selectedIds, tabs]);\n\n  useLayoutEffect(() => {\n    const container = scrollRef.current;\n    if (!container) return;\n    const activeEl = container.querySelector<HTMLElement>('[data-active=\"true\"]');\n    if (activeEl) {\n      const containerRect = container.getBoundingClientRect();\n      const activeRect = activeEl.getBoundingClientRect();\n      const isOutside =\n        activeRect.top < containerRect.top || activeRect.bottom > containerRect.bottom;\n      if (shouldCenterRef.current[activeTab] && (scrollTops[activeTab] === 0 || isOutside)) {\n        activeEl.scrollIntoView({ block: 'center' });\n      }\n    }\n    shouldCenterRef.current[activeTab] = false;\n  }, [activeTab, scrollRef, scrollTops, selectedIds]);\n\n  const skipNextCentering = useCallback((tab: T): void => {\n    sessionStorage.setItem(`skipCenter${tab}`, '1');\n  }, []);\n\n  const prepareForTabSwitch = useCallback(\n    (nextTab: T): void => {\n      shouldCenterRef.current[nextTab] = true;\n    },\n    [shouldCenterRef]\n  );\n\n  return { skipNextCentering, prepareForTabSwitch };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useScrollPersistence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useSelectableResources.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":18,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":71,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState } from 'react';\n\nimport { useDraggableSelection } from './useDraggableSelection';\nimport { useResourceSearch } from './useResourceSearch';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\ninterface SelectableOptions<T extends Resource> {\n  resources: T[];\n  selectionLimit: number;\n  initialSelectedIds?: number[];\n  languageSort?: (a: string, b: string) => number;\n}\n\nexport const useSelectableResources = <T extends Resource>({\n  resources,\n  selectionLimit,\n  initialSelectedIds = [],\n  languageSort,\n}: SelectableOptions<T>) => {\n  const [selectedIds, setSelectedIds] = useState(new Set(initialSelectedIds));\n  const drag = useDraggableSelection(initialSelectedIds);\n  const search = useResourceSearch<T>({ resources, languageSort });\n\n  const setSelections = useCallback(\n    (ids: number[]) => {\n      setSelectedIds(new Set(ids));\n      drag.setOrderedSelection(ids);\n    },\n    [drag]\n  );\n\n  const handleSelectionToggle = useCallback(\n    (id: number): boolean => {\n      const next = new Set(selectedIds);\n      let order = [...drag.orderedSelection];\n      let changed = false;\n      if (next.has(id)) {\n        next.delete(id);\n        order = order.filter((i) => i !== id);\n        changed = true;\n      } else if (next.size < selectionLimit) {\n        next.add(id);\n        order.push(id);\n        changed = true;\n      }\n      if (changed) {\n        setSelectedIds(next);\n        drag.setOrderedSelection(order);\n      }\n      return changed;\n    },\n    [drag, selectedIds, selectionLimit]\n  );\n\n  return {\n    ...search,\n    selectedIds,\n    orderedSelection: drag.orderedSelection,\n    handleSelectionToggle,\n    handleDragStart: drag.handleDragStart,\n    handleDragOver: drag.handleDragOver,\n    handleDrop: drag.handleDrop,\n    handleDragEnd: drag.handleDragEnd,\n    draggedId: drag.draggedId,\n    setSelections,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/breakpoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/container.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport type ContainerSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ContainerConfig<T> {\n  xs?: T;\n  sm?: T;\n  md?: T;\n  lg?: T;\n  xl?: T;\n}\n\nexport const containerClasses = {\n  container: '@container',\n  containerInline: '@container/inline',\n  containerSize: '@container/size',\n  xs: '@xs',\n  sm: '@sm',\n  md: '@md',\n  lg: '@lg',\n  xl: '@xl',\n  '320px': '@[320px]',\n  '384px': '@[384px]',\n  '640px': '@[640px]',\n  '768px': '@[768px]',\n  '1024px': '@[1024px]',\n  '1280px': '@[1280px]',\n} as const;\n\nexport const getContainerValue = <T>(config: ContainerConfig<T>, fallback: T): T => {\n  return fallback;\n};\n\ninterface UseContainerResult {\n  containerSize: ContainerSize;\n  isXs: boolean;\n  isSm: boolean;\n  isMd: boolean;\n  isLg: boolean;\n  isXl: boolean;\n  isSmUp: boolean;\n  isMdUp: boolean;\n  isLgUp: boolean;\n}\n\nexport const useContainer = (containerRef?: React.RefObject<HTMLElement>): UseContainerResult => {\n  const [containerSize, setContainerSize] = React.useState<ContainerSize>('sm');\n\n  React.useEffect(() => {\n    if (!containerRef?.current) return;\n\n    const updateContainerSize = () => {\n      if (!containerRef.current) return;\n\n      const { width } = containerRef.current.getBoundingClientRect();\n\n      if (width >= 1280) setContainerSize('xl');\n      else if (width >= 1024) setContainerSize('lg');\n      else if (width >= 768) setContainerSize('md');\n      else if (width >= 384) setContainerSize('sm');\n      else setContainerSize('xs');\n    };\n\n    updateContainerSize();\n\n    const resizeObserver = new ResizeObserver(updateContainerSize);\n    resizeObserver.observe(containerRef.current);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [containerRef]);\n\n  return {\n    containerSize,\n    isXs: containerSize === 'xs',\n    isSm: containerSize === 'sm',\n    isMd: containerSize === 'md',\n    isLg: containerSize === 'lg',\n    isXl: containerSize === 'xl',\n    isSmUp: ['sm', 'md', 'lg', 'xl'].includes(containerSize),\n    isMdUp: ['md', 'lg', 'xl'].includes(containerSize),\n    isLgUp: ['lg', 'xl'].includes(containerSize),\n  };\n};\n\nexport const getContainerClasses = (containerName?: string): string => {\n  return containerName ? `@container/${containerName}` : '@container';\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/index.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":47,"fix":{"range":[36,44],"text":"@/lib/focus"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useResponsiveFocus } from '../focus';\nimport { useBreakpoint, type BreakpointKey } from './breakpoints';\nimport { useOrientation, type OrientationKey } from './orientation';\nimport { getVariantForBreakpoint, type ComponentVariant } from './variants';\n\nexport * from './breakpoints';\nexport * from './container';\nexport * from './orientation';\nexport * from './variants';\n\nexport const responsiveClasses = {\n  container: 'w-full max-w-sm mx-auto md:max-w-2xl lg:max-w-4xl xl:max-w-6xl',\n  stack: 'flex flex-col gap-3 sm:gap-4 lg:gap-6',\n  row: 'flex flex-col gap-3 sm:flex-row sm:gap-4 lg:gap-6',\n  grid: 'grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4',\n  heading: 'text-lg font-semibold sm:text-xl lg:text-2xl',\n  body: 'text-sm sm:text-base lg:text-lg leading-relaxed',\n  caption: 'text-xs sm:text-sm text-muted',\n  timeLabel: 'text-[10px] md:text-[11px] tabular-nums text-muted',\n  button: 'min-h-touch px-3 py-2 sm:px-4 sm:py-2.5 lg:px-6 lg:py-3',\n  input: 'min-h-touch px-3 py-2 sm:px-4 sm:py-2.5',\n  padding: 'p-3 sm:p-4 lg:p-6 xl:p-8',\n  margin: 'm-3 sm:m-4 lg:m-6 xl:m-8',\n  gap: 'gap-3 sm:gap-4 lg:gap-6 xl:gap-8',\n  timeDisplay: 'min-w-[72px] md:min-w-[88px]',\n  nav: 'flex items-center justify-between p-3 sm:p-4 lg:p-6',\n  sidebar: 'w-full sm:w-80 lg:w-80 transition-transform duration-300',\n} as const;\n\nexport const iconClasses = {\n  xs: 'h-3 w-3 sm:h-3.5 sm:w-3.5',\n  sm: 'h-4 w-4 sm:h-4 sm:w-4',\n  md: 'h-5 w-5 sm:h-5 sm:w-5',\n  lg: 'h-6 w-6 sm:h-6 sm:w-6',\n  xl: 'h-8 w-8 sm:h-8 sm:w-8',\n  touch: 'h-[18px] w-[18px] sm:h-5 sm:w-5',\n  stroke: 'stroke-[1.5] sm:stroke-[1.75]',\n} as const;\n\nexport const touchClasses = {\n  target: 'min-h-touch min-w-touch',\n  gesture: 'touch-manipulation select-none',\n  focus: 'focus-visible:ring-2 focus-visible:ring-accent focus-visible:outline-none',\n  active: 'active:scale-95 transition-transform',\n} as const;\n\nexport const performanceClasses = {\n  transform: 'will-change-transform',\n  scroll: 'scrollbar-hide scroll-smooth',\n  lazy: 'content-visibility-auto contain-intrinsic-size-auto',\n} as const;\n\nexport const layoutPatterns = {\n  adaptiveSidebar: {\n    mobile: 'fixed bottom-0 left-0 right-0 h-auto max-h-[50dvh] rounded-t-2xl',\n    tablet: 'fixed top-0 right-0 h-full w-80 rounded-l-2xl',\n    desktop: 'static h-full w-80 rounded-xl',\n  },\n  adaptiveHeader: {\n    mobile:\n      'fixed top-0 left-0 right-0 min-h-[calc(3.5rem+env(safe-area-inset-top))] pt-safe pl-safe pr-safe',\n    tablet:\n      'fixed top-0 left-0 right-0 min-h-[calc(4rem+env(safe-area-inset-top))] pt-safe pl-safe pr-safe',\n    desktop: 'static h-20 px-6',\n  },\n  adaptiveContent: {\n    mobile: 'pt-14 bottom-nav-space',\n    tablet: 'pt-16 bottom-nav-space',\n    desktop: 'p-0',\n  },\n  orientation: {\n    portrait: 'portrait:flex-col',\n    landscape: 'landscape:flex-row',\n    portraitOnly: 'portrait:block landscape:hidden',\n    landscapeOnly: 'landscape:block portrait:hidden',\n  },\n} as const;\n\ninterface ResponsiveState {\n  breakpoint: BreakpointKey;\n  orientation: OrientationKey;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isPortrait: boolean;\n  isLandscape: boolean;\n  variant: ComponentVariant;\n  focusManagement: ReturnType<typeof useResponsiveFocus>;\n}\n\nexport const useResponsiveState = (enableFocusManagement = false): ResponsiveState => {\n  const breakpoint = useBreakpoint();\n  const orientation = useOrientation();\n\n  const focusManagement = useResponsiveFocus(\n    breakpoint === 'mobile' ? 'mobile' : breakpoint === 'tablet' ? 'tablet' : 'desktop',\n    enableFocusManagement\n  );\n\n  return {\n    breakpoint,\n    orientation,\n    isMobile: breakpoint === 'mobile',\n    isTablet: breakpoint === 'tablet',\n    isDesktop: breakpoint === 'desktop' || breakpoint === 'wide',\n    isPortrait: orientation === 'portrait',\n    isLandscape: orientation === 'landscape',\n    variant: getVariantForBreakpoint(breakpoint),\n    focusManagement,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/orientation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/variants.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { useBreakpoint, type BreakpointKey } from './breakpoints';\n\nexport interface ResponsiveConfig<T> {\n  mobile: T;\n  tablet?: T;\n  desktop?: T;\n  wide?: T;\n}\n\nexport const getResponsiveValue = <T>(\n  breakpoint: BreakpointKey,\n  config: ResponsiveConfig<T>\n): T => {\n  return config[breakpoint] ?? config.tablet ?? config.mobile;\n};\n\nexport const useResponsiveValue = <T>(config: ResponsiveConfig<T>): T => {\n  const breakpoint = useBreakpoint();\n  return getResponsiveValue<T>(breakpoint, config);\n};\n\nexport type ComponentVariant = 'compact' | 'default' | 'expanded';\n\nexport const getVariantForBreakpoint = (breakpoint: BreakpointKey): ComponentVariant => {\n  switch (breakpoint) {\n    case 'mobile':\n      return 'compact';\n    case 'tablet':\n      return 'default';\n    case 'desktop':\n    case 'wide':\n      return 'expanded';\n    default:\n      return 'default';\n  }\n};\n\nexport const createResponsiveComponent = <P extends object>(\n  baseComponent: React.ComponentType<P>,\n  adaptations: { [K in ComponentVariant]?: Partial<P> }\n): React.ComponentType<P> => {\n  const ResponsiveComponent = (props: P) => {\n    const breakpoint = useBreakpoint();\n    const variant = getVariantForBreakpoint(breakpoint);\n    const adaptedProps = { ...props, ...adaptations[variant] };\n\n    return React.createElement(baseComponent, adaptedProps);\n  };\n  ResponsiveComponent.displayName = `Responsive(${baseComponent.displayName || baseComponent.name || 'Component'})`;\n  return ResponsiveComponent;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/styles/patterns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/__tests__/applyArabicFont.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":54,"fix":{"range":[33,51],"text":"@/lib/tafsir/applyArabicFont"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { applyArabicFont } from '../applyArabicFont';\n\ndescribe('applyArabicFont', () => {\n  it('wraps Arabic text with span using provided font', () => {\n    const html = 'Hello سلام world';\n    const result = applyArabicFont(html, 'Amiri');\n    expect(result).toBe('Hello <span style=\"font-family:&quot;Amiri&quot;;\">سلام</span> world');\n  });\n\n  it('leaves strings without Arabic characters unchanged', () => {\n    const html = 'Hello world';\n    expect(applyArabicFont(html, 'Amiri')).toBe(html);\n  });\n\n  it('replaces existing spans to avoid nesting', () => {\n    const initial = applyArabicFont('سلام', 'Font1');\n    const result = applyArabicFont(initial, 'Font2');\n    expect(result).toBe('<span style=\"font-family:&quot;Font2&quot;;\">سلام</span>');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/__tests__/tafsirCache.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":95,"fix":{"range":[142,156],"text":"@/lib/tafsir/tafsirCache"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":11,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":73,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { container } from '@/src/infrastructure/di/Container';\n\nimport { CACHE_TTL, MAX_CACHE_SIZE, clearTafsirCache, getTafsirCached } from '../tafsirCache';\n\njest.mock('@/src/infrastructure/di/Container', () => ({\n  container: {\n    getTafsirRepository: jest.fn(),\n  },\n}));\n\ndescribe('getTafsirCached', () => {\n  const repository = { getTafsirByVerse: jest.fn() } as { getTafsirByVerse: jest.Mock };\n\n  beforeEach(() => {\n    clearTafsirCache();\n    repository.getTafsirByVerse.mockReset();\n    (container.getTafsirRepository as jest.Mock).mockReturnValue(repository);\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    clearTafsirCache();\n  });\n\n  it('returns cached value on repeated calls', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('tafsir');\n    const first = await getTafsirCached('1:1', 169);\n    const second = await getTafsirCached('1:1', 169);\n    expect(first).toBe('tafsir');\n    expect(second).toBe('tafsir');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(1);\n  });\n\n  it('expires cache entries based on TTL', async () => {\n    jest.useFakeTimers();\n    repository.getTafsirByVerse.mockResolvedValue('tafsir1');\n    jest.setSystemTime(0);\n    await getTafsirCached('1:1');\n    jest.setSystemTime(CACHE_TTL + 1);\n    repository.getTafsirByVerse.mockResolvedValue('tafsir2');\n    const result = await getTafsirCached('1:1');\n    expect(result).toBe('tafsir2');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(2);\n  });\n\n  it('evicts oldest entry when cache limit exceeded', async () => {\n    jest.useFakeTimers();\n    repository.getTafsirByVerse.mockImplementation((verseKey: string) =>\n      Promise.resolve(`tafsir-${verseKey}`)\n    );\n    for (let i = 0; i < MAX_CACHE_SIZE; i++) {\n      jest.setSystemTime(i);\n      await getTafsirCached(`${i}:1`);\n    }\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE);\n    jest.setSystemTime(MAX_CACHE_SIZE);\n    await getTafsirCached(`${MAX_CACHE_SIZE}:1`);\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE + 1);\n    jest.setSystemTime(MAX_CACHE_SIZE + 1);\n    await getTafsirCached('0:1');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE + 2);\n  });\n\n  it('clears the cache', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('first');\n    await getTafsirCached('1:1');\n    clearTafsirCache();\n    repository.getTafsirByVerse.mockResolvedValue('second');\n    const result = await getTafsirCached('1:1');\n    expect(result).toBe('second');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(2);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/applyArabicFont.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/tafsirCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/languageMappings.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/sanitizeHtml.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/sanitizeHtml.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/stripHtml.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/tajweed.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/languageCodes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/sanitizeHtml.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/stripHtml.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/tajweed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/wordLanguages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/keyboard.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[42,53],"text":"@/lib/utils/keyboard"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { handleKeyboardActivation } from '../keyboard';\n\nimport type React from 'react';\n\ndescribe('handleKeyboardActivation', () => {\n  it('calls callback on Enter', () => {\n    const cb = jest.fn();\n    const event = { key: 'Enter', preventDefault: jest.fn() } as unknown as React.KeyboardEvent;\n    handleKeyboardActivation(event, cb);\n    expect(event.preventDefault).toHaveBeenCalled();\n    expect(cb).toHaveBeenCalled();\n  });\n\n  it('calls callback on space', () => {\n    const cb = jest.fn();\n    const event = { key: ' ', preventDefault: jest.fn() } as unknown as React.KeyboardEvent;\n    handleKeyboardActivation(event, cb);\n    expect(event.preventDefault).toHaveBeenCalled();\n    expect(cb).toHaveBeenCalled();\n  });\n\n  it('ignores other keys', () => {\n    const cb = jest.fn();\n    const event = { key: 'Escape', preventDefault: jest.fn() } as unknown as React.KeyboardEvent;\n    handleKeyboardActivation(event, cb);\n    expect(event.preventDefault).not.toHaveBeenCalled();\n    expect(cb).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/setTheme.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":40,"fix":{"range":[26,37],"text":"@/lib/utils/setTheme"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { setTheme } from '../setTheme';\n\ndescribe('setTheme', () => {\n  afterEach(() => {\n    document.documentElement.classList.remove('theme-alt');\n    localStorage.clear();\n  });\n\n  it('adds theme-alt class when alt theme is set', () => {\n    setTheme('alt');\n    expect(document.documentElement.classList.contains('theme-alt')).toBe(true);\n    expect(localStorage.getItem('token-theme')).toBe('alt');\n  });\n\n  it('removes theme-alt class when base theme is set', () => {\n    document.documentElement.classList.add('theme-alt');\n    setTheme('base');\n    expect(document.documentElement.classList.contains('theme-alt')).toBe(false);\n    expect(localStorage.getItem('token-theme')).toBe('base');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/surah-navigation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":85,"fix":{"range":[63,82],"text":"@/lib/utils/surah-navigation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { getJuzByPage, getSurahByPage, JUZ_START_PAGES } from '../surah-navigation';\n\nimport type { Chapter } from '@/types';\n\nconst chapters: Chapter[] = [\n  {\n    id: 1,\n    name_simple: 'Al-Fatihah',\n    name_arabic: 'الفاتحة',\n    revelation_place: 'makkah',\n    verses_count: 7,\n    pages: [1, 1],\n  },\n  {\n    id: 2,\n    name_simple: 'Al-Baqarah',\n    name_arabic: 'البقرة',\n    revelation_place: 'madinah',\n    verses_count: 286,\n    pages: [2, 49],\n  },\n  {\n    id: 3,\n    name_simple: 'Ali Imran',\n    name_arabic: 'آل عمران',\n    revelation_place: 'madinah',\n    verses_count: 200,\n    pages: [50, 76],\n  },\n];\n\ndescribe('surah-navigation utilities', () => {\n  it('determines Juz by page', () => {\n    expect(getJuzByPage(1)).toBe(1);\n    expect(getJuzByPage(JUZ_START_PAGES[1])).toBe(2);\n    expect(getJuzByPage(100)).toBeGreaterThan(2);\n  });\n\n  it('finds surah by page', () => {\n    expect(getSurahByPage(1, chapters)?.id).toBe(1);\n    expect(getSurahByPage(40, chapters)?.id).toBe(2);\n    expect(getSurahByPage(60, chapters)?.id).toBe(3);\n    expect(getSurahByPage(200, chapters)).toBeUndefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/verse.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":42,"fix":{"range":[31,39],"text":"@/lib/utils/verse"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { parseVerseKey } from '../verse';\n\ndescribe('parseVerseKey', () => {\n  it('parses valid verse key', () => {\n    expect(parseVerseKey('2:255')).toEqual({ surahNumber: 2, ayahNumber: 255 });\n  });\n\n  it('returns zeros for missing key', () => {\n    expect(parseVerseKey(undefined)).toEqual({ surahNumber: 0, ayahNumber: 0 });\n  });\n\n  it('handles invalid format', () => {\n    expect(parseVerseKey('abc')).toEqual({ surahNumber: 0, ayahNumber: 0 });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/keyboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/safeLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/setTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/surah-navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lighthouserc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/next-pwa.config.mjs","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":1,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":31,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default {\n  dest: 'public',\n  disable: process.env.NODE_ENV === 'development' || process.env.NEXT_DISABLE_PWA === 'true',\n  runtimeCaching: [\n    {\n      urlPattern:\n        /^https:\\/\\/api\\.quran\\.com\\/api\\/v4\\/(chapters|juzs|verses\\/by_(chapter|juz|page))/,\n      handler: 'NetworkFirst',\n      options: {\n        cacheName: 'api-cache',\n        expiration: {\n          maxEntries: 100,\n          maxAgeSeconds: 24 * 60 * 60,\n        },\n        cacheableResponse: { statuses: [0, 200] },\n      },\n    },\n    {\n      urlPattern: /^\\/fonts\\/.*\\.(?:woff2?|ttf|otf)$/,\n      handler: 'CacheFirst',\n      options: {\n        cacheName: 'font-cache',\n        expiration: {\n          maxEntries: 20,\n          maxAgeSeconds: 365 * 24 * 60 * 60,\n        },\n        cacheableResponse: { statuses: [0, 200] },\n      },\n    },\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/regen.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":2,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":2,"endColumn":14,"suggestions":[{"fix":{"range":[57,110],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default async function regen(): Promise<void> {\n  console.log('Regenerating AI development assets...');\n  // Placeholder: implement actual regeneration logic\n  // Example: run('npm run build');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/sync.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":2,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":2,"endColumn":14,"suggestions":[{"fix":{"range":[56,107],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default async function sync(): Promise<void> {\n  console.log('Syncing AI development resources...');\n  // Placeholder: implement actual sync logic\n  // Example: run('git pull');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/architecture-compliance-check.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/reporter.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":4,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":4,"endColumn":14,"suggestions":[{"fix":{"range":[97,150],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":7,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":7,"endColumn":16,"suggestions":[{"fix":{"range":[186,217],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":9,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":9,"endColumn":18,"suggestions":[{"fix":{"range":[264,289],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":12,"endColumn":16,"suggestions":[{"fix":{"range":[301,317],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":16,"endColumn":16,"suggestions":[{"fix":{"range":[361,390],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":18,"suggestions":[{"fix":{"range":[438,479],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":16,"suggestions":[{"fix":{"range":[491,507],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":14,"suggestions":[{"fix":{"range":[515,610],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RuleResult } from './rules';\n\nexport function report(result: RuleResult): void {\n  console.log('\\n📋 ARCHITECTURE COMPLIANCE REPORT\\n');\n\n  if (result.passed.length) {\n    console.log('✅ PASSED FILES:');\n    for (const file of result.passed) {\n      console.log(`  ${file}`);\n    }\n\n    console.log('');\n  }\n\n  if (result.violations.length) {\n    console.log('❌ VIOLATIONS:');\n    for (const v of result.violations) {\n      console.log(`  ${v.file}: ${v.message}`);\n    }\n\n    console.log('');\n  }\n\n  console.log(`Summary: ${result.passed.length} passed, ${result.violations.length} violations`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/rules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/scanner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/getTafsirCache.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[24,49],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":78,"fix":{"range":[87,127],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":72,"fix":{"range":[164,199],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { Tafsir } from '../domain/entities/Tafsir';\nimport { ITafsirRepository } from '../domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../infrastructure/monitoring/Logger';\n\nexport async function getCachedResourcesWithFallback(repository: ITafsirRepository): Promise<{\n  tafsirs: Tafsir[];\n  isFromCache: boolean;\n  error?: string;\n}> {\n  try {\n    const cachedTafsirs = await repository.getCachedResources();\n\n    if (cachedTafsirs.length > 0) {\n      return {\n        tafsirs: cachedTafsirs,\n        isFromCache: true,\n      };\n    }\n\n    return {\n      tafsirs: [],\n      isFromCache: false,\n      error: 'No tafsir resources available. Please check your internet connection.',\n    };\n  } catch {\n    return {\n      tafsirs: [],\n      isFromCache: false,\n      error: 'Failed to load tafsir resources. Please try again.',\n    };\n  }\n}\n\nexport async function getTafsirByIdWithCache(\n  repository: ITafsirRepository,\n  id: number\n): Promise<Tafsir | null> {\n  try {\n    return await repository.getById(id);\n  } catch (error) {\n    Logger.warn('Failed to get tafsir by ID, trying cache:', undefined, error as Error);\n    const cached = await repository.getCachedResources();\n    return cached.find((t) => t.id === id) || null;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/getTafsirFilters.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":52,"fix":{"range":[91,116],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":78,"fix":{"range":[154,194],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":72,"fix":{"range":[231,266],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { getCachedResourcesWithFallback } from './getTafsirCache';\nimport { Tafsir } from '../domain/entities/Tafsir';\nimport { ITafsirRepository } from '../domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../infrastructure/monitoring/Logger';\n\nexport async function getTafsirsByLanguage(\n  repository: ITafsirRepository,\n  language: string\n): Promise<{\n  tafsirs: Tafsir[];\n  isFromCache: boolean;\n  error?: string;\n}> {\n  try {\n    const tafsirs = await repository.getResourcesByLanguage(language);\n    return { tafsirs, isFromCache: false };\n  } catch (error) {\n    Logger.warn(\n      `Failed to fetch tafsir resources for language ${language}:`,\n      undefined,\n      error as Error\n    );\n    const cachedResult = await getCachedResourcesWithFallback(repository);\n    return {\n      tafsirs: cachedResult.tafsirs.filter((t) => t.isInLanguage(language)),\n      isFromCache: true,\n      error: cachedResult.error,\n    };\n  }\n}\n\nexport async function searchTafsirs(\n  repository: ITafsirRepository,\n  searchTerm: string\n): Promise<Tafsir[]> {\n  if (!searchTerm.trim()) {\n    try {\n      const tafsirs = await repository.getAllResources();\n      if (tafsirs.length > 0) return tafsirs;\n      return (await getCachedResourcesWithFallback(repository)).tafsirs;\n    } catch (error) {\n      Logger.warn('Failed to fetch fresh tafsir resources:', undefined, error as Error);\n      return (await getCachedResourcesWithFallback(repository)).tafsirs;\n    }\n  }\n\n  try {\n    return await repository.search(searchTerm);\n  } catch (error) {\n    Logger.warn('Search failed, using cached data:', undefined, error as Error);\n    const cached = await repository.getCachedResources();\n    return cached.filter((t) => t.matchesSearch(searchTerm));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/use-cases/GetTafsirContent.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":43,"fix":{"range":[72,104],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":81,"fix":{"range":[142,185],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":75,"fix":{"range":[222,260],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import {\n  InvalidTafsirRequestError,\n  TafsirContentLoadError,\n} from '../../domain/errors/DomainErrors';\nimport { ITafsirRepository } from '../../domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../../infrastructure/monitoring/Logger';\n\n/**\n * Use Case: Get Tafsir Content for a Verse\n *\n * Handles retrieving tafsir content for specific verses with caching and fallback.\n */\nexport class GetTafsirContentUseCase {\n  constructor(private readonly tafsirRepository: ITafsirRepository) {}\n\n  /**\n   * Get tafsir content for a specific verse\n   *\n   * @param verseKey - Verse identifier (e.g., \"1:1\")\n   * @param tafsirId - Tafsir resource ID\n   * @returns Promise resolving to HTML content\n   */\n  async execute(verseKey: string, tafsirId: number): Promise<string> {\n    if (!verseKey || !tafsirId) {\n      throw new InvalidTafsirRequestError();\n    }\n\n    try {\n      const content = await this.tafsirRepository.getTafsirByVerse(verseKey, tafsirId);\n\n      if (!content || content.trim() === '') {\n        return 'No tafsir content available for this verse.';\n      }\n\n      return content;\n    } catch (error) {\n      Logger.error('Failed to get tafsir content:', undefined, error as Error);\n      throw new TafsirContentLoadError();\n    }\n  }\n\n  /**\n   * Get tafsir content for multiple tafsir sources\n   *\n   * @param verseKey - Verse identifier\n   * @param tafsirIds - Array of tafsir resource IDs\n   * @returns Promise resolving to map of tafsir ID to content\n   */\n  async executeMultiple(verseKey: string, tafsirIds: number[]): Promise<Map<number, string>> {\n    const results = new Map<number, string>();\n\n    const promises = tafsirIds.map(async (tafsirId) => {\n      try {\n        const content = await this.execute(verseKey, tafsirId);\n        results.set(tafsirId, content);\n      } catch (error) {\n        Logger.warn(`Failed to get tafsir content for ID ${tafsirId}:`, undefined, error as Error);\n        results.set(tafsirId, 'Failed to load tafsir content.');\n      }\n    });\n\n    await Promise.allSettled(promises);\n    return results;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/use-cases/GetTafsirResources.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":55,"fix":{"range":[24,52],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":81,"fix":{"range":[90,133],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[170,208],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":92,"fix":{"range":[283,300],"text":"@/src/application/getTafsirCache"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":75,"fix":{"range":[356,375],"text":"@/src/application/getTafsirFilters"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"import { Tafsir } from '../../domain/entities/Tafsir';\nimport { ITafsirRepository } from '../../domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../../infrastructure/monitoring/Logger';\nimport { getCachedResourcesWithFallback, getTafsirByIdWithCache } from '../getTafsirCache';\nimport { getTafsirsByLanguage, searchTafsirs } from '../getTafsirFilters';\n\n/**\n * Use Case: Get Tafsir Resources\n *\n * Orchestrates retrieval and management of tafsir resources.\n * Delegates caching and filtering to helper modules.\n */\nexport class GetTafsirResourcesUseCase {\n  constructor(private readonly tafsirRepository: ITafsirRepository) {}\n\n  async execute(): Promise<{\n    tafsirs: Tafsir[];\n    isFromCache: boolean;\n    error?: string;\n  }> {\n    try {\n      const tafsirs = await this.tafsirRepository.getAllResources();\n      if (tafsirs.length > 0) {\n        return { tafsirs, isFromCache: false };\n      }\n      return getCachedResourcesWithFallback(this.tafsirRepository);\n    } catch (error) {\n      Logger.warn('Failed to fetch fresh tafsir resources:', undefined, error as Error);\n      return getCachedResourcesWithFallback(this.tafsirRepository);\n    }\n  }\n\n  async executeByLanguage(language: string): Promise<{\n    tafsirs: Tafsir[];\n    isFromCache: boolean;\n    error?: string;\n  }> {\n    return getTafsirsByLanguage(this.tafsirRepository, language);\n  }\n\n  async search(searchTerm: string): Promise<Tafsir[]> {\n    return searchTafsirs(this.tafsirRepository, searchTerm);\n  }\n\n  async getById(id: number): Promise<Tafsir | null> {\n    return getTafsirByIdWithCache(this.tafsirRepository, id);\n  }\n\n  async getTafsirContent(verseKey: string, tafsirId: number): Promise<string> {\n    return this.tafsirRepository.getTafsirByVerse(verseKey, tafsirId);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Bookmark.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":70,"fix":{"range":[34,67],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (7). Maximum allowed is 4.","line":7,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { BookmarkPosition } from '../value-objects/BookmarkPosition';\n\n/**\n * Bookmark domain entity representing a bookmarked verse\n */\nexport class Bookmark {\n  constructor(\n    public readonly id: string,\n    public readonly userId: string,\n    public readonly verseId: string,\n    public readonly position: BookmarkPosition,\n    public readonly createdAt: Date,\n    public readonly notes?: string,\n    public readonly tags: string[] = []\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (!this.id || this.id.trim() === '') {\n      throw new Error('Bookmark ID cannot be empty');\n    }\n\n    if (!this.userId || this.userId.trim() === '') {\n      throw new Error('User ID cannot be empty');\n    }\n\n    if (!this.verseId || this.verseId.trim() === '') {\n      throw new Error('Verse ID cannot be empty');\n    }\n\n    if (!this.createdAt) {\n      throw new Error('Created date is required');\n    }\n  }\n\n  /**\n   * Checks if bookmark belongs to a specific user\n   */\n  belongsToUser(userId: string): boolean {\n    return this.userId === userId;\n  }\n\n  /**\n   * Gets display text for the bookmark\n   */\n  getDisplayText(): string {\n    let text = this.position.getDisplayText();\n    if (this.notes && this.notes.trim().length > 0) {\n      text += ` - ${this.notes}`;\n    }\n    if (this.tags.length > 0) {\n      text += ` [${this.tags.join(', ')}]`;\n    }\n    return text;\n  }\n\n  /**\n   * Checks equality based on ID\n   */\n  equals(other: Bookmark): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    const hasNotes = Boolean(this.notes && this.notes.trim().length > 0);\n    const hasTags = this.tags.length > 0;\n    return {\n      id: this.id,\n      userId: this.userId,\n      verseId: this.verseId,\n      position: this.position.toPlainObject(),\n      createdAt: this.createdAt.toISOString(),\n      notes: this.notes,\n      tags: this.tags,\n      hasNotes,\n      hasTags,\n      displayText: this.getDisplayText(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Surah.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (8). Maximum allowed is 4.","line":24,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Revelation type enum\n */\nexport enum RevelationType {\n  MAKKI = 'makki',\n  MADANI = 'madani',\n}\n\nimport {\n  getEstimatedReadingTime,\n  getJuzNumbers,\n  getMemorizationDifficulty,\n  isLongSurah,\n  isMediumSurah,\n  isMufassalSurah,\n  isSevenLongSurah,\n  isShortSurah,\n} from './surahHelpers';\n\n/**\n * Surah domain entity representing a chapter of the Quran\n */\nexport class Surah {\n  constructor(\n    public readonly id: number,\n    public readonly name: string,\n    public readonly arabicName: string,\n    public readonly englishName: string,\n    public readonly englishTranslation: string,\n    public readonly numberOfAyahs: number,\n    public readonly revelationType: RevelationType,\n    public readonly revelationOrder?: number\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.id < 1 || this.id > 114) {\n      throw new Error('Invalid Surah ID: must be between 1 and 114');\n    }\n\n    if (!this.name || this.name.trim() === '') {\n      throw new Error('Surah name cannot be empty');\n    }\n\n    if (!this.arabicName || this.arabicName.trim() === '') {\n      throw new Error('Arabic name cannot be empty');\n    }\n\n    if (!this.englishName || this.englishName.trim() === '') {\n      throw new Error('English name cannot be empty');\n    }\n\n    if (this.numberOfAyahs < 1) {\n      throw new Error('Number of ayahs must be positive');\n    }\n  }\n\n  /** Checks if this Surah was revealed in Makkah */\n  isMakki(): boolean {\n    return this.revelationType === RevelationType.MAKKI;\n  }\n\n  /** Checks if this Surah was revealed in Madinah */\n  isMadani(): boolean {\n    return this.revelationType === RevelationType.MADANI;\n  }\n\n  /** Checks if this Surah can be read in prayer */\n  canBeReadInPrayer(): boolean {\n    return this.id !== 9; // At-Tawbah has no Bismillah\n  }\n\n  /** Checks if this Surah starts with Bismillah */\n  startWithBismillah(): boolean {\n    return this.id !== 9; // At-Tawbah\n  }\n\n  /** Checks equality based on ID */\n  equals(other: Surah): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      name: this.name,\n      arabicName: this.arabicName,\n      englishName: this.englishName,\n      englishTranslation: this.englishTranslation,\n      numberOfAyahs: this.numberOfAyahs,\n      revelationType: this.revelationType,\n      revelationOrder: this.revelationOrder,\n      isMakki: this.isMakki(),\n      isMadani: this.isMadani(),\n      canBeReadInPrayer: this.canBeReadInPrayer(),\n      startWithBismillah: this.startWithBismillah(),\n      memorizationDifficulty: getMemorizationDifficulty(this.numberOfAyahs),\n      estimatedReadingTime: getEstimatedReadingTime(this.numberOfAyahs),\n      isShortSurah: isShortSurah(this.numberOfAyahs),\n      isMediumSurah: isMediumSurah(this.numberOfAyahs),\n      isLongSurah: isLongSurah(this.numberOfAyahs),\n      isSevenLongSurah: isSevenLongSurah(this.id),\n      isMufassalSurah: isMufassalSurah(this.id),\n      juzNumbers: getJuzNumbers(this.id),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Verse.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":60,"fix":{"range":[114,142],"text":"@/src/domain/value-objects/Translation"}},{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (6). Maximum allowed is 4.","line":8,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":79,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { getEstimatedReadingTime, getWordCount, isSajdahVerse } from './verseUtils';\nimport { Translation } from '../value-objects/Translation';\n\n/**\n * Verse domain entity representing a single Quranic verse\n */\nexport class Verse {\n  constructor(\n    public readonly id: string,\n    public readonly surahId: number,\n    public readonly ayahNumber: number,\n    public readonly arabicText: string,\n    public readonly uthmaniText: string,\n    public readonly translation?: Translation\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (!this.id || this.id.trim() === '') {\n      throw new Error('Verse ID cannot be empty');\n    }\n\n    if (this.surahId < 1 || this.surahId > 114) {\n      throw new Error('Invalid Surah ID');\n    }\n\n    if (this.ayahNumber < 1) {\n      throw new Error('Invalid Ayah number');\n    }\n\n    if (!this.arabicText || this.arabicText.trim() === '') {\n      throw new Error('Arabic text cannot be empty');\n    }\n\n    if (!this.uthmaniText || this.uthmaniText.trim() === '') {\n      throw new Error('Uthmani text cannot be empty');\n    }\n  }\n\n  /**\n   * Returns the verse key in format \"surah:ayah\"\n   */\n  get verseKey(): string {\n    return `${this.surahId}:${this.ayahNumber}`;\n  }\n\n  /**\n   * Checks if this is the first verse of a Surah\n   */\n  isFirstVerse(): boolean {\n    return this.ayahNumber === 1;\n  }\n\n  /**\n   * Checks equality based on ID\n   */\n  equals(other: Verse): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Creates a new verse instance with translation\n   */\n  withTranslation(translation: Translation): Verse {\n    return new Verse(\n      this.id,\n      this.surahId,\n      this.ayahNumber,\n      this.arabicText,\n      this.uthmaniText,\n      translation\n    );\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      surahId: this.surahId,\n      ayahNumber: this.ayahNumber,\n      verseKey: this.verseKey,\n      arabicText: this.arabicText,\n      uthmaniText: this.uthmaniText,\n      translation: this.translation?.toPlainObject(),\n      wordCount: getWordCount(this.arabicText),\n      estimatedReadingTime: getEstimatedReadingTime(this.arabicText),\n      isFirstVerse: this.isFirstVerse(),\n      isSajdahVerse: isSajdahVerse(this.surahId, this.ayahNumber),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/bookmarkHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/surahHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/verseUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/errors/DomainErrors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/IBookmarkRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":40,"fix":{"range":[26,37],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":70,"fix":{"range":[74,107],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":66,"fix":{"range":[142,173],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { Bookmark } from '../entities';\nimport { BookmarkPosition } from '../value-objects/BookmarkPosition';\nimport { StoredBookmark } from '../value-objects/StoredBookmark';\n\nexport interface IBookmarkRepository {\n  // Basic CRUD operations\n  findById(id: string): Promise<Bookmark | null>;\n  save(bookmark: Bookmark): Promise<void>;\n  remove(id: string): Promise<void>;\n  exists(id: string): Promise<boolean>;\n\n  // User-specific operations\n  existsByUserAndVerse(userId: string, verseId: string): Promise<boolean>;\n  findByUser(userId: string): Promise<Bookmark[]>;\n  findByUserWithOptions(\n    userId: string,\n    options?: {\n      limit?: number;\n      offset?: number;\n      sortBy?: 'created' | 'position';\n      sortOrder?: 'asc' | 'desc';\n    }\n  ): Promise<Bookmark[]>;\n  findRecent(userId: string, limit?: number): Promise<Bookmark[]>;\n\n  // Position-based queries\n  findByVerse(verseId: string): Promise<Bookmark[]>;\n  findBySurah(surahId: number): Promise<Bookmark[]>;\n  findBySurahRange(surahId: number, fromAyah: number, toAyah: number): Promise<Bookmark[]>;\n  findByPosition(position: BookmarkPosition): Promise<Bookmark[]>;\n  existsAtPosition(userId: string, position: BookmarkPosition): Promise<boolean>;\n\n  // Tag-based operations\n  findByTags(userId: string, tags: string[]): Promise<Bookmark[]>;\n  getTagsByUser(userId: string): Promise<string[]>;\n\n  // Notes-based operations\n  findWithNotes(userId: string): Promise<Bookmark[]>;\n\n  // Date-based queries\n  findByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Bookmark[]>;\n\n  // Search operations\n  search(userId: string, query: string): Promise<Bookmark[]>;\n\n  // Navigation helpers\n  findNext(userId: string, currentPosition: BookmarkPosition): Promise<Bookmark | null>;\n  findPrevious(userId: string, currentPosition: BookmarkPosition): Promise<Bookmark | null>;\n  findNearPosition(userId: string, position: BookmarkPosition, radius: number): Promise<Bookmark[]>;\n\n  // Batch operations\n  saveMany(bookmarks: Bookmark[]): Promise<void>;\n  removeMany(ids: string[]): Promise<void>;\n  removeAllByUser(userId: string): Promise<void>;\n  removeBySurah(userId: string, surahId: number): Promise<void>;\n\n  // Statistics and analytics\n  getCountByUser(userId: string): Promise<number>;\n  getCountBySurah(userId: string, surahId: number): Promise<number>;\n  getStatistics(userId: string): Promise<{\n    totalBookmarks: number;\n    surahsCovered: number;\n    mostBookmarkedSurah: { surahId: number; count: number } | null;\n    tagsUsed: number;\n    bookmarksWithNotes: number;\n  }>;\n\n  // Import/Export operations\n  exportBookmarks(userId: string): Promise<StoredBookmark[]>;\n  importBookmarks(userId: string, bookmarks: StoredBookmark[]): Promise<void>;\n\n  // Offline support\n  cacheForOffline(userId: string): Promise<void>;\n  clearCache(userId: string): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/ITafsirRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":45,"fix":{"range":[24,42],"text":"@/src/domain/entities/Tafsir"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Tafsir } from '../entities/Tafsir';\n\n/**\n * Repository interface for Tafsir operations\n *\n * Defines the contract for accessing and managing Tafsir resources.\n * This interface is implemented by the infrastructure layer.\n */\nexport interface ITafsirRepository {\n  /**\n   * Get all available tafsir resources\n   * @returns Promise resolving to array of all tafsir resources\n   */\n  getAllResources(): Promise<Tafsir[]>;\n\n  /**\n   * Get tafsir resources for a specific language\n   * @param language - Language code (e.g., 'en', 'ar', 'bn')\n   * @returns Promise resolving to array of tafsir resources in the specified language\n   */\n  getResourcesByLanguage(language: string): Promise<Tafsir[]>;\n\n  /**\n   * Get a specific tafsir by ID\n   * @param id - Tafsir resource ID\n   * @returns Promise resolving to tafsir resource or null if not found\n   */\n  getById(id: number): Promise<Tafsir | null>;\n\n  /**\n   * Get tafsir content for a specific verse\n   * @param verseKey - Verse identifier (e.g., \"1:1\")\n   * @param tafsirId - Tafsir resource ID\n   * @returns Promise resolving to HTML content of the tafsir\n   */\n  getTafsirByVerse(verseKey: string, tafsirId: number): Promise<string>;\n\n  /**\n   * Search tafsir resources by name or language\n   * @param searchTerm - Search term to match against\n   * @returns Promise resolving to array of matching tafsir resources\n   */\n  search(searchTerm: string): Promise<Tafsir[]>;\n\n  /**\n   * Cache tafsir resources for offline access\n   * @param tafsirs - Array of tafsir resources to cache\n   */\n  cacheResources(tafsirs: Tafsir[]): Promise<void>;\n\n  /**\n   * Get cached tafsir resources\n   * @returns Promise resolving to array of cached tafsir resources\n   */\n  getCachedResources(): Promise<Tafsir[]>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/IVerseRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":37,"fix":{"range":[23,34],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Verse } from '../entities';\n\nexport interface IVerseRepository {\n  // Basic CRUD operations\n  findById(id: string): Promise<Verse | null>;\n  save(verse: Verse): Promise<void>;\n  remove(id: string): Promise<void>;\n  exists(id: string): Promise<boolean>;\n\n  // Position-based queries\n  findBySurahAndAyah(surahId: number, ayahNumber: number): Promise<Verse | null>;\n  findBySurah(surahId: number): Promise<Verse[]>;\n  findBySurahRange(surahId: number, fromAyah: number, toAyah: number): Promise<Verse[]>;\n\n  // Juz/Para based queries\n  findByJuz(juzNumber: number): Promise<Verse[]>;\n  findByPage(pageNumber: number): Promise<Verse[]>;\n  findByHizb(hizbNumber: number): Promise<Verse[]>;\n  findByRubAlHizb(rubNumber: number): Promise<Verse[]>;\n\n  // Search operations\n  search(\n    query: string,\n    options?: {\n      searchIn?: 'arabic' | 'translation' | 'both';\n      translationId?: number;\n      surahId?: number;\n      limit?: number;\n    }\n  ): Promise<Verse[]>;\n\n  // Special verse queries\n  findSajdahVerses(): Promise<Verse[]>;\n  findFirstVerses(): Promise<Verse[]>; // First verse of each Surah\n\n  // Bulk operations\n  findByVerseKeys(verseKeys: string[]): Promise<Verse[]>;\n  findRandom(count?: number, surahId?: number): Promise<Verse[]>;\n\n  // Statistics\n  getTotalCount(): Promise<number>;\n  getCountBySurah(surahId: number): Promise<number>;\n\n  // Navigation helpers\n  findNext(currentVerseId: string): Promise<Verse | null>;\n  findPrevious(currentVerseId: string): Promise<Verse | null>;\n\n  // Translation support\n  findWithTranslation(verseId: string, translationId: number): Promise<Verse | null>;\n\n  // Revelation type queries\n  findByRevelationType(type: 'makki' | 'madani'): Promise<Verse[]>;\n\n  // Offline support\n  cacheForOffline(surahIds?: number[]): Promise<void>;\n  clearCache(): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkImportService.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":40,"fix":{"range":[64,75],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":75,"fix":{"range":[115,150],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":69,"fix":{"range":[187,219],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":70,"fix":{"range":[256,289],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":66,"fix":{"range":[324,355],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"import { v4 as uuidv4 } from 'uuid';\n\nimport { Bookmark } from '../entities';\nimport { IBookmarkRepository } from '../repositories/IBookmarkRepository';\nimport { IVerseRepository } from '../repositories/IVerseRepository';\nimport { BookmarkPosition } from '../value-objects/BookmarkPosition';\nimport { StoredBookmark } from '../value-objects/StoredBookmark';\n\n/**\n * Handles bookmark import and export operations\n */\nexport class BookmarkImportService {\n  constructor(\n    private bookmarkRepository: IBookmarkRepository,\n    private verseRepository: IVerseRepository\n  ) {}\n\n  /**\n   * Imports bookmarks from external data\n   */\n  async importBookmarks(\n    userId: string,\n    importData: Array<{ surahId: number; ayahNumber: number; notes?: string; tags?: string[] }>\n  ): Promise<Bookmark[]> {\n    const validBookmarks: Bookmark[] = [];\n\n    for (const data of importData) {\n      try {\n        const verse = await this.verseRepository.findBySurahAndAyah(data.surahId, data.ayahNumber);\n        if (!verse) {\n          continue;\n        }\n\n        const position = new BookmarkPosition(data.surahId, data.ayahNumber, new Date());\n        const exists = await this.bookmarkRepository.existsAtPosition(userId, position);\n        if (exists) {\n          continue;\n        }\n\n        const bookmark = new Bookmark(\n          uuidv4(),\n          userId,\n          verse.id,\n          position,\n          new Date(),\n          data.notes,\n          data.tags || []\n        );\n\n        validBookmarks.push(bookmark);\n      } catch {\n        continue;\n      }\n    }\n\n    if (validBookmarks.length > 0) {\n      await this.bookmarkRepository.saveMany(validBookmarks);\n    }\n\n    return validBookmarks;\n  }\n\n  /**\n   * Exports user bookmarks\n   */\n  async exportBookmarks(userId: string): Promise<StoredBookmark[]> {\n    return this.bookmarkRepository.exportBookmarks(userId);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkMutationService.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":91,"fix":{"range":[77,88],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":91,"fix":{"range":[157,179],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":75,"fix":{"range":[219,254],"text":"@/src/domain/repositories/IBookmarkRepository"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { Bookmark, withNotes, withTags, withAddedTag, withRemovedTag } from '../entities';\nimport { BookmarkNotFoundError, UnauthorizedBookmarkError } from '../errors/DomainErrors';\nimport { IBookmarkRepository } from '../repositories/IBookmarkRepository';\n\n/**\n * Domain service for bookmark tag and note mutations\n */\nexport class BookmarkMutationService {\n  constructor(private bookmarkRepository: IBookmarkRepository) {}\n\n  /**\n   * Updates bookmark notes\n   */\n  async updateBookmarkNotes(userId: string, bookmarkId: string, notes: string): Promise<Bookmark> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot update bookmark belonging to another user');\n    }\n\n    const updatedBookmark = withNotes(bookmark, notes);\n    await this.bookmarkRepository.save(updatedBookmark);\n    return updatedBookmark;\n  }\n\n  /**\n   * Updates bookmark tags\n   */\n  async updateBookmarkTags(userId: string, bookmarkId: string, tags: string[]): Promise<Bookmark> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot update bookmark belonging to another user');\n    }\n\n    const updatedBookmark = withTags(bookmark, tags);\n    await this.bookmarkRepository.save(updatedBookmark);\n    return updatedBookmark;\n  }\n\n  /**\n   * Adds a tag to a bookmark\n   */\n  async addTagToBookmark(userId: string, bookmarkId: string, tag: string): Promise<Bookmark> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot update bookmark belonging to another user');\n    }\n\n    const updatedBookmark = withAddedTag(bookmark, tag);\n    await this.bookmarkRepository.save(updatedBookmark);\n    return updatedBookmark;\n  }\n\n  /**\n   * Removes a tag from a bookmark\n   */\n  async removeTagFromBookmark(userId: string, bookmarkId: string, tag: string): Promise<Bookmark> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot update bookmark belonging to another user');\n    }\n\n    const updatedBookmark = withRemovedTag(bookmark, tag);\n    await this.bookmarkRepository.save(updatedBookmark);\n    return updatedBookmark;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkService.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[71,82],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":33,"fix":{"range":[208,230],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":75,"fix":{"range":[270,305],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":69,"fix":{"range":[342,374],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":70,"fix":{"range":[411,444],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"max-params","severity":1,"message":"Async method 'bookmarkVerse' has too many parameters (5). Maximum allowed is 4.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":5,"source":"import { v4 as uuidv4 } from 'uuid';\n\nimport { Bookmark, Verse } from '../entities';\nimport {\n  BookmarkAlreadyExistsError,\n  VerseNotFoundError,\n  BookmarkNotFoundError,\n  UnauthorizedBookmarkError,\n} from '../errors/DomainErrors';\nimport { IBookmarkRepository } from '../repositories/IBookmarkRepository';\nimport { IVerseRepository } from '../repositories/IVerseRepository';\nimport { BookmarkPosition } from '../value-objects/BookmarkPosition';\n\n/**\n * Domain service for bookmark operations\n */\nexport class BookmarkService {\n  constructor(\n    private bookmarkRepository: IBookmarkRepository,\n    private verseRepository: IVerseRepository\n  ) {}\n\n  /**\n   * Creates a bookmark for a verse\n   */\n  async bookmarkVerse(\n    userId: string,\n    surahId: number,\n    ayahNumber: number,\n    notes?: string,\n    tags: string[] = []\n  ): Promise<Bookmark> {\n    // Verify verse exists\n    const verse = await this.verseRepository.findBySurahAndAyah(surahId, ayahNumber);\n    if (!verse) {\n      throw new VerseNotFoundError(`${surahId}:${ayahNumber}`);\n    }\n\n    // Check if bookmark already exists\n    const position = new BookmarkPosition(surahId, ayahNumber, new Date());\n    const exists = await this.bookmarkRepository.existsAtPosition(userId, position);\n    if (exists) {\n      throw new BookmarkAlreadyExistsError(userId, surahId, ayahNumber);\n    }\n\n    // Create new bookmark\n    const bookmark = new Bookmark(uuidv4(), userId, verse.id, position, new Date(), notes, tags);\n\n    await this.bookmarkRepository.save(bookmark);\n    return bookmark;\n  }\n\n  /**\n   * Removes a bookmark\n   */\n  async removeBookmark(userId: string, bookmarkId: string): Promise<void> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot remove bookmark belonging to another user');\n    }\n\n    await this.bookmarkRepository.remove(bookmarkId);\n  }\n\n  /**\n   * Checks if a verse is bookmarked by user\n   */\n  async isVerseBookmarked(userId: string, surahId: number, ayahNumber: number): Promise<boolean> {\n    const position = new BookmarkPosition(surahId, ayahNumber, new Date());\n    return await this.bookmarkRepository.existsAtPosition(userId, position);\n  }\n\n  /**\n   * Gets bookmarks with their corresponding verses\n   */\n  async getBookmarksWithVerses(\n    userId: string,\n    limit?: number\n  ): Promise<Array<{ bookmark: Bookmark; verse: Verse }>> {\n    const bookmarks = await this.bookmarkRepository.findByUser(userId);\n    const limitedBookmarks = limit ? bookmarks.slice(0, limit) : bookmarks;\n\n    const result: Array<{ bookmark: Bookmark; verse: Verse }> = [];\n\n    for (const bookmark of limitedBookmarks) {\n      const verse = await this.verseRepository.findById(bookmark.verseId);\n      if (!verse) {\n        throw new VerseNotFoundError(bookmark.verseId);\n      }\n      result.push({ bookmark, verse });\n    }\n\n    return result;\n  }\n\n  /**\n   * Organizes bookmarks by Surah\n   */\n  async organizeBookmarksBySurah(userId: string): Promise<Map<number, Bookmark[]>> {\n    const bookmarks = await this.bookmarkRepository.findByUser(userId);\n    const organized = new Map<number, Bookmark[]>();\n\n    bookmarks.forEach((bookmark) => {\n      const surahId = bookmark.position.surahId;\n      if (!organized.has(surahId)) {\n        organized.set(surahId, []);\n      }\n      organized.get(surahId)!.push(bookmark);\n    });\n\n    // Sort bookmarks within each Surah by ayah number\n    organized.forEach((surahBookmarks) => {\n      surahBookmarks.sort((a, b) => a.position.ayahNumber - b.position.ayahNumber);\n    });\n\n    return organized;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/BookmarkPosition.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as comparison from './bookmarkPosition/comparison';\nimport * as navigation from './bookmarkPosition/navigation';\n\nexport class BookmarkPosition {\n  constructor(\n    public readonly surahId: number,\n    public readonly ayahNumber: number,\n    public readonly timestamp: Date\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.surahId < 1 || this.surahId > 114) {\n      throw new Error('Invalid Surah ID: must be between 1 and 114');\n    }\n    if (this.ayahNumber < 1) {\n      throw new Error('Ayah number must be positive');\n    }\n    if (!this.timestamp) {\n      throw new Error('Timestamp is required');\n    }\n  }\n\n  get verseKey(): string {\n    return `${this.surahId}:${this.ayahNumber}`;\n  }\n\n  toString(): string {\n    return this.verseKey;\n  }\n\n  isFirstVerse(): boolean {\n    return this.ayahNumber === 1;\n  }\n\n  isInSurah(surahId: number): boolean {\n    return this.surahId === surahId;\n  }\n\n  getNextVerse(maxAyahInSurah: number): BookmarkPosition | null {\n    return navigation.getNextVerse<BookmarkPosition>(this, maxAyahInSurah, BookmarkPosition);\n  }\n\n  getPreviousVerse(): BookmarkPosition | null {\n    return navigation.getPreviousVerse<BookmarkPosition>(this, BookmarkPosition);\n  }\n\n  compareTo(other: BookmarkPosition): number {\n    return comparison.compareTo(this, other);\n  }\n\n  isBefore(other: BookmarkPosition): boolean {\n    return comparison.isBefore(this, other);\n  }\n\n  isAfter(other: BookmarkPosition): boolean {\n    return comparison.isAfter(this, other);\n  }\n\n  isInSameSurah(other: BookmarkPosition): boolean {\n    return comparison.isInSameSurah(this, other);\n  }\n\n  getDistanceFrom(other: BookmarkPosition): number | null {\n    return comparison.getDistanceFrom(this, other);\n  }\n\n  isWithinRange(other: BookmarkPosition, maxDistance: number): boolean {\n    return comparison.isWithinRange(this, other, maxDistance);\n  }\n\n  getDisplayText(): string {\n    return `Surah ${this.surahId}, Verse ${this.ayahNumber}`;\n  }\n\n  equals(other: BookmarkPosition): boolean {\n    return this.surahId === other.surahId && this.ayahNumber === other.ayahNumber;\n  }\n\n  withNewTimestamp(): BookmarkPosition {\n    return new BookmarkPosition(this.surahId, this.ayahNumber, new Date());\n  }\n\n  toPlainObject() {\n    return {\n      surahId: this.surahId,\n      ayahNumber: this.ayahNumber,\n      verseKey: this.verseKey,\n      timestamp: this.timestamp.toISOString(),\n      isFirstVerse: this.isFirstVerse(),\n      displayText: this.getDisplayText(),\n    };\n  }\n\n  static fromVerseKey(verseKey: string): BookmarkPosition {\n    const parts = verseKey.split(':');\n    if (parts.length !== 2) {\n      throw new Error('Invalid verse key format. Expected \"surah:ayah\"');\n    }\n    const surahId = parseInt(parts[0], 10);\n    const ayahNumber = parseInt(parts[1], 10);\n    if (isNaN(surahId) || isNaN(ayahNumber) || parts[0].trim() === '' || parts[1].trim() === '') {\n      throw new Error('Invalid verse key: surah and ayah must be numbers');\n    }\n    return new BookmarkPosition(surahId, ayahNumber, new Date());\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/StoredBookmark.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'isStoredBookmark' has a complexity of 11. Maximum allowed is 10.","line":20,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":34,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface StoredBookmarkPosition {\n  surahId: number;\n  ayahNumber: number;\n  verseKey: string;\n  timestamp: string;\n  isFirstVerse: boolean;\n  displayText: string;\n}\n\nexport interface StoredBookmark {\n  id: string;\n  userId: string;\n  verseId: string;\n  position: StoredBookmarkPosition;\n  createdAt: string;\n  notes?: string | undefined;\n  tags: string[];\n}\n\nexport function isStoredBookmark(value: unknown): value is StoredBookmark {\n  if (typeof value !== 'object' || value === null) return false;\n  const b = value as StoredBookmark;\n  return (\n    typeof b.id === 'string' &&\n    typeof b.userId === 'string' &&\n    typeof b.verseId === 'string' &&\n    typeof b.createdAt === 'string' &&\n    typeof b.position === 'object' &&\n    b.position !== null &&\n    typeof b.position.surahId === 'number' &&\n    typeof b.position.ayahNumber === 'number' &&\n    typeof b.position.timestamp === 'string'\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/Translation.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":89,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":89,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Translation value object for verse translations\n */\nexport class Translation {\n  constructor(\n    public readonly id: number,\n    public readonly resourceId: number,\n    public readonly text: string,\n    public readonly languageCode: string = 'en'\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.id < 0) {\n      throw new Error('Translation ID must be non-negative');\n    }\n\n    if (this.resourceId < 0) {\n      throw new Error('Resource ID must be non-negative');\n    }\n\n    if (!this.text || this.text.trim() === '') {\n      throw new Error('Translation text cannot be empty');\n    }\n\n    if (!this.languageCode || this.languageCode.trim() === '') {\n      throw new Error('Language code cannot be empty');\n    }\n  }\n\n  /**\n   * Gets the word count of the translation text\n   */\n  getWordCount(): number {\n    return this.text.split(/\\s+/).filter((word) => word.trim().length > 0).length;\n  }\n\n  /**\n   * Gets the character count including spaces\n   */\n  getCharacterCount(): number {\n    return this.text.length;\n  }\n\n  /**\n   * Checks if this is an English translation\n   */\n  isEnglish(): boolean {\n    return this.languageCode.toLowerCase().startsWith('en');\n  }\n\n  /**\n   * Checks if the translation contains a specific text (case-insensitive)\n   */\n  contains(searchText: string): boolean {\n    if (!searchText) return true;\n    return this.text.toLowerCase().includes(searchText.toLowerCase());\n  }\n\n  /**\n   * Gets a preview of the translation with word limit\n   */\n  getPreview(wordLimit: number = 10): string {\n    const words = this.text.split(/\\s+/);\n    if (words.length <= wordLimit) {\n      return this.text;\n    }\n    return words.slice(0, wordLimit).join(' ') + '...';\n  }\n\n  /**\n   * Checks if this is a long translation (more than 50 words)\n   */\n  isLong(): boolean {\n    return this.getWordCount() > 50;\n  }\n\n  /**\n   * Checks equality based on ID and resource ID\n   */\n  equals(other: Translation): boolean {\n    return this.id === other.id && this.resourceId === other.resourceId;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      resourceId: this.resourceId,\n      text: this.text,\n      languageCode: this.languageCode,\n      wordCount: this.getWordCount(),\n      characterCount: this.getCharacterCount(),\n      isEnglish: this.isEnglish(),\n      isLong: this.isLong(),\n      preview: this.getPreview(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/bookmarkPosition/comparison.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/bookmarkPosition/navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/Container.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":85,"fix":{"range":[37,82],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":81,"fix":{"range":[120,163],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":79,"fix":{"range":[200,242],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":73,"fix":{"range":[281,315],"text":"@/src/infrastructure/repositories/BookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":69,"fix":{"range":[352,384],"text":"@/src/infrastructure/repositories/TafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":67,"fix":{"range":[420,451],"text":"@/src/infrastructure/repositories/VerseRepository"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"import { IBookmarkRepository } from '../../domain/repositories/IBookmarkRepository';\nimport { ITafsirRepository } from '../../domain/repositories/ITafsirRepository';\nimport { IVerseRepository } from '../../domain/repositories/IVerseRepository';\nimport { BookmarkRepository } from '../repositories/BookmarkRepository';\nimport { TafsirRepository } from '../repositories/TafsirRepository';\nimport { VerseRepository } from '../repositories/VerseRepository';\n\n/**\n * Dependency Injection Container\n * Centralizes creation and management of repository instances\n */\nclass DIContainer {\n  private static instance: DIContainer;\n  private verseRepository?: IVerseRepository;\n  private bookmarkRepository?: IBookmarkRepository;\n  private tafsirRepository?: ITafsirRepository;\n\n  private constructor() {}\n\n  static getInstance(): DIContainer {\n    if (!DIContainer.instance) {\n      DIContainer.instance = new DIContainer();\n    }\n    return DIContainer.instance;\n  }\n\n  /**\n   * Get verse repository instance (singleton)\n   */\n  getVerseRepository(): IVerseRepository {\n    if (!this.verseRepository) {\n      this.verseRepository = new VerseRepository();\n    }\n    return this.verseRepository;\n  }\n\n  /**\n   * Get bookmark repository instance (singleton)\n   */\n  getBookmarkRepository(): IBookmarkRepository {\n    if (!this.bookmarkRepository) {\n      this.bookmarkRepository = new BookmarkRepository();\n    }\n    return this.bookmarkRepository;\n  }\n\n  /**\n   * Get tafsir repository instance (singleton)\n   */\n  getTafsirRepository(): ITafsirRepository {\n    if (!this.tafsirRepository) {\n      this.tafsirRepository = new TafsirRepository();\n    }\n    return this.tafsirRepository;\n  }\n\n  /**\n   * Reset all instances (useful for testing)\n   */\n  reset(): void {\n    this.verseRepository = undefined;\n    this.bookmarkRepository = undefined;\n    this.tafsirRepository = undefined;\n  }\n\n  /**\n   * Set custom repository implementations (useful for testing)\n   */\n  setVerseRepository(repository: IVerseRepository): void {\n    this.verseRepository = repository;\n  }\n\n  setBookmarkRepository(repository: IBookmarkRepository): void {\n    this.bookmarkRepository = repository;\n  }\n\n  setTafsirRepository(repository: ITafsirRepository): void {\n    this.tafsirRepository = repository;\n  }\n}\n\nexport const container = DIContainer.getInstance();\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/factory.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":49,"fix":{"range":[38,46],"text":"@/src/infrastructure/di/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { TYPES, type TypeKeys } from '../types';\n\nimport type { interfaces } from 'inversify';\n\nexport type Factory<T> = () => T;\nexport type AsyncFactory<T> = () => Promise<T>;\nexport type FactoryWithArgs<T, Args extends unknown[]> = (...args: Args) => T;\n\n/**\n * Factory decorator helper\n *\n * Creates a factory function for creating instances with parameters.\n *\n * @param typeKey - Key from TYPES object\n * @returns Factory decorator\n */\nexport const createFactory = <T>(typeKey: TypeKeys): interfaces.FactoryCreator<T> => {\n  return (context: interfaces.Context) => {\n    return () => context.container.get<T>(TYPES[typeKey]);\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/index.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":49,"fix":{"range":[159,167],"text":"@/src/infrastructure/di/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  inject,\n  lazyInject,\n  optional,\n  multiInject,\n  named,\n  postConstruct,\n  preDestroy,\n} from 'inversify';\n\nimport { TYPES, type TypeKeys } from '../types';\n\nexport * from './injection';\nexport * from './factory';\n\nexport const LazyInject = (typeKey: TypeKeys): ReturnType<typeof lazyInject> => {\n  return inject(TYPES[typeKey]) && lazyInject(TYPES[typeKey]);\n};\n\nexport const OptionalInject = (typeKey: TypeKeys): ReturnType<typeof optional> => {\n  return inject(TYPES[typeKey]) && optional();\n};\n\nexport const MultiInject = (typeKey: TypeKeys): ReturnType<typeof multiInject> => {\n  return multiInject(TYPES[typeKey]);\n};\n\nexport {\n  named,\n  optional,\n  lazyInject,\n  multiInject,\n  postConstruct,\n  preDestroy,\n  postConstruct as PostConstruct,\n  preDestroy as PreDestroy,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/injection.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":49,"fix":{"range":[94,102],"text":"@/src/infrastructure/di/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { inject, injectable, named } from 'inversify';\n\nimport { TYPES, type TypeKeys } from '../types';\n\n/**\n * Injectable decorator with automatic registration\n *\n * Marks a class as injectable and available for dependency injection.\n * Use this on all classes that will be injected as dependencies.\n */\nexport const Injectable = (): ClassDecorator => injectable();\n\n/**\n * Type-safe inject decorator\n *\n * Injects a dependency using type-safe symbols from TYPES.\n *\n * @param typeKey - Key from TYPES object\n * @returns Decorator function\n */\nexport const Inject = (typeKey: TypeKeys): ParameterDecorator & PropertyDecorator =>\n  inject(TYPES[typeKey]);\n\n/**\n * Named injection decorator\n *\n * Injects a named dependency when multiple implementations exist.\n *\n * @param typeKey - Key from TYPES object\n * @param name - Named identifier for the specific implementation\n * @returns Decorator function\n */\nexport const InjectNamed = (\n  typeKey: TypeKeys,\n  name: string\n): ParameterDecorator & PropertyDecorator => {\n  const injectDecorator = inject(TYPES[typeKey]);\n  const namedDecorator = named(name);\n  return ((target: object, key: string | symbol, index?: number) => {\n    if (typeof index === 'number') {\n      (injectDecorator as ParameterDecorator)(target, key, index);\n      (namedDecorator as ParameterDecorator)(target, key, index);\n    } else {\n      (injectDecorator as PropertyDecorator)(target, key);\n      (namedDecorator as PropertyDecorator)(target, key);\n    }\n  }) as unknown as ParameterDecorator & PropertyDecorator;\n};\n\nexport { named } from 'inversify';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ApplicationError.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (6). Maximum allowed is 4.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":11,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Application Error\n *\n * All custom application errors should extend from this base class.\n * Provides consistent error structure and metadata.\n */\nexport class ApplicationError extends Error {\n  public readonly timestamp: Date;\n  public readonly stackTrace?: string;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly statusCode: number = 500,\n    public readonly isOperational: boolean = true,\n    public readonly context?: Record<string, unknown>,\n    public readonly cause?: Error\n  ) {\n    super(message);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.stackTrace = this.stack;\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      statusCode: this.statusCode,\n      isOperational: this.isOperational,\n      timestamp: this.timestamp.toISOString(),\n      context: this.context,\n      cause: this.cause?.message,\n      stack: this.stackTrace,\n    };\n  }\n\n  getUserMessage(): string {\n    return this.message;\n  }\n}\n\nexport default ApplicationError;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ErrorHandler.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":18,"column":1,"nodeType":"ImportDeclaration","endLine":18,"endColumn":47,"fix":{"range":[511,531],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"complexity","severity":1,"message":"Static async method 'handle' has a complexity of 11. Maximum allowed is 10.","line":47,"column":22,"nodeType":"FunctionExpression","messageId":"complex","endLine":86,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Centralized Error Handler\n *\n * Provides consistent error handling across the application.\n * Handles logging, user notifications, and error recovery strategies.\n */\n\nimport {\n  errorHandlerConfig,\n  type ErrorHandlerOptions,\n  type ErrorLogger,\n  type ErrorReporter,\n  type ErrorNotifier,\n} from './ErrorHandlerConfig';\nimport { notifyError, setRetryCallback } from './errorNotifications';\nimport { ErrorFactory } from './factory';\nimport { isApplicationError } from './guards';\nimport { logger } from '../monitoring/Logger';\n\nexport class ErrorHandler {\n  /**\n   * Configure global error handler\n   */\n  static configure({\n    logger: log,\n    reporter,\n    notifier,\n    defaultOptions,\n    retryCallback,\n  }: {\n    logger?: ErrorLogger;\n    reporter?: ErrorReporter;\n    notifier?: ErrorNotifier;\n    defaultOptions?: Partial<ErrorHandlerOptions>;\n    retryCallback?: () => void;\n  }): void {\n    if (log) errorHandlerConfig.setLogger(log);\n    if (reporter) errorHandlerConfig.setReporter(reporter);\n    if (notifier) errorHandlerConfig.setNotifier(notifier);\n    if (defaultOptions) errorHandlerConfig.setDefaultOptions(defaultOptions);\n    if (retryCallback) setRetryCallback(retryCallback);\n  }\n\n  /**\n   * Handle any error with full error processing pipeline\n   */\n  static async handle(error: unknown, options: ErrorHandlerOptions = {}): Promise<unknown> {\n    const appError = isApplicationError(error)\n      ? error\n      : ErrorFactory.fromUnknownError(error, options.context);\n\n    const finalOptions = {\n      ...errorHandlerConfig.getDefaultOptions(),\n      ...options,\n    };\n\n    if (finalOptions.logError) {\n      const configuredLogger = errorHandlerConfig.getLogger();\n      if (configuredLogger) {\n        configuredLogger(appError, options.context);\n      } else {\n        logger.error('[ErrorHandler]', options.context, appError);\n      }\n    }\n\n    if (finalOptions.reportError && appError.isOperational) {\n      const reporter = errorHandlerConfig.getReporter();\n      if (reporter) {\n        try {\n          reporter(appError, options.context);\n        } catch (reportError) {\n          logger.error('[ErrorHandler] Failed to report error', undefined, reportError as Error);\n        }\n      }\n    }\n\n    if (finalOptions.showUserNotification) {\n      notifyError(appError);\n    }\n\n    if (finalOptions.rethrow) {\n      throw appError;\n    }\n\n    return options.fallback;\n  }\n\n  /**\n   * Handle error without throwing (safe wrapper)\n   */\n  static async handleSafe<T>(\n    operation: () => Promise<T>,\n    options: ErrorHandlerOptions & { fallback: T }\n  ): Promise<T> {\n    try {\n      return await operation();\n    } catch (error) {\n      return (await ErrorHandler.handle(error, { ...options, rethrow: false })) as T;\n    }\n  }\n\n  /**\n   * Handle error synchronously\n   */\n  static handleSync(error: unknown, options: ErrorHandlerOptions = {}): unknown {\n    const appError = isApplicationError(error)\n      ? error\n      : ErrorFactory.fromUnknownError(error, options.context);\n\n    const finalOptions = {\n      ...errorHandlerConfig.getDefaultOptions(),\n      ...options,\n    };\n\n    if (finalOptions.logError) {\n      const configuredLogger = errorHandlerConfig.getLogger();\n      if (configuredLogger) {\n        configuredLogger(appError, options.context);\n      } else {\n        logger.error('[ErrorHandler]', options.context, appError);\n      }\n    }\n\n    if (finalOptions.showUserNotification) {\n      notifyError(appError);\n    }\n\n    if (finalOptions.reportError && appError.isOperational) {\n      const reporter = errorHandlerConfig.getReporter();\n      if (reporter) {\n        Promise.resolve().then(() => {\n          try {\n            reporter(appError, options.context);\n          } catch (reportError) {\n            logger.error('[ErrorHandler] Failed to report error', undefined, reportError as Error);\n          }\n        });\n      }\n    }\n\n    if (finalOptions.rethrow) {\n      throw appError;\n    }\n\n    return options.fallback;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ErrorHandlerConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/errorNotifications.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[138,158],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from './ApplicationError';\nimport { errorHandlerConfig } from './ErrorHandlerConfig';\nimport { logger } from '../monitoring/Logger';\n\n/**\n * Error notification interface\n */\nexport interface ErrorNotification {\n  title: string;\n  message: string;\n  type: 'error' | 'warning' | 'info';\n  duration?: number;\n  actions?: Array<{\n    label: string;\n    action: () => void;\n  }>;\n}\n\nlet retryCallback: () => void = () => {};\n\nexport function setRetryCallback(callback: () => void): void {\n  retryCallback = callback;\n}\n\nexport function getRetryCallback(): () => void {\n  return retryCallback;\n}\n\n/**\n * Create user notification from error\n */\nexport function createNotification(error: ApplicationError): ErrorNotification {\n  const baseNotification: ErrorNotification = {\n    title: 'Error',\n    message: error.getUserMessage(),\n    type: 'error',\n    duration: 5000,\n  };\n\n  switch (error.code) {\n    case 'NETWORK_ERROR':\n      return {\n        ...baseNotification,\n        title: 'Connection Error',\n        actions: [\n          {\n            label: 'Retry',\n            action: () => getRetryCallback()(),\n          },\n        ],\n      };\n    case 'VALIDATION_ERROR':\n      return {\n        ...baseNotification,\n        title: 'Validation Error',\n        type: 'warning',\n        duration: 3000,\n      };\n    case 'AUTHENTICATION_ERROR':\n      return {\n        ...baseNotification,\n        title: 'Authentication Required',\n        actions: [\n          {\n            label: 'Sign In',\n            action: () => {\n              logger.info('Redirect to sign in');\n            },\n          },\n        ],\n      };\n    case 'NOT_FOUND':\n      return {\n        ...baseNotification,\n        title: 'Not Found',\n        type: 'info',\n        duration: 3000,\n      };\n    case 'RATE_LIMIT_ERROR':\n      return {\n        ...baseNotification,\n        title: 'Rate Limit Exceeded',\n        type: 'warning',\n        duration: 8000,\n      };\n    case 'AUDIO_ERROR':\n      return {\n        ...baseNotification,\n        title: 'Audio Error',\n        actions: [\n          {\n            label: 'Try Again',\n            action: () => {\n              logger.info('Retry audio playback');\n            },\n          },\n        ],\n      };\n    default:\n      return baseNotification;\n  }\n}\n\n/**\n * Notify user about an error using configured notifier\n */\nexport function notifyError(error: ApplicationError): void {\n  const notifier = errorHandlerConfig.getNotifier();\n  if (!notifier) return;\n\n  const notification = createNotification(error);\n\n  try {\n    notifier(notification);\n  } catch (notifyError) {\n    logger.error('[ErrorHandler] Failed to show notification', undefined, notifyError as Error);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/factory.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Method 'fromHttpStatus' has a complexity of 14. Maximum allowed is 10.","line":15,"column":17,"nodeType":"FunctionExpression","messageId":"complex","endLine":46,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ApplicationError } from './ApplicationError';\nimport { isApplicationError } from './guards';\nimport {\n  AuthenticationError,\n  AuthorizationError,\n  NotFoundError,\n  ConflictError,\n  ApiError,\n  RateLimitError,\n  NetworkError,\n  ValidationError,\n} from './types';\n\nexport const ErrorFactory = {\n  fromHttpStatus(\n    status: number,\n    message: string,\n    context?: Record<string, unknown>\n  ): ApplicationError {\n    switch (true) {\n      case status === 400:\n        return new ValidationError(message, context);\n      case status === 401:\n        return new AuthenticationError(message, context);\n      case status === 403:\n        return new AuthorizationError(message, context);\n      case status === 404:\n        return new NotFoundError(message || 'Resource', context);\n      case status === 409:\n        return new ConflictError(message, context);\n      case status === 429:\n        return new RateLimitError(message, undefined, context);\n      case status >= 500: {\n        const endpoint =\n          typeof context === 'object' &&\n          context !== null &&\n          'endpoint' in context &&\n          typeof (context as { endpoint?: unknown }).endpoint === 'string'\n            ? ((context as { endpoint?: string }).endpoint ?? 'unknown')\n            : 'unknown';\n        return new ApiError(message, endpoint, status, context);\n      }\n      default:\n        return new ApplicationError(message, 'HTTP_ERROR', status, true, context);\n    }\n  },\n\n  fromNetworkFailure(message: string, endpoint?: string, cause?: Error): NetworkError {\n    return new NetworkError(message, { endpoint }, cause);\n  },\n\n  fromUnknownError(error: unknown, context?: Record<string, unknown>): ApplicationError {\n    if (isApplicationError(error)) {\n      return error;\n    }\n    const message =\n      typeof error === 'object' &&\n      error !== null &&\n      'message' in error &&\n      typeof (error as { message?: unknown }).message === 'string'\n        ? (error as { message: string }).message\n        : 'Unknown error occurred';\n    const cause = error instanceof Error ? error : undefined;\n    return new ApplicationError(message, 'UNKNOWN_ERROR', 500, false, context, cause);\n  },\n};\n\nexport default ErrorFactory;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/guards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/auth.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class AuthenticationError extends ApplicationError {\n  constructor(\n    message: string = 'Authentication required',\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'AUTHENTICATION_ERROR', 401, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Please sign in to continue.';\n  }\n}\n\nexport class AuthorizationError extends ApplicationError {\n  constructor(\n    message: string = 'Insufficient permissions',\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'AUTHORIZATION_ERROR', 403, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'You do not have permission to perform this action.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/http.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}},{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (5). Maximum allowed is 4.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":26,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class NotFoundError extends ApplicationError {\n  constructor(resource: string, context?: Record<string, unknown>, cause?: Error) {\n    const message = `${resource} not found`;\n    super(message, 'NOT_FOUND', 404, true, { resource, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    const resource = this.context?.resource || 'Resource';\n    return `${resource} could not be found.`;\n  }\n}\n\nexport class ConflictError extends ApplicationError {\n  constructor(message: string, context?: Record<string, unknown>, cause?: Error) {\n    super(message, 'CONFLICT_ERROR', 409, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'This action conflicts with existing data.';\n  }\n}\n\nexport class ApiError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly endpoint: string,\n    statusCode: number = 500,\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'API_ERROR', statusCode, true, { endpoint, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    if (this.statusCode >= 400 && this.statusCode < 500) {\n      return 'There was an issue with your request. Please try again.';\n    }\n    return 'The service is temporarily unavailable. Please try again later.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/misc.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class AudioError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly audioUrl?: string,\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'AUDIO_ERROR', 500, true, { audioUrl, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Audio playback failed. Please check your connection and try again.';\n  }\n}\n\nexport class ConfigurationError extends ApplicationError {\n  constructor(message: string, context?: Record<string, unknown>, cause?: Error) {\n    super(message, 'CONFIGURATION_ERROR', 500, false, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Application configuration error. Please contact support.';\n  }\n}\n\nexport class FeatureNotAvailableError extends ApplicationError {\n  constructor(featureName: string, context?: Record<string, unknown>, cause?: Error) {\n    const message = `Feature '${featureName}' is not available`;\n    super(message, 'FEATURE_NOT_AVAILABLE', 503, true, { featureName, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    return 'This feature is currently unavailable.';\n  }\n}\n\nexport class TimeoutError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly timeoutMs: number,\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'TIMEOUT_ERROR', 408, true, { timeoutMs, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Operation timed out. Please try again.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/network.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class NetworkError extends ApplicationError {\n  constructor(message: string, context?: Record<string, unknown>, cause?: Error) {\n    super(message, 'NETWORK_ERROR', 503, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Network connection failed. Please check your internet connection and try again.';\n  }\n}\n\nexport class RateLimitError extends ApplicationError {\n  constructor(\n    message: string = 'Rate limit exceeded',\n    public readonly retryAfter?: number,\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'RATE_LIMIT_ERROR', 429, true, { retryAfter, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    const waitTime = this.retryAfter ? ` Please wait ${this.retryAfter} seconds.` : '';\n    return `Too many requests.${waitTime}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/storage.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class StorageError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly storageType: 'localStorage' | 'indexedDB' | 'memory',\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'STORAGE_ERROR', 500, true, { storageType, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Failed to save data locally. Please try again.';\n  }\n}\n\nexport class CacheError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly operation: 'get' | 'set' | 'delete' | 'clear',\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'CACHE_ERROR', 500, true, { operation, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Cache operation failed. This may affect performance but functionality should continue.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/validation.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":56,"fix":{"range":[34,53],"text":"@/src/infrastructure/errors/ApplicationError"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { ApplicationError } from '../ApplicationError';\n\nexport class ValidationError extends ApplicationError {\n  constructor(message: string, context?: Record<string, unknown>, cause?: Error) {\n    super(message, 'VALIDATION_ERROR', 400, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'Please check your input and try again.';\n  }\n}\n\nexport default ValidationError;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.transports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":21,"column":1,"nodeType":"ImportDeclaration","endLine":21,"endColumn":42,"fix":{"range":[641,656],"text":"@/config"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * Centralized Logging Service\n *\n * Provides structured logging with multiple transports and log levels.\n * Supports console, file, and remote logging based on configuration.\n */\n\nimport {\n  setContext as setContextHelper,\n  clearContext as clearContextHelper,\n  child as childHelper,\n} from './Logger.context';\nimport {\n  addTransport as addTransportHelper,\n  removeTransport as removeTransportHelper,\n  flush as flushTransports,\n  destroy as destroyTransports,\n} from './Logger.transports';\nimport { parseLogLevel, setupDefaultTransports, getSource } from './Logger.utils';\nimport { LogLevel } from './types';\nimport { config } from '../../../config';\n\nimport type { ILoggerTransport, LogEntry } from './types';\n// Types moved to './types' to avoid cycles\n\nexport class Logger {\n  private static instance: Logger;\n  private transports: ILoggerTransport[] = [];\n  private contextData: Record<string, unknown> = {};\n  private minLevel: LogLevel;\n\n  constructor() {\n    this.minLevel = parseLogLevel(config.logging.level);\n    setupDefaultTransports(this);\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  addTransport(transport: ILoggerTransport): void {\n    addTransportHelper(this.transports, transport);\n  }\n\n  removeTransport(transport: ILoggerTransport): void {\n    removeTransportHelper(this.transports, transport);\n  }\n\n  setContext(context: Record<string, unknown>): void {\n    this.contextData = setContextHelper(this.contextData, context);\n  }\n\n  clearContext(): void {\n    this.contextData = clearContextHelper();\n  }\n\n  child(context: Record<string, unknown>): Logger {\n    return childHelper(this, this.contextData, context);\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.minLevel;\n  }\n\n  private log(\n    level: LogLevel,\n    message: string,\n    context?: Record<string, unknown>,\n    error?: Error\n  ): void {\n    if (!this.shouldLog(level)) return;\n\n    const entry: LogEntry = {\n      level,\n      message,\n      timestamp: new Date(),\n      context: { ...this.contextData, ...context },\n      error,\n      source: getSource(),\n    };\n\n    // Send to all transports\n    this.transports.forEach((transport) => {\n      try {\n        const result = transport.log(entry);\n        // Handle async transports\n        if (result instanceof Promise) {\n          result.catch(() => {\n            // Swallow transport errors to prevent recursive logging\n          });\n        }\n      } catch {\n        // Swallow transport errors to prevent recursive logging\n      }\n    });\n  }\n\n  debug(message: string, context?: Record<string, unknown>): void {\n    this.log(LogLevel.DEBUG, message, context);\n  }\n\n  info(message: string, context?: Record<string, unknown>): void {\n    this.log(LogLevel.INFO, message, context);\n  }\n\n  warn(message: string, context?: Record<string, unknown>, error?: Error): void {\n    this.log(LogLevel.WARN, message, context, error);\n  }\n\n  error(message: string | Error, context?: Record<string, unknown>, error?: Error): void {\n    if (message instanceof Error) {\n      this.log(LogLevel.ERROR, message.message, context, message);\n    } else {\n      this.log(LogLevel.ERROR, message as string, context, error);\n    }\n  }\n\n  async flush(): Promise<void> {\n    await flushTransports(this.transports);\n  }\n\n  async destroy(): Promise<void> {\n    await destroyTransports(this.transports);\n    this.transports = [];\n  }\n}\n\n// Export singleton instances\nexport const logger = Logger.getInstance();\n\n// Types already exported as interfaces above\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":42,"fix":{"range":[113,128],"text":"@/config"}},{"ruleId":"complexity","severity":1,"message":"Function 'getSource' has a complexity of 11. Maximum allowed is 10.","line":27,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":44,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { RemoteTransport } from './RemoteTransport';\nimport { LogLevel } from './types';\nimport { config } from '../../../config';\n\nimport type { Logger } from './Logger';\n\nexport function parseLogLevel(level: string): LogLevel {\n  const levelMap: Record<string, LogLevel> = {\n    debug: LogLevel.DEBUG,\n    info: LogLevel.INFO,\n    warn: LogLevel.WARN,\n    error: LogLevel.ERROR,\n  };\n  return levelMap[level.toLowerCase()] ?? LogLevel.INFO;\n}\n\nexport function setupDefaultTransports(logger: Logger): void {\n  if (!config.logging.enableRemote) return;\n  // Add remote transport if endpoint is configured\n  const endpoint = process.env.LOG_ENDPOINT;\n  const apiKey = process.env.LOG_API_KEY;\n  if (endpoint) {\n    logger.addTransport(new RemoteTransport(endpoint, { apiKey }));\n  }\n}\n\nexport function getSource(): string | undefined {\n  const inBrowser = typeof window !== 'undefined' && typeof window.Error !== 'undefined';\n  if (!inBrowser) return undefined;\n  try {\n    const stack = new Error().stack;\n    if (!stack) return undefined;\n    const lines = stack.split('\\n');\n    // Find the first line that's not from this logger\n    for (let i = 3; i < lines.length; i++) {\n      const line = lines[i];\n      const isFromLogger = line?.includes('Logger.ts') || line?.includes('console.');\n      if (line && !isFromLogger) return line.trim();\n    }\n  } catch {\n    // Ignore errors in source detection\n  }\n  return undefined;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/MemoryTransport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/PerformanceLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/RemoteTransport.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":60,"fix":{"range":[108,131],"text":"@/lib/api/client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { LogLevel, type LogEntry, type ILoggerTransport } from './types';\nimport { fetchWithTimeout } from '../../../lib/api/client';\n\n/**\n * Remote transport for sending logs to external services\n */\nexport class RemoteTransport implements ILoggerTransport {\n  private buffer: LogEntry[] = [];\n  private flushInterval: number;\n  private endpoint: string;\n  private apiKey?: string;\n  private batchSize: number;\n  private flushTimer?: NodeJS.Timeout;\n\n  constructor(\n    endpoint: string,\n    options: {\n      apiKey?: string;\n      flushInterval?: number;\n      batchSize?: number;\n    } = {}\n  ) {\n    this.endpoint = endpoint;\n    this.apiKey = options.apiKey;\n    this.flushInterval = options.flushInterval || 10000; // 10 seconds\n    this.batchSize = options.batchSize || 100;\n\n    // Auto-flush on interval\n    if (typeof window === 'undefined') {\n      // Node.js environment\n      this.flushTimer = setInterval(() => {\n        this.flush();\n      }, this.flushInterval);\n    }\n  }\n\n  log(entry: LogEntry): void {\n    this.buffer.push(entry);\n\n    // Flush immediately for errors, or when buffer is full\n    if (entry.level >= LogLevel.ERROR || this.buffer.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  async flush(): Promise<void> {\n    if (this.buffer.length === 0) return;\n\n    const entries = [...this.buffer];\n    this.buffer = [];\n\n    try {\n      await fetchWithTimeout(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(this.apiKey ? { Authorization: `Bearer ${this.apiKey}` } : {}),\n        },\n        body: JSON.stringify({ entries }),\n        errorPrefix: 'Failed to send logs',\n      });\n    } catch {\n      // Re-add failed entries to buffer for retry\n      this.buffer.unshift(...entries);\n      // Unable to log the failure via central logger to avoid cycles\n    }\n  }\n\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flush();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/ConsoleErrorTracker.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":36,"fix":{"range":[24,33],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[136,148],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { logger } from '../Logger';\n\nimport type { ErrorContext, IErrorTracker } from './types';\nimport type { ApplicationError } from '../../errors';\n\nexport class ConsoleErrorTracker implements IErrorTracker {\n  captureError(error: Error | ApplicationError, context?: ErrorContext): void {\n    logger.error('[ErrorTracker] Error captured:', context, error);\n  }\n\n  captureMessage(message: string, level = 'info', context?: ErrorContext): void {\n    const logLevel = level === 'error' ? 'error' : level === 'warning' ? 'warn' : 'info';\n    if (logLevel === 'error') {\n      logger.error(`[ErrorTracker] Message: ${message}`, context);\n    } else if (logLevel === 'warn') {\n      logger.warn(`[ErrorTracker] Message: ${message}`, context);\n    } else {\n      logger.info(`[ErrorTracker] Message: ${message}`, context);\n    }\n  }\n\n  setUser(user: { id?: string; email?: string; username?: string }): void {\n    logger.debug('[ErrorTracker] User set:', { user });\n  }\n\n  setContext(key: string, data: Record<string, unknown>): void {\n    logger.debug('[ErrorTracker] Context set:', { key, data });\n  }\n\n  addBreadcrumb(breadcrumb: {\n    message: string;\n    category?: string;\n    level?: string;\n    timestamp?: number;\n    data?: Record<string, unknown>;\n  }): void {\n    logger.debug('[ErrorTracker] Breadcrumb added:', { breadcrumb });\n  }\n\n  async flush(): Promise<void> {\n    // No-op for console tracker\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/ErrorTrackerService.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":45,"fix":{"range":[301,319],"text":"@/config"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":54,"fix":{"range":[422,434],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { ConsoleErrorTracker } from './ConsoleErrorTracker';\nimport { RemoteErrorTracker } from './RemoteErrorTracker';\nimport { SentryErrorTracker } from './SentryErrorTracker';\nimport { addBreadcrumb as recordBreadcrumb, getBreadcrumbs, setupGlobalHandlers } from './utils';\nimport { config } from '../../../../config';\n\nimport type { ErrorContext, IErrorTracker } from './types';\nimport type { ApplicationError } from '../../errors';\n\nexport class ErrorTrackerService {\n  private static instance: ErrorTrackerService;\n  private tracker: IErrorTracker;\n  private globalContext: Record<string, unknown> = {};\n  private constructor() {\n    this.tracker = this.createTracker();\n    setupGlobalHandlers(this.captureError.bind(this));\n  }\n\n  static getInstance(): ErrorTrackerService {\n    if (!ErrorTrackerService.instance) {\n      ErrorTrackerService.instance = new ErrorTrackerService();\n    }\n    return ErrorTrackerService.instance;\n  }\n\n  private createTracker(): IErrorTracker {\n    if (!config.features.enableErrorTracking) {\n      return new ConsoleErrorTracker();\n    }\n\n    if (config.monitoring.sentry?.dsn) {\n      return new SentryErrorTracker();\n    }\n\n    const endpoint = process.env.ERROR_TRACKING_ENDPOINT;\n    const apiKey = process.env.ERROR_TRACKING_API_KEY;\n    if (endpoint) {\n      return new RemoteErrorTracker(endpoint, apiKey);\n    }\n\n    return new ConsoleErrorTracker();\n  }\n\n  captureError(error: Error | ApplicationError, context?: ErrorContext): void {\n    const enhancedContext: ErrorContext = {\n      ...this.globalContext,\n      ...context,\n      url: typeof window !== 'undefined' ? window.location.href : undefined,\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n    };\n\n    const breadcrumbs = getBreadcrumbs();\n    if (breadcrumbs.length > 0) {\n      enhancedContext.metadata = {\n        ...enhancedContext.metadata,\n        breadcrumbs,\n      };\n    }\n\n    this.tracker.captureError(error, enhancedContext);\n\n    this.addBreadcrumb({\n      message: `Error: ${error.message}`,\n      category: 'error',\n      level: 'error',\n      data: { error: error.constructor.name },\n    });\n  }\n\n  captureMessage(message: string, level = 'info', context?: ErrorContext): void {\n    const enhancedContext: ErrorContext = {\n      ...this.globalContext,\n      ...context,\n    };\n\n    this.tracker.captureMessage(message, level, enhancedContext);\n  }\n\n  setUser(user: { id?: string; email?: string; username?: string }): void {\n    this.tracker.setUser(user);\n    this.globalContext.userId = user.id;\n  }\n\n  setContext(key: string, data: Record<string, unknown>): void {\n    this.tracker.setContext(key, data);\n    this.globalContext[key] = data;\n  }\n\n  addBreadcrumb(breadcrumb: Parameters<IErrorTracker['addBreadcrumb']>[0]): void {\n    recordBreadcrumb(this.tracker, breadcrumb);\n  }\n\n  async flush(): Promise<void> {\n    await this.tracker.flush();\n  }\n\n  createContext(\n    component?: string,\n    action?: string,\n    metadata?: Record<string, unknown>\n  ): ErrorContext {\n    return {\n      component,\n      action,\n      metadata,\n      ...this.globalContext,\n    };\n  }\n}\n\nexport const errorTracker = ErrorTrackerService.getInstance();\n\nexport type { IErrorTracker, ErrorContext } from './types';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/RemoteErrorTracker.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":63,"fix":{"range":[34,60],"text":"@/lib/api/client"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":51,"fix":{"range":[99,111],"text":"@/src/infrastructure/errors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":36,"fix":{"range":[138,147],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":54,"fix":{"range":[250,262],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { fetchWithTimeout } from '../../../../lib/api/client';\nimport { isApplicationError } from '../../errors';\nimport { logger } from '../Logger';\n\nimport type { ErrorContext, IErrorTracker } from './types';\nimport type { ApplicationError } from '../../errors';\n\nexport class RemoteErrorTracker implements IErrorTracker {\n  private endpoint: string;\n  private apiKey?: string;\n  private buffer: Array<{\n    type: 'error' | 'message';\n    data: unknown;\n    timestamp: number;\n  }> = [];\n  private flushTimer?: NodeJS.Timeout;\n\n  constructor(endpoint: string, apiKey?: string) {\n    this.endpoint = endpoint;\n    this.apiKey = apiKey;\n\n    // Auto-flush every 30 seconds\n    if (typeof window === 'undefined') {\n      this.flushTimer = setInterval(() => {\n        this.flush();\n      }, 30000);\n    }\n  }\n\n  captureError(error: Error | ApplicationError, context?: ErrorContext): void {\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      name: error.name,\n      ...(isApplicationError(error)\n        ? {\n            code: error.code,\n            statusCode: error.statusCode,\n            isOperational: error.isOperational,\n            context: error.context,\n          }\n        : {}),\n      trackingContext: context,\n    };\n\n    this.buffer.push({\n      type: 'error',\n      data: errorData,\n      timestamp: Date.now(),\n    });\n\n    // Flush immediately for fatal errors\n    if (context?.level === 'fatal') {\n      void this.flush();\n    }\n  }\n\n  captureMessage(message: string, level = 'info', context?: ErrorContext): void {\n    this.buffer.push({\n      type: 'message',\n      data: {\n        message,\n        level,\n        context,\n      },\n      timestamp: Date.now(),\n    });\n  }\n\n  setUser(user: { id?: string; email?: string; username?: string }): void {\n    // Store user context for future events\n    this.buffer.push({\n      type: 'message',\n      data: {\n        message: 'User context set',\n        level: 'info',\n        context: { user },\n      },\n      timestamp: Date.now(),\n    });\n  }\n\n  setContext(key: string, data: Record<string, unknown>): void {\n    // Store context for future events\n    this.buffer.push({\n      type: 'message',\n      data: {\n        message: `Context set: ${key}`,\n        level: 'info',\n        context: { [key]: data },\n      },\n      timestamp: Date.now(),\n    });\n  }\n\n  addBreadcrumb(breadcrumb: {\n    message: string;\n    category?: string;\n    level?: string;\n    timestamp?: number;\n    data?: Record<string, unknown>;\n  }): void {\n    this.buffer.push({\n      type: 'message',\n      data: {\n        message: `Breadcrumb: ${breadcrumb.message}`,\n        level: 'info',\n        context: { breadcrumb },\n      },\n      timestamp: Date.now(),\n    });\n  }\n\n  async flush(): Promise<void> {\n    if (this.buffer.length === 0) return;\n\n    const events = [...this.buffer];\n    this.buffer = [];\n\n    try {\n      await fetchWithTimeout(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(this.apiKey ? { Authorization: `Bearer ${this.apiKey}` } : {}),\n        },\n        body: JSON.stringify({ events }),\n        errorPrefix: 'Failed to send error tracking data',\n      });\n    } catch (error) {\n      logger.warn('Failed to send error tracking data', undefined, error as Error);\n      // Re-add events to buffer for retry\n      this.buffer.unshift(...events);\n    }\n  }\n\n  destroy(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    void this.flush();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/SentryErrorTracker.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":36,"fix":{"range":[24,33],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":54,"fix":{"range":[197,209],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { logger } from '../Logger';\nimport { ConsoleErrorTracker } from './ConsoleErrorTracker';\n\nimport type { ErrorContext, IErrorTracker } from './types';\nimport type { ApplicationError } from '../../errors';\n\ninterface SentryLike {\n  withScope: (callback: (scope: SentryScope) => void) => void;\n  captureException: (error: Error) => void;\n  captureMessage: (message: string, level?: string) => void;\n  setUser: (user: { id?: string; email?: string; username?: string }) => void;\n  setContext: (key: string, data: Record<string, unknown>) => void;\n  addBreadcrumb: (breadcrumb: Record<string, unknown>) => void;\n  flush: (timeout?: number) => Promise<boolean>;\n}\n\ninterface SentryScope {\n  setUser: (user: { id?: string }) => void;\n  setLevel: (level: string) => void;\n  setTag: (key: string, value: string) => void;\n  setFingerprint: (fingerprint: string[]) => void;\n  setContext: (key: string, data: Record<string, unknown>) => void;\n}\n\nexport class SentryErrorTracker implements IErrorTracker {\n  private isEnabled = false;\n  private sentry: SentryLike | null = null;\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      // Dynamically import Sentry if available\n      this.sentry = (await import('@sentry/nextjs')) as SentryLike;\n      this.isEnabled = true;\n\n      logger.info('Sentry error tracker initialized');\n    } catch {\n      logger.warn('Sentry not available, falling back to console error tracking');\n      this.isEnabled = false;\n    }\n  }\n\n  captureError(error: Error | ApplicationError, context?: ErrorContext): void {\n    if (!this.isEnabled || !this.sentry) {\n      // Fallback to console\n      new ConsoleErrorTracker().captureError(error, context);\n      return;\n    }\n\n    this.sentry.withScope((scope: SentryScope) => {\n      if (context) {\n        if (context.userId) scope.setUser({ id: context.userId });\n        if (context.level) scope.setLevel(context.level);\n        if (context.tags) {\n          Object.entries(context.tags).forEach(([key, value]) => {\n            scope.setTag(key, value);\n          });\n        }\n        if (context.fingerprint) scope.setFingerprint(context.fingerprint);\n        if (context.component) scope.setTag('component', context.component);\n        if (context.action) scope.setTag('action', context.action);\n        if (context.metadata) {\n          scope.setContext('metadata', context.metadata);\n        }\n      }\n\n      this.sentry!.captureException(error);\n    });\n  }\n\n  captureMessage(message: string, level = 'info', context?: ErrorContext): void {\n    if (!this.isEnabled || !this.sentry) {\n      // Fallback to console\n      new ConsoleErrorTracker().captureMessage(message, level, context);\n      return;\n    }\n\n    this.sentry.withScope((scope: SentryScope) => {\n      if (context) {\n        if (context.userId) scope.setUser({ id: context.userId });\n        if (context.tags) {\n          Object.entries(context.tags).forEach(([key, value]) => {\n            scope.setTag(key, value);\n          });\n        }\n        if (context.metadata) {\n          scope.setContext('metadata', context.metadata);\n        }\n      }\n\n      this.sentry!.captureMessage(message, level);\n    });\n  }\n\n  setUser(user: { id?: string; email?: string; username?: string }): void {\n    if (!this.isEnabled || !this.sentry) return;\n\n    this.sentry.setUser(user);\n  }\n\n  setContext(key: string, data: Record<string, unknown>): void {\n    if (!this.isEnabled || !this.sentry) return;\n\n    this.sentry.setContext(key, data);\n  }\n\n  addBreadcrumb(breadcrumb: {\n    message: string;\n    category?: string;\n    level?: string;\n    timestamp?: number;\n    data?: Record<string, unknown>;\n  }): void {\n    if (!this.isEnabled || !this.sentry) return;\n\n    this.sentry.addBreadcrumb({\n      message: breadcrumb.message,\n      category: breadcrumb.category || 'default',\n      level: breadcrumb.level || 'info',\n      timestamp: breadcrumb.timestamp || Date.now() / 1000,\n      data: breadcrumb.data,\n    });\n  }\n\n  async flush(): Promise<void> {\n    if (!this.isEnabled || !this.sentry) return;\n\n    try {\n      await this.sentry.flush(5000); // 5 second timeout\n    } catch (error) {\n      logger.warn('Failed to flush Sentry errors:', error);\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/types.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":54,"fix":{"range":[39,51],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import type { ApplicationError } from '../../errors';\n\nexport interface ErrorContext {\n  userId?: string;\n  sessionId?: string;\n  requestId?: string;\n  userAgent?: string;\n  url?: string;\n  component?: string;\n  action?: string;\n  metadata?: Record<string, unknown>;\n  tags?: Record<string, string>;\n  fingerprint?: string[];\n  level?: 'fatal' | 'error' | 'warning' | 'info';\n}\n\nexport interface IErrorTracker {\n  captureError(error: Error | ApplicationError, context?: ErrorContext): void;\n  captureMessage(message: string, level?: string, context?: ErrorContext): void;\n  setUser(user: { id?: string; email?: string; username?: string }): void;\n  setContext(key: string, data: Record<string, unknown>): void;\n  addBreadcrumb(breadcrumb: {\n    message: string;\n    category?: string;\n    level?: string;\n    timestamp?: number;\n    data?: Record<string, unknown>;\n  }): void;\n  flush(): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":54,"fix":{"range":[99,111],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import type { ErrorContext, IErrorTracker } from './types';\nimport type { ApplicationError } from '../../errors';\n\nexport type Breadcrumb = Parameters<IErrorTracker['addBreadcrumb']>[0];\n\nlet breadcrumbs: Breadcrumb[] = [];\nconst MAX_BREADCRUMBS = 100;\n\nexport function addBreadcrumb(tracker: IErrorTracker, breadcrumb: Breadcrumb): void {\n  const enhancedBreadcrumb = {\n    timestamp: Date.now() / 1000,\n    ...breadcrumb,\n  };\n\n  breadcrumbs.push(enhancedBreadcrumb);\n\n  if (breadcrumbs.length > MAX_BREADCRUMBS) {\n    breadcrumbs = breadcrumbs.slice(-MAX_BREADCRUMBS);\n  }\n\n  tracker.addBreadcrumb(enhancedBreadcrumb);\n}\n\nexport function getBreadcrumbs(limit = 10): Breadcrumb[] {\n  return breadcrumbs.slice(-limit);\n}\n\nexport function setupGlobalHandlers(\n  captureError: (error: Error | ApplicationError, context?: ErrorContext) => void\n): void {\n  if (typeof window === 'undefined') return;\n\n  window.addEventListener('error', (event) => {\n    captureError(event.error || new Error(event.message), {\n      component: 'global',\n      action: 'unhandled_error',\n      metadata: {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n      },\n    });\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    captureError(event.reason, {\n      component: 'global',\n      action: 'unhandled_rejection',\n    });\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/BookmarkRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":60,"fix":{"range":[231,252],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":85,"fix":{"range":[292,337],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":76,"fix":{"range":[372,413],"text":"@/src/domain/value-objects/StoredBookmark"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":47,"fix":{"range":[440,460],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { toDomain, toPersistence } from './bookmark/bookmarkMapper';\nimport { isStoredBookmarkArray, dedupe } from './bookmark/bookmarkValidation';\nimport * as queries from './bookmark/queries';\nimport { Bookmark, hasNotes } from '../../domain/entities';\nimport { IBookmarkRepository } from '../../domain/repositories/IBookmarkRepository';\nimport { StoredBookmark } from '../../domain/value-objects/StoredBookmark';\nimport { logger } from '../monitoring/Logger';\nimport { getStoredBookmarks, saveStoredBookmarks } from './bookmark/storage';\n\nexport class BookmarkRepository implements IBookmarkRepository {\n  async findById(id: string): Promise<Bookmark | null> {\n    const stored = getStoredBookmarks();\n    const bookmark = stored.find((b) => b.id === id);\n    return bookmark ? toDomain(bookmark) : null;\n  }\n\n  async save(bookmark: Bookmark): Promise<void> {\n    const stored = getStoredBookmarks();\n    const index = stored.findIndex((b) => b.id === bookmark.id);\n    const bookmarkData = toPersistence(bookmark);\n    if (index >= 0) stored[index] = bookmarkData;\n    else stored.push(bookmarkData);\n    saveStoredBookmarks(stored);\n  }\n\n  async remove(id: string): Promise<void> {\n    saveStoredBookmarks(getStoredBookmarks().filter((b) => b.id !== id));\n  }\n\n  async exists(id: string): Promise<boolean> {\n    return getStoredBookmarks().some((b) => b.id === id);\n  }\n\n  existsByUserAndVerse = queries.existsByUserAndVerse;\n  findByUser = queries.findByUser;\n  findByUserWithOptions = queries.findByUserWithOptions;\n  findRecent = queries.findRecent;\n  findByVerse = queries.findByVerse;\n  findBySurah = queries.findBySurah;\n  findBySurahRange = queries.findBySurahRange;\n  findByPosition = queries.findByPosition;\n  existsAtPosition = queries.existsAtPosition;\n  findByTags = queries.findByTags;\n  getTagsByUser = queries.getTagsByUser;\n  findWithNotes = queries.findWithNotes;\n  findByDateRange = queries.findByDateRange;\n  search = queries.search;\n  findNext = queries.findNext;\n  findPrevious = queries.findPrevious;\n  findNearPosition = queries.findNearPosition;\n\n  async saveMany(bookmarks: Bookmark[]): Promise<void> {\n    for (const bookmark of bookmarks) await this.save(bookmark);\n  }\n\n  async removeMany(ids: string[]): Promise<void> {\n    for (const id of ids) await this.remove(id);\n  }\n\n  async removeAllByUser(userId: string): Promise<void> {\n    saveStoredBookmarks(getStoredBookmarks().filter((b) => b.userId !== userId));\n  }\n\n  async removeBySurah(userId: string, surahId: number): Promise<void> {\n    saveStoredBookmarks(\n      getStoredBookmarks().filter((b) => !(b.userId === userId && b.position.surahId === surahId))\n    );\n  }\n\n  async getCountByUser(userId: string): Promise<number> {\n    return (await queries.findByUser(userId)).length;\n  }\n\n  async getCountBySurah(userId: string, surahId: number): Promise<number> {\n    return (await queries.findBySurah(surahId)).filter((b) => b.belongsToUser(userId)).length;\n  }\n\n  async getStatistics(userId: string): Promise<{\n    totalBookmarks: number;\n    surahsCovered: number;\n    mostBookmarkedSurah: { surahId: number; count: number } | null;\n    tagsUsed: number;\n    bookmarksWithNotes: number;\n  }> {\n    const userBookmarks = await queries.findByUser(userId);\n    const surahCounts: Record<number, number> = {};\n    userBookmarks.forEach((b) => {\n      surahCounts[b.position.surahId] = (surahCounts[b.position.surahId] || 0) + 1;\n    });\n    let mostBookmarkedSurah: { surahId: number; count: number } | null = null;\n    for (const [surahId, count] of Object.entries(surahCounts)) {\n      if (!mostBookmarkedSurah || count > mostBookmarkedSurah.count) {\n        mostBookmarkedSurah = { surahId: parseInt(surahId), count };\n      }\n    }\n    const allTags = userBookmarks.flatMap((b) => b.tags);\n    const uniqueTags = new Set(allTags);\n    return {\n      totalBookmarks: userBookmarks.length,\n      surahsCovered: Object.keys(surahCounts).length,\n      mostBookmarkedSurah,\n      tagsUsed: uniqueTags.size,\n      bookmarksWithNotes: userBookmarks.filter((b) => hasNotes(b)).length,\n    };\n  }\n\n  async exportBookmarks(userId: string): Promise<StoredBookmark[]> {\n    return (await queries.findByUser(userId)).map((b) => toPersistence(b));\n  }\n\n  async importBookmarks(userId: string, bookmarks: StoredBookmark[]): Promise<void> {\n    if (!isStoredBookmarkArray(bookmarks)) {\n      logger.warn('Invalid bookmark data for import');\n      return;\n    }\n    for (const b of dedupe(bookmarks)) {\n      const bookmark = toDomain({ ...b, id: b.id || crypto.randomUUID(), userId });\n      await this.save(bookmark);\n    }\n  }\n\n  async cacheForOffline(userId: string): Promise<void> {\n    logger.info('Bookmarks already cached offline', { userId });\n  }\n\n  async clearCache(userId: string): Promise<void> {\n    await this.removeAllByUser(userId);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/TafsirRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":52,"fix":{"range":[208,231],"text":"@/lib/api/client"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":55,"fix":{"range":[258,286],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":81,"fix":{"range":[324,367],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":47,"fix":{"range":[394,414],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (4). Maximum allowed is 3.","line":48,"column":11,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":50,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { fetchResourcesForLanguage } from './tafsirApi';\nimport {\n  cacheResources as cacheTafsirResources,\n  getCachedResources as getTafsirCachedResources,\n} from './tafsirCache';\nimport { apiFetch } from '../../../lib/api/client';\nimport { Tafsir } from '../../domain/entities/Tafsir';\nimport { ITafsirRepository } from '../../domain/repositories/ITafsirRepository';\nimport { logger } from '../monitoring/Logger';\n\n/**\n * Infrastructure implementation of ITafsirRepository\n *\n * Handles external API communication and caching for Tafsir resources.\n * Uses the existing lib/api infrastructure but follows clean architecture patterns.\n */\nexport class TafsirRepository implements ITafsirRepository {\n  /**\n   * Get all available tafsir resources across languages\n   */\n  async getAllResources(): Promise<Tafsir[]> {\n    try {\n      // Try getting comprehensive list first\n      const allResources = await fetchResourcesForLanguage('all');\n      if (allResources.length > 1) {\n        await cacheTafsirResources(allResources);\n        return allResources;\n      }\n    } catch (error) {\n      logger.warn(\n        'Failed to fetch all tafsir resources, trying language-specific approach',\n        undefined,\n        error as Error\n      );\n    }\n\n    // Fallback to language-specific fetching\n    const languages = ['en', 'ar', 'bn', 'ur', 'id', 'tr', 'fa'];\n    const results = await Promise.allSettled(\n      languages.map((lang) => fetchResourcesForLanguage(lang))\n    );\n\n    // Merge results and deduplicate by ID\n    const mergedMap = new Map<number, Tafsir>();\n    for (const result of results) {\n      if (result.status === 'fulfilled') {\n        for (const tafsir of result.value) {\n          if (!mergedMap.has(tafsir.id)) {\n            mergedMap.set(tafsir.id, tafsir);\n          }\n        }\n      }\n    }\n\n    const tafsirs = Array.from(mergedMap.values());\n    if (tafsirs.length > 0) {\n      await cacheTafsirResources(tafsirs);\n    }\n\n    return tafsirs;\n  }\n\n  /**\n   * Get tafsir resources for a specific language\n   */\n  async getResourcesByLanguage(language: string): Promise<Tafsir[]> {\n    return fetchResourcesForLanguage(language);\n  }\n\n  /**\n   * Get a specific tafsir by ID\n   */\n  async getById(id: number): Promise<Tafsir | null> {\n    const allResources = await this.getAllResources();\n    return allResources.find((t) => t.id === id) || null;\n  }\n\n  /**\n   * Get tafsir content for a specific verse\n   */\n  async getTafsirByVerse(verseKey: string, tafsirId: number): Promise<string> {\n    try {\n      // Try primary API first\n      const data = await apiFetch<{ tafsir?: { text: string } }>(\n        `tafsirs/${tafsirId}/by_ayah/${encodeURIComponent(verseKey)}`,\n        {},\n        'Failed to fetch tafsir'\n      );\n      if (data?.tafsir?.text) {\n        return data.tafsir.text;\n      }\n    } catch (error) {\n      logger.warn('Primary tafsir API failed, trying fallback', undefined, error as Error);\n    }\n\n    // Fallback to CDN endpoint\n    const cdnUrl = `https://api.qurancdn.com/api/qdc/tafsirs/${tafsirId}/by_ayah/${encodeURIComponent(verseKey)}`;\n    const data = await apiFetch<{ tafsir?: { text: string } }>(\n      cdnUrl,\n      {},\n      'Failed to fetch tafsir content'\n    );\n    return data.tafsir?.text || '';\n  }\n\n  /**\n   * Search tafsir resources by name or language\n   */\n  async search(searchTerm: string): Promise<Tafsir[]> {\n    const allResources = await this.getAllResources();\n    return allResources.filter((tafsir) => tafsir.matchesSearch(searchTerm));\n  }\n\n  /**\n   * Cache tafsir resources for offline access\n   */\n  async cacheResources(tafsirs: Tafsir[]): Promise<void> {\n    await cacheTafsirResources(tafsirs);\n  }\n\n  /**\n   * Get cached tafsir resources\n   */\n  async getCachedResources(): Promise<Tafsir[]> {\n    return getTafsirCachedResources();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/VerseRepository.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":22,"column":1,"nodeType":"ImportDeclaration","endLine":22,"endColumn":57,"fix":{"range":[825,850],"text":"@/lib/api/chapters"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":23,"column":1,"nodeType":"ImportDeclaration","endLine":23,"endColumn":47,"fix":{"range":[876,897],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":24,"column":1,"nodeType":"ImportDeclaration","endLine":24,"endColumn":79,"fix":{"range":[934,976],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":25,"column":1,"nodeType":"ImportDeclaration","endLine":25,"endColumn":47,"fix":{"range":[1003,1023],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import {\n  findBySurah as queryFindBySurah,\n  findBySurahRange as queryFindBySurahRange,\n  findByJuz as queryFindByJuz,\n  findByPage as queryFindByPage,\n  findByHizb as queryFindByHizb,\n  findByRubAlHizb as queryFindByRubAlHizb,\n  findSajdahVerses as queryFindSajdahVerses,\n  findFirstVerses as queryFindFirstVerses,\n  findByVerseKeys as queryFindByVerseKeys,\n  findRandom as queryFindRandom,\n  getTotalCount as queryGetTotalCount,\n  getCountBySurah as queryGetCountBySurah,\n} from './verseBulkQueries';\nimport { findNext as queryFindNext, findPrevious as queryFindPrevious } from './verseNavigation';\nimport {\n  findById as queryFindById,\n  findBySurahAndAyah as queryFindBySurahAndAyah,\n  search as querySearch,\n  findWithTranslation as queryFindWithTranslation,\n} from './verseSingleQueries';\nimport { getChapters } from '../../../lib/api/chapters';\nimport { Verse } from '../../domain/entities';\nimport { IVerseRepository } from '../../domain/repositories/IVerseRepository';\nimport { logger } from '../monitoring/Logger';\n\nexport class VerseRepository implements IVerseRepository {\n  private readonly defaultTranslationId = 20; // Default English translation\n\n  findById = (id: string): Promise<Verse | null> => queryFindById(id, this.defaultTranslationId);\n\n  save = async (_verse: Verse): Promise<void> => {\n    void _verse; // mark as used\n    logger.warn('Save operation not supported by read-only API');\n    throw new Error('Save operation not supported by read-only API');\n  };\n\n  remove = async (_id: string): Promise<void> => {\n    void _id; // mark as used\n    logger.warn('Remove operation not supported by read-only API');\n    throw new Error('Remove operation not supported by read-only API');\n  };\n\n  exists = async (id: string): Promise<boolean> => (await this.findById(id)) !== null;\n\n  findBySurahAndAyah = (surahId: number, ayahNumber: number): Promise<Verse | null> =>\n    queryFindBySurahAndAyah(surahId, ayahNumber, this.defaultTranslationId);\n\n  search = (\n    query: string,\n    options?: {\n      searchIn?: 'arabic' | 'translation' | 'both';\n      translationId?: number;\n      surahId?: number;\n      limit?: number;\n    }\n  ): Promise<Verse[]> => querySearch(query, options, this.defaultTranslationId);\n\n  findBySurah = (surahId: number): Promise<Verse[]> =>\n    queryFindBySurah(surahId, this.defaultTranslationId);\n\n  findBySurahRange = (surahId: number, fromAyah: number, toAyah: number): Promise<Verse[]> =>\n    queryFindBySurahRange(surahId, fromAyah, toAyah, this.defaultTranslationId);\n\n  findByJuz = (juzNumber: number): Promise<Verse[]> =>\n    queryFindByJuz(juzNumber, this.defaultTranslationId);\n\n  findByPage = (pageNumber: number): Promise<Verse[]> =>\n    queryFindByPage(pageNumber, this.defaultTranslationId);\n\n  findByHizb = (hizbNumber: number): Promise<Verse[]> =>\n    queryFindByHizb(hizbNumber, this.defaultTranslationId);\n\n  findByRubAlHizb = (rubNumber: number): Promise<Verse[]> =>\n    queryFindByRubAlHizb(rubNumber, this.defaultTranslationId);\n\n  findSajdahVerses = (): Promise<Verse[]> => queryFindSajdahVerses(this.defaultTranslationId);\n\n  findFirstVerses = (): Promise<Verse[]> => queryFindFirstVerses(this.defaultTranslationId);\n\n  findByVerseKeys = (verseKeys: string[]): Promise<Verse[]> =>\n    queryFindByVerseKeys(verseKeys, this.defaultTranslationId);\n\n  findRandom = (count = 1, surahId?: number): Promise<Verse[]> =>\n    queryFindRandom(count, surahId, this.defaultTranslationId);\n\n  getTotalCount = (): Promise<number> => queryGetTotalCount();\n\n  getCountBySurah = (surahId: number): Promise<number> =>\n    queryGetCountBySurah(surahId, this.defaultTranslationId);\n\n  findNext = (currentVerseId: string): Promise<Verse | null> =>\n    queryFindNext(currentVerseId, this.defaultTranslationId);\n\n  findPrevious = (currentVerseId: string): Promise<Verse | null> =>\n    queryFindPrevious(currentVerseId, this.defaultTranslationId);\n\n  findWithTranslation = (verseId: string, translationId: number): Promise<Verse | null> =>\n    queryFindWithTranslation(verseId, translationId);\n\n  findByRevelationType = async (type: 'makki' | 'madani'): Promise<Verse[]> => {\n    try {\n      const chapters = await getChapters();\n      const place = type === 'makki' ? 'makkah' : 'madinah';\n      const surahIds = chapters\n        .filter((c) => c.revelation_place.toLowerCase() === place)\n        .map((c) => c.id);\n      const verses = await Promise.all(\n        surahIds.map((id) => queryFindBySurah(id, this.defaultTranslationId))\n      );\n      return verses.flat();\n    } catch (error) {\n      logger.error('Failed to find verses by revelation type:', { type }, error as Error);\n      return [];\n    }\n  };\n\n  private static readonly cachePrefix = 'verse-cache-';\n\n  cacheForOffline = async (surahIds?: number[]): Promise<void> => {\n    const ids = surahIds?.length ? surahIds : Array.from({ length: 114 }, (_, i) => i + 1);\n    for (const id of ids) {\n      try {\n        const verses = await this.findBySurah(id);\n        const serialized = verses.map((v) => v.toPlainObject());\n        localStorage.setItem(`${VerseRepository.cachePrefix}${id}`, JSON.stringify(serialized));\n      } catch (error) {\n        logger.error('Failed to cache verses for offline use:', { surahId: id }, error as Error);\n      }\n    }\n  };\n\n  clearCache = async (): Promise<void> => {\n    const keysToRemove: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(VerseRepository.cachePrefix)) keysToRemove.push(key);\n    }\n    keysToRemove.forEach((key) => localStorage.removeItem(key));\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/__tests__/queries.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":86,"fix":{"range":[34,83],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":71,"fix":{"range":[132,154],"text":"@/src/infrastructure/repositories/bookmark/advancedUserQueries"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":73,"fix":{"range":[211,227],"text":"@/src/infrastructure/repositories/bookmark/folderQueries"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":49,"fix":{"range":[266,276],"text":"@/src/infrastructure/repositories/bookmark/storage"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":57,"fix":{"range":[319,333],"text":"@/src/infrastructure/repositories/bookmark/userQueries"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"import { BookmarkPosition } from '../../../../domain/value-objects/BookmarkPosition';\nimport { findByTags, existsAtPosition } from '../advancedUserQueries';\nimport { findFolders, findFolderWithBookmarks } from '../folderQueries';\nimport { getStoredBookmarks } from '../storage';\nimport { findByUser, findRecent } from '../userQueries';\n\njest.mock('../storage', () => {\n  const actual = jest.requireActual('../storage');\n  return { ...actual, getStoredBookmarks: jest.fn() };\n});\n\nconst mockBookmarks = [\n  {\n    id: '1',\n    userId: 'u1',\n    verseId: 'v1',\n    position: {\n      surahId: 1,\n      ayahNumber: 1,\n      verseKey: '1:1',\n      timestamp: '2024-01-01T00:00:00.000Z',\n      isFirstVerse: false,\n      displayText: '1:1',\n    },\n    createdAt: '2024-01-01T00:00:00.000Z',\n    notes: '',\n    tags: ['tag1', 'folder:work'],\n  },\n  {\n    id: '2',\n    userId: 'u1',\n    verseId: 'v2',\n    position: {\n      surahId: 1,\n      ayahNumber: 2,\n      verseKey: '1:2',\n      timestamp: '2024-02-01T00:00:00.000Z',\n      isFirstVerse: false,\n      displayText: '1:2',\n    },\n    createdAt: '2024-02-01T00:00:00.000Z',\n    notes: '',\n    tags: ['tag2'],\n  },\n  {\n    id: '3',\n    userId: 'u2',\n    verseId: 'v3',\n    position: {\n      surahId: 2,\n      ayahNumber: 1,\n      verseKey: '2:1',\n      timestamp: '2024-03-01T00:00:00.000Z',\n      isFirstVerse: false,\n      displayText: '2:1',\n    },\n    createdAt: '2024-03-01T00:00:00.000Z',\n    notes: '',\n    tags: ['tag1', 'folder:personal'],\n  },\n];\n\nbeforeEach(() => {\n  (getStoredBookmarks as jest.Mock).mockReturnValue(mockBookmarks);\n});\n\ndescribe('userQueries', () => {\n  test('findByUser sorts by creation date', async () => {\n    const result = await findByUser('u1');\n    expect(result).toHaveLength(2);\n    expect(result[0].id).toBe('2');\n  });\n\n  test('findRecent limits results', async () => {\n    const result = await findRecent('u1', 1);\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('2');\n  });\n\n  test('findByTags filters by tags', async () => {\n    const result = await findByTags('u1', ['tag1']);\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('1');\n  });\n\n  test('existsAtPosition checks for bookmark', async () => {\n    const pos = new BookmarkPosition(1, 2, new Date('2024-02-01T00:00:00.000Z'));\n    await expect(existsAtPosition('u1', pos)).resolves.toBe(true);\n  });\n});\n\ndescribe('folderQueries', () => {\n  test('findFolders returns folder names', async () => {\n    const result = await findFolders('u1');\n    expect(result).toEqual(['work']);\n  });\n\n  test('findFolderWithBookmarks returns bookmarks in folder', async () => {\n    const result = await findFolderWithBookmarks('u1', 'work');\n    expect(result).toHaveLength(1);\n    expect(result[0].id).toBe('1');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/advancedUserQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":71,"fix":{"range":[181,205],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":83,"fix":{"range":[242,288],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { findBySurah } from './coreQueries';\nimport { getStoredBookmarks } from './storage';\nimport { findByUser } from './userQueries';\nimport { Bookmark, hasTag, hasNotes } from '../../../domain/entities';\nimport { BookmarkPosition } from '../../../domain/value-objects/BookmarkPosition';\nexport async function existsByUserAndVerse(userId: string, verseId: string): Promise<boolean> {\n  return getStoredBookmarks().some((b) => b.userId === userId && b.verseId === verseId);\n}\n\nexport async function existsAtPosition(\n  userId: string,\n  position: BookmarkPosition\n): Promise<boolean> {\n  return getStoredBookmarks().some(\n    (b) =>\n      b.userId === userId &&\n      b.position.surahId === position.surahId &&\n      b.position.ayahNumber === position.ayahNumber\n  );\n}\n\nexport async function findByTags(userId: string, tags: string[]): Promise<Bookmark[]> {\n  const userBookmarks = await findByUser(userId);\n  return userBookmarks.filter((bookmark) => tags.some((tag) => hasTag(bookmark, tag)));\n}\n\nexport async function getTagsByUser(userId: string): Promise<string[]> {\n  const userBookmarks = await findByUser(userId);\n  const allTags = userBookmarks.flatMap((bookmark) => bookmark.tags);\n  return [...new Set(allTags)].sort();\n}\n\nexport async function findWithNotes(userId: string): Promise<Bookmark[]> {\n  const userBookmarks = await findByUser(userId);\n  return userBookmarks.filter((bookmark) => hasNotes(bookmark));\n}\n\nexport async function findByDateRange(\n  userId: string,\n  startDate: Date,\n  endDate: Date\n): Promise<Bookmark[]> {\n  const userBookmarks = await findByUser(userId);\n  return userBookmarks.filter(\n    (bookmark) => bookmark.createdAt >= startDate && bookmark.createdAt <= endDate\n  );\n}\n\nexport async function search(userId: string, query: string): Promise<Bookmark[]> {\n  const userBookmarks = await findByUser(userId);\n  const searchTerm = query.toLowerCase();\n\n  return userBookmarks.filter(\n    (bookmark) =>\n      bookmark.notes?.toLowerCase().includes(searchTerm) ||\n      bookmark.tags.some((tag) => tag.toLowerCase().includes(searchTerm)) ||\n      bookmark.position.getDisplayText().toLowerCase().includes(searchTerm)\n  );\n}\n\nexport async function findNext(\n  userId: string,\n  currentPosition: BookmarkPosition\n): Promise<Bookmark | null> {\n  const userBookmarks = await findByUser(userId);\n\n  const sorted = userBookmarks.sort((a, b) => {\n    const surahCompare = a.position.surahId - b.position.surahId;\n    if (surahCompare !== 0) return surahCompare;\n    return a.position.ayahNumber - b.position.ayahNumber;\n  });\n\n  return (\n    sorted.find(\n      (bookmark) =>\n        bookmark.position.surahId > currentPosition.surahId ||\n        (bookmark.position.surahId === currentPosition.surahId &&\n          bookmark.position.ayahNumber > currentPosition.ayahNumber)\n    ) || null\n  );\n}\n\nexport async function findPrevious(\n  userId: string,\n  currentPosition: BookmarkPosition\n): Promise<Bookmark | null> {\n  const userBookmarks = await findByUser(userId);\n\n  const sorted = userBookmarks.sort((a, b) => {\n    const surahCompare = b.position.surahId - a.position.surahId;\n    if (surahCompare !== 0) return surahCompare;\n    return b.position.ayahNumber - a.position.ayahNumber;\n  });\n\n  return (\n    sorted.find(\n      (bookmark) =>\n        bookmark.position.surahId < currentPosition.surahId ||\n        (bookmark.position.surahId === currentPosition.surahId &&\n          bookmark.position.ayahNumber < currentPosition.ayahNumber)\n    ) || null\n  );\n}\n\nexport async function findNearPosition(\n  userId: string,\n  position: BookmarkPosition,\n  radius: number\n): Promise<Bookmark[]> {\n  const surahBookmarks = await findBySurah(position.surahId);\n  const userBookmarks = surahBookmarks.filter((b) => b.belongsToUser(userId));\n\n  return userBookmarks.filter(\n    (bookmark) => Math.abs(bookmark.position.ayahNumber - position.ayahNumber) <= radius\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/bookmarkMapper.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":53,"fix":{"range":[26,50],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":83,"fix":{"range":[87,133],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":79,"fix":{"range":[168,212],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { Bookmark } from '../../../domain/entities';\nimport { BookmarkPosition } from '../../../domain/value-objects/BookmarkPosition';\nimport { StoredBookmark } from '../../../domain/value-objects/StoredBookmark';\n\nexport function toDomain(stored: StoredBookmark): Bookmark {\n  return new Bookmark(\n    stored.id,\n    stored.userId,\n    stored.verseId,\n    new BookmarkPosition(\n      stored.position.surahId,\n      stored.position.ayahNumber,\n      new Date(stored.position.timestamp)\n    ),\n    new Date(stored.createdAt),\n    stored.notes,\n    stored.tags || []\n  );\n}\n\nexport function toPersistence(bookmark: Bookmark): StoredBookmark {\n  return {\n    id: bookmark.id,\n    userId: bookmark.userId,\n    verseId: bookmark.verseId,\n    position: bookmark.position.toPlainObject(),\n    createdAt: bookmark.createdAt.toISOString(),\n    notes: bookmark.notes,\n    tags: bookmark.tags,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/bookmarkValidation.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":97,"fix":{"range":[50,94],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { StoredBookmark, isStoredBookmark } from '../../../domain/value-objects/StoredBookmark';\n\nexport function isStoredBookmarkArray(value: unknown): value is StoredBookmark[] {\n  return Array.isArray(value) && value.every((item) => isStoredBookmark(item));\n}\n\nexport function dedupe(bookmarks: StoredBookmark[]): StoredBookmark[] {\n  const map = new Map<string, StoredBookmark>();\n  for (const bookmark of bookmarks) {\n    if (!map.has(bookmark.id)) {\n      map.set(bookmark.id, bookmark);\n    }\n  }\n  return Array.from(map.values());\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/coreQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":53,"fix":{"range":[95,119],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":83,"fix":{"range":[156,202],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { getStoredBookmarks, mapStoredToBookmark } from './storage';\nimport { Bookmark } from '../../../domain/entities';\nimport { BookmarkPosition } from '../../../domain/value-objects/BookmarkPosition';\n\nexport async function findByVerse(verseId: string): Promise<Bookmark[]> {\n  const stored = getStoredBookmarks();\n  return stored.filter((b) => b.verseId === verseId).map((b) => mapStoredToBookmark(b));\n}\n\nexport async function findBySurah(surahId: number): Promise<Bookmark[]> {\n  const stored = getStoredBookmarks();\n  return stored\n    .filter((b) => b.position.surahId === surahId)\n    .map((b) => mapStoredToBookmark(b))\n    .sort((a, b) => a.position.ayahNumber - b.position.ayahNumber);\n}\n\nexport async function findBySurahRange(\n  surahId: number,\n  fromAyah: number,\n  toAyah: number\n): Promise<Bookmark[]> {\n  const surahBookmarks = await findBySurah(surahId);\n  return surahBookmarks.filter(\n    (b) => b.position.ayahNumber >= fromAyah && b.position.ayahNumber <= toAyah\n  );\n}\n\nexport async function findByPosition(position: BookmarkPosition): Promise<Bookmark[]> {\n  const stored = getStoredBookmarks();\n  return stored\n    .filter(\n      (b) =>\n        b.position.surahId === position.surahId && b.position.ayahNumber === position.ayahNumber\n    )\n    .map((b) => mapStoredToBookmark(b));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/folderQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":53,"fix":{"range":[95,119],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { getStoredBookmarks, mapStoredToBookmark } from './storage';\nimport { Bookmark } from '../../../domain/entities';\n\nconst FOLDER_PREFIX = 'folder:';\n\nexport async function findFolders(userId: string): Promise<string[]> {\n  const stored = getStoredBookmarks().filter((b) => b.userId === userId);\n  const folders = new Set<string>();\n  stored.forEach((b) => {\n    b.tags.forEach((tag) => {\n      if (tag.startsWith(FOLDER_PREFIX)) folders.add(tag.slice(FOLDER_PREFIX.length));\n    });\n  });\n  return Array.from(folders).sort();\n}\n\nexport async function findFolderWithBookmarks(\n  userId: string,\n  folderName: string\n): Promise<Bookmark[]> {\n  const tag = `${FOLDER_PREFIX}${folderName}`;\n  return getStoredBookmarks()\n    .filter((b) => b.userId === userId && b.tags.includes(tag))\n    .map((b) => mapStoredToBookmark(b))\n    .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/storage.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":53,"fix":{"range":[88,112],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":83,"fix":{"range":[149,195],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":79,"fix":{"range":[230,274],"text":"@/src/domain/value-objects/StoredBookmark"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":50,"fix":{"range":[301,324],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { isStoredBookmarkArray } from './bookmarkValidation';\nimport { Bookmark } from '../../../domain/entities';\nimport { BookmarkPosition } from '../../../domain/value-objects/BookmarkPosition';\nimport { StoredBookmark } from '../../../domain/value-objects/StoredBookmark';\nimport { logger } from '../../monitoring/Logger';\n\nconst STORAGE_KEY = 'quran_bookmarks';\n\nexport function getStoredBookmarks(): StoredBookmark[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    const parsed = stored ? JSON.parse(stored) : [];\n    return isStoredBookmarkArray(parsed) ? parsed : [];\n  } catch (error) {\n    logger.error('Failed to parse stored bookmarks:', undefined, error as Error);\n    return [];\n  }\n}\n\nexport function saveStoredBookmarks(bookmarks: StoredBookmark[]): void {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(bookmarks));\n  } catch (error) {\n    logger.error('Failed to save bookmarks:', undefined, error as Error);\n  }\n}\n\nexport function mapStoredToBookmark(stored: StoredBookmark): Bookmark {\n  const position = new BookmarkPosition(\n    stored.position.surahId,\n    stored.position.ayahNumber,\n    new Date(stored.position.timestamp)\n  );\n\n  return new Bookmark(\n    stored.id,\n    stored.userId,\n    stored.verseId,\n    position,\n    new Date(stored.createdAt),\n    stored.notes,\n    stored.tags\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/userQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":53,"fix":{"range":[95,119],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { getStoredBookmarks, mapStoredToBookmark } from './storage';\nimport { Bookmark } from '../../../domain/entities';\n\nexport async function findByUser(userId: string): Promise<Bookmark[]> {\n  const stored = getStoredBookmarks();\n  return stored\n    .filter((b) => b.userId === userId)\n    .map((b) => mapStoredToBookmark(b))\n    .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n}\n\nexport async function findByUserWithOptions(\n  userId: string,\n  options?: {\n    limit?: number;\n    offset?: number;\n    sortBy?: 'created' | 'position';\n    sortOrder?: 'asc' | 'desc';\n  }\n): Promise<Bookmark[]> {\n  let bookmarks = await findByUser(userId);\n\n  if (options?.sortBy === 'position') {\n    bookmarks = bookmarks.sort((a, b) => {\n      const positionCompare =\n        a.position.surahId - b.position.surahId || a.position.ayahNumber - b.position.ayahNumber;\n      return options.sortOrder === 'desc' ? -positionCompare : positionCompare;\n    });\n  } else {\n    bookmarks = bookmarks.sort((a, b) => {\n      const timeCompare = a.createdAt.getTime() - b.createdAt.getTime();\n      return options?.sortOrder === 'desc' ? -timeCompare : timeCompare;\n    });\n  }\n\n  const start = options?.offset || 0;\n  const end = options?.limit ? start + options.limit : undefined;\n  return bookmarks.slice(start, end);\n}\n\nexport async function findRecent(userId: string, limit = 10): Promise<Bookmark[]> {\n  return (await findByUser(userId)).slice(0, limit);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/tafsirApi.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[26,49],"text":"@/lib/api/client"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":67,"fix":{"range":[88,116],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":47,"fix":{"range":[143,163],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { apiFetch } from '../../../lib/api/client';\nimport { Tafsir, TafsirData } from '../../domain/entities/Tafsir';\nimport { logger } from '../monitoring/Logger';\n\ninterface ApiTafsirResource {\n  id: number;\n  slug: string;\n  name: string;\n  language_name: string;\n  author_name?: string;\n}\n\nfunction mapApiResponseToEntities(apiTafsirs: ApiTafsirResource[]): Tafsir[] {\n  return apiTafsirs.map((apiTafsir) => {\n    const tafsirData: TafsirData = {\n      id: apiTafsir.id,\n      name: apiTafsir.name,\n      lang: apiTafsir.language_name,\n      authorName: apiTafsir.author_name,\n      slug: apiTafsir.slug,\n    };\n    return new Tafsir(tafsirData);\n  });\n}\n\nexport async function fetchResourcesForLanguage(language?: string): Promise<Tafsir[]> {\n  const params: Record<string, string> = language\n    ? { language, per_page: '200', page: '1' }\n    : { per_page: '200', page: '1' };\n\n  try {\n    const data = await apiFetch<{ tafsirs: ApiTafsirResource[] }>(\n      'resources/tafsirs',\n      params,\n      'Failed to fetch tafsir resources'\n    );\n\n    if (data.tafsirs && data.tafsirs.length > 0) {\n      return mapApiResponseToEntities(data.tafsirs);\n    }\n  } catch (error) {\n    logger.warn('Primary API failed, trying CDN fallback', undefined, error as Error);\n  }\n\n  const url = 'https://api.qurancdn.com/api/qdc/resources/tafsirs';\n  const cdnParams: Record<string, string> = { per_page: '200', page: '1' };\n  if (language && language !== 'all') {\n    cdnParams.language = language;\n  }\n  const fallbackData = await apiFetch<{ tafsirs: ApiTafsirResource[] }>(\n    url,\n    cdnParams,\n    'Failed to fetch tafsir resources'\n  );\n  return mapApiResponseToEntities(fallbackData.tafsirs || []);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/tafsirCache.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":67,"fix":{"range":[114,142],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":47,"fix":{"range":[169,189],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { getItem, setItem, removeItem } from '@/lib/utils/safeLocalStorage';\n\nimport { Tafsir, TafsirData } from '../../domain/entities/Tafsir';\nimport { logger } from '../monitoring/Logger';\n\nconst CACHE_KEY = 'tafsir-resources';\nconst CACHE_TTL = 1000 * 60 * 60; // 1 hour\n\nexport async function cacheResources(tafsirs: Tafsir[]): Promise<void> {\n  try {\n    const cacheData = {\n      timestamp: Date.now(),\n      data: tafsirs.map((t) => t.toJSON()),\n    };\n    setItem(CACHE_KEY, JSON.stringify(cacheData));\n  } catch (error) {\n    logger.warn('Failed to cache tafsir resources', undefined, error as Error);\n  }\n}\n\nexport async function getCachedResources(): Promise<Tafsir[]> {\n  try {\n    const cached = getItem(CACHE_KEY);\n    if (!cached) return [];\n\n    const cacheData = JSON.parse(cached);\n    const now = Date.now();\n\n    if (now - cacheData.timestamp > CACHE_TTL) {\n      removeItem(CACHE_KEY);\n      return [];\n    }\n\n    return cacheData.data.map((data: TafsirData) => Tafsir.fromJSON(data));\n  } catch (error) {\n    logger.warn('Failed to get cached tafsir resources', undefined, error as Error);\n    removeItem(CACHE_KEY);\n    return [];\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/bulkSurahQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[28,54],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":50,"fix":{"range":[80,104],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":50,"fix":{"range":[131,154],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[194,208],"text":"@/src/infrastructure/repositories/verseMapper"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import * as apiVerses from '../../../../lib/api/verses';\nimport { Verse } from '../../../domain/entities';\nimport { logger } from '../../monitoring/Logger';\nimport { mapApiVerseToDomain } from '../verseMapper';\n\nexport const findBySurah = async (surahId: number, translationId: number): Promise<Verse[]> => {\n  try {\n    const response = await apiVerses.getVersesByChapter(surahId, translationId, 1, 300);\n    return response.verses.map((v) => mapApiVerseToDomain(v));\n  } catch (error) {\n    logger.error('Failed to find verses by surah:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const findBySurahRange = async (\n  surahId: number,\n  fromAyah: number,\n  toAyah: number,\n  translationId: number\n): Promise<Verse[]> => {\n  try {\n    const allVerses = await findBySurah(surahId, translationId);\n    return allVerses.filter((v) => v.ayahNumber >= fromAyah && v.ayahNumber <= toAyah);\n  } catch (error) {\n    logger.error('Failed to find verses by surah range:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const getCountBySurah = async (surahId: number, translationId: number): Promise<number> => {\n  try {\n    const verses = await findBySurah(surahId, translationId);\n    return verses.length;\n  } catch (error) {\n    logger.error('Failed to get count by surah:', undefined, error as Error);\n    return 0;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/verseSegmentQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[28,54],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":50,"fix":{"range":[80,104],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":50,"fix":{"range":[131,154],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[194,208],"text":"@/src/infrastructure/repositories/verseMapper"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import * as apiVerses from '../../../../lib/api/verses';\nimport { Verse } from '../../../domain/entities';\nimport { logger } from '../../monitoring/Logger';\nimport { mapApiVerseToDomain } from '../verseMapper';\n\nexport const findByJuz = async (juzNumber: number, translationId: number): Promise<Verse[]> => {\n  try {\n    const response = await apiVerses.getVersesByJuz(juzNumber, translationId, 1, 500);\n    return response.verses.map((v) => mapApiVerseToDomain(v));\n  } catch (error) {\n    logger.error('Failed to find verses by juz:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const findByPage = async (pageNumber: number, translationId: number): Promise<Verse[]> => {\n  try {\n    const response = await apiVerses.getVersesByPage(pageNumber, translationId, 1, 50);\n    return response.verses.map((v) => mapApiVerseToDomain(v));\n  } catch (error) {\n    logger.error('Failed to find verses by page:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const findByHizb = async (hizbNumber: number, translationId: number): Promise<Verse[]> => {\n  const juzNumber = Math.ceil(hizbNumber / 2);\n  const isSecondHalf = hizbNumber % 2 === 0;\n\n  const juzVerses = await findByJuz(juzNumber, translationId);\n  const mid = Math.floor(juzVerses.length / 2);\n\n  return isSecondHalf ? juzVerses.slice(mid) : juzVerses.slice(0, mid);\n};\n\nexport const findByRubAlHizb = async (\n  rubNumber: number,\n  translationId: number\n): Promise<Verse[]> => {\n  const hizbNumber = Math.ceil(rubNumber / 4);\n  const rubInHizb = ((rubNumber - 1) % 4) + 1;\n\n  const hizbVerses = await findByHizb(hizbNumber, translationId);\n  const segmentSize = Math.floor(hizbVerses.length / 4);\n  const startIndex = (rubInHizb - 1) * segmentSize;\n  const endIndex = rubInHizb === 4 ? hizbVerses.length : startIndex + segmentSize;\n\n  return hizbVerses.slice(startIndex, endIndex);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/verseSpecialQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[28,54],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":50,"fix":{"range":[80,104],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":50,"fix":{"range":[131,154],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":54,"fix":{"range":[194,208],"text":"@/src/infrastructure/repositories/verseMapper"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import * as apiVerses from '../../../../lib/api/verses';\nimport { Verse } from '../../../domain/entities';\nimport { logger } from '../../monitoring/Logger';\nimport { mapApiVerseToDomain } from '../verseMapper';\n\nexport const findSajdahVerses = async (translationId: number): Promise<Verse[]> => {\n  const sajdahPositions = [\n    { surah: 7, ayah: 206 },\n    { surah: 13, ayah: 15 },\n    { surah: 16, ayah: 50 },\n    { surah: 17, ayah: 109 },\n    { surah: 19, ayah: 58 },\n    { surah: 22, ayah: 18 },\n    { surah: 22, ayah: 77 },\n    { surah: 25, ayah: 60 },\n    { surah: 27, ayah: 26 },\n    { surah: 32, ayah: 15 },\n    { surah: 38, ayah: 24 },\n    { surah: 41, ayah: 38 },\n    { surah: 53, ayah: 62 },\n    { surah: 84, ayah: 21 },\n    { surah: 96, ayah: 19 },\n  ];\n\n  const verses: Verse[] = [];\n  for (const pos of sajdahPositions) {\n    const verse = await apiVerses.getVerseByKey(`${pos.surah}:${pos.ayah}`, translationId);\n    verses.push(mapApiVerseToDomain(verse));\n  }\n  return verses;\n};\n\nexport const findFirstVerses = async (translationId: number): Promise<Verse[]> => {\n  const verses: Verse[] = [];\n  for (let surahId = 1; surahId <= 114; surahId++) {\n    const verse = await apiVerses.getVerseByKey(`${surahId}:1`, translationId);\n    verses.push(mapApiVerseToDomain(verse));\n  }\n  return verses;\n};\n\nexport const findByVerseKeys = async (\n  verseKeys: string[],\n  translationId: number\n): Promise<Verse[]> => {\n  const verses: Verse[] = [];\n  for (const key of verseKeys) {\n    try {\n      const apiVerse = await apiVerses.getVerseByKey(key, translationId);\n      verses.push(mapApiVerseToDomain(apiVerse));\n    } catch (error) {\n      logger.error(`Failed to fetch verse ${key}:`, undefined, error as Error);\n    }\n  }\n  return verses;\n};\n\nexport const findRandom = async (\n  count = 1,\n  surahId: number | undefined,\n  translationId: number\n): Promise<Verse[]> => {\n  try {\n    if (surahId) {\n      // API does not support surah-scoped random yet; keep note for observability\n      logger.warn('Random verse by surah not supported; returning global random', { surahId });\n    }\n    const verses: Verse[] = [];\n    for (let i = 0; i < Math.max(1, count); i++) {\n      const randomVerse = await apiVerses.getRandomVerse(translationId);\n      verses.push(mapApiVerseToDomain(randomVerse));\n    }\n    return verses;\n  } catch (error) {\n    logger.error('Failed to find random verse:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const getTotalCount = async (): Promise<number> => 6236;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseBulkQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseMapper.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[35,49],"text":"@/types"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":47,"fix":{"range":[75,96],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":70,"fix":{"range":[128,166],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { Verse as ApiVerse } from '../../../types';\nimport { Verse } from '../../domain/entities';\nimport { Translation } from '../../domain/value-objects/Translation';\n\n/**\n * Maps API translation objects to domain Translation.\n */\nexport const mapApiTranslation = (\n  apiTranslation?: ApiVerse['translations'][0]\n): Translation | undefined => {\n  if (!apiTranslation) return undefined;\n  return new Translation(\n    apiTranslation.id || 0,\n    apiTranslation.resource_id,\n    apiTranslation.text,\n    'en'\n  );\n};\n\n/**\n * Maps API verse objects to domain verse entities.\n */\nexport const mapApiVerseToDomain = (apiVerse: ApiVerse): Verse => {\n  const translation = mapApiTranslation(apiVerse.translations?.[0]);\n\n  return new Verse(\n    apiVerse.verse_key,\n    parseInt(apiVerse.verse_key.split(':')[0]),\n    parseInt(apiVerse.verse_key.split(':')[1]),\n    apiVerse.text_uthmani || '',\n    apiVerse.text_uthmani || '',\n    translation\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseNavigation.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":54,"fix":{"range":[131,154],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":53,"fix":{"range":[180,207],"text":"@/src/domain/entities/Verse"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":47,"fix":{"range":[234,254],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { findBySurah } from './verseBulkQueries';\nimport { mapApiVerseToDomain } from './verseMapper';\nimport * as apiVerses from '../../../lib/api/verses';\nimport { Verse } from '../../domain/entities/Verse';\nimport { logger } from '../monitoring/Logger';\n\nexport const findNext = async (\n  currentVerseId: string,\n  translationId: number\n): Promise<Verse | null> => {\n  try {\n    const current = await apiVerses.getVerseById(currentVerseId, translationId);\n    const [surahIdStr, ayahStr] = current.verse_key.split(':');\n    const surahId = parseInt(surahIdStr);\n    const ayahNumber = parseInt(ayahStr);\n\n    try {\n      const next = await apiVerses.getVerseByKey(`${surahId}:${ayahNumber + 1}`, translationId);\n      return mapApiVerseToDomain(next);\n    } catch {\n      if (surahId < 114) {\n        const first = await apiVerses.getVerseByKey(`${surahId + 1}:1`, translationId);\n        return mapApiVerseToDomain(first);\n      }\n      return null;\n    }\n  } catch (error) {\n    logger.error('Failed to find next verse:', undefined, error as Error);\n    return null;\n  }\n};\n\nexport const findPrevious = async (\n  currentVerseId: string,\n  translationId: number\n): Promise<Verse | null> => {\n  try {\n    const current = await apiVerses.getVerseById(currentVerseId, translationId);\n    const [surahIdStr, ayahStr] = current.verse_key.split(':');\n    const surahId = parseInt(surahIdStr);\n    const ayahNumber = parseInt(ayahStr);\n\n    if (ayahNumber > 1) {\n      const prev = await apiVerses.getVerseByKey(`${surahId}:${ayahNumber - 1}`, translationId);\n      return mapApiVerseToDomain(prev);\n    }\n\n    if (surahId > 1) {\n      const prevSurah = await findBySurah(surahId - 1, translationId);\n      return prevSurah[prevSurah.length - 1] || null;\n    }\n\n    return null;\n  } catch (error) {\n    logger.error('Failed to find previous verse:', undefined, error as Error);\n    return null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseSingleQueries.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":54,"fix":{"range":[81,104],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":54,"fix":{"range":[135,158],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":47,"fix":{"range":[184,205],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":47,"fix":{"range":[232,252],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { mapApiVerseToDomain } from './verseMapper';\nimport * as apiVerses from '../../../lib/api/verses';\nimport * as apiSearch from '../../../lib/api/verses';\nimport { Verse } from '../../domain/entities';\nimport { logger } from '../monitoring/Logger';\n\nexport const findById = async (id: string, translationId: number): Promise<Verse | null> => {\n  try {\n    const apiVerse = await apiVerses.getVerseById(id, translationId);\n    return mapApiVerseToDomain(apiVerse);\n  } catch (error) {\n    logger.error('Failed to find verse by ID:', undefined, error as Error);\n    return null;\n  }\n};\n\nexport const findBySurahAndAyah = async (\n  surahId: number,\n  ayahNumber: number,\n  translationId: number\n): Promise<Verse | null> => {\n  try {\n    const verseKey = `${surahId}:${ayahNumber}`;\n    const apiVerse = await apiVerses.getVerseByKey(verseKey, translationId);\n    return mapApiVerseToDomain(apiVerse);\n  } catch (error) {\n    logger.error('Failed to find verse by surah and ayah:', undefined, error as Error);\n    return null;\n  }\n};\n\nexport const search = async (\n  query: string,\n  options:\n    | {\n        searchIn?: 'arabic' | 'translation' | 'both';\n        translationId?: number;\n        surahId?: number;\n        limit?: number;\n      }\n    | undefined,\n  translationId: number\n): Promise<Verse[]> => {\n  try {\n    const apiResults = await apiSearch.searchVerses(query);\n    let results = apiResults.map((v) => mapApiVerseToDomain(v));\n    // Apply minimal client-side filtering to reduce noise and use parameters\n    if (options?.surahId) {\n      results = results.filter((v) => v.surahId === options.surahId);\n    }\n    if (options?.limit && options.limit > 0) {\n      results = results.slice(0, options.limit);\n    }\n    if (options?.translationId && options.translationId !== translationId) {\n      logger.warn('Search translationId ignored by API; results may not match requested id', {\n        requested: options.translationId,\n        used: translationId,\n      });\n    }\n    return results;\n  } catch (error) {\n    logger.error('Failed to search verses:', undefined, error as Error);\n    return [];\n  }\n};\n\nexport const findWithTranslation = async (\n  verseId: string,\n  translationId: number\n): Promise<Verse | null> => {\n  try {\n    const apiVerse = await apiVerses.getVerseById(verseId, translationId);\n    return mapApiVerseToDomain(apiVerse);\n  } catch (error) {\n    logger.error('Failed to find verse with translation:', undefined, error as Error);\n    return null;\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsir.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":92,"fix":{"range":[177,223],"text":"@/src/application/use-cases/GetTafsirResources"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":55,"fix":{"range":[250,278],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":63,"fix":{"range":[308,341],"text":"@/src/infrastructure/di/Container"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (79). Maximum allowed is 50.","line":28,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":124,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { useState, useEffect, useMemo, useCallback } from 'react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport { GetTafsirResourcesUseCase } from '../../application/use-cases/GetTafsirResources';\nimport { Tafsir } from '../../domain/entities/Tafsir';\nimport { container } from '../../infrastructure/di/Container';\n\ninterface UseTafsirResult {\n  tafsirs: Tafsir[];\n  loading: boolean;\n  error: string | null;\n  isFromCache: boolean;\n  searchTafsirs: (searchTerm: string) => Promise<Tafsir[]>;\n  getTafsirById: (id: number) => Promise<Tafsir | null>;\n  getTafsirContent: (verseKey: string, tafsirId: number) => Promise<string>;\n  refresh: () => Promise<void>;\n}\n\n/**\n * Clean Architecture hook for Tafsir operations\n *\n * This hook follows the clean architecture pattern:\n * - Uses dependency injection to get repository\n * - Delegates business logic to use cases\n * - Only handles UI state and presentation concerns\n */\nexport const useTafsir = (): UseTafsirResult => {\n  const [tafsirs, setTafsirs] = useState<Tafsir[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isFromCache, setIsFromCache] = useState(false);\n\n  // Get use case instance through DI container\n  const useCase = useMemo(() => {\n    const repository = container.getTafsirRepository();\n    return new GetTafsirResourcesUseCase(repository);\n  }, []);\n\n  // Load tafsir resources\n  const loadTafsirs = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await useCase.execute();\n\n      setTafsirs(result.tafsirs);\n      setIsFromCache(result.isFromCache);\n\n      if (result.error) {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError('Failed to load tafsir resources. Please try again.');\n      logger.error('Error loading tafsirs', undefined, err as Error);\n    } finally {\n      setLoading(false);\n    }\n  }, [useCase]);\n\n  // Search tafsirs\n  const searchTafsirs = useCallback(\n    async (searchTerm: string): Promise<Tafsir[]> => {\n      try {\n        return await useCase.search(searchTerm);\n      } catch (err) {\n        logger.error('Error searching tafsirs', undefined, err as Error);\n        return [];\n      }\n    },\n    [useCase]\n  );\n\n  // Get tafsir by ID\n  const getTafsirById = useCallback(\n    async (id: number): Promise<Tafsir | null> => {\n      try {\n        return await useCase.getById(id);\n      } catch (err) {\n        logger.error('Error getting tafsir by ID', undefined, err as Error);\n        return null;\n      }\n    },\n    [useCase]\n  );\n\n  // Get tafsir content for verse\n  const getTafsirContent = useCallback(\n    async (verseKey: string, tafsirId: number): Promise<string> => {\n      try {\n        return await useCase.getTafsirContent(verseKey, tafsirId);\n      } catch (err) {\n        logger.error('Error getting tafsir content', undefined, err as Error);\n        throw err;\n      }\n    },\n    [useCase]\n  );\n\n  // Refresh data\n  const refresh = useCallback(async () => {\n    await loadTafsirs();\n  }, [loadTafsirs]);\n\n  // Load tafsirs on mount\n  useEffect(() => {\n    loadTafsirs();\n  }, [loadTafsirs]);\n\n  return useMemo(\n    () => ({\n      tafsirs,\n      loading,\n      error,\n      isFromCache,\n      searchTafsirs,\n      getTafsirById,\n      getTafsirContent,\n      refresh,\n    }),\n    [tafsirs, loading, error, isFromCache, searchTafsirs, getTafsirById, getTafsirContent, refresh]\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirPanel.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":9,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":73,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\n\nimport { useTafsir } from './useTafsir';\nimport { useTafsirSelection } from './useTafsirSelection';\nimport { useTafsirTabsScroll } from './useTafsirTabsScroll';\n\nexport const useTafsirPanel = (isOpen: boolean) => {\n  const { theme } = useTheme();\n\n  const { tafsirs: domainTafsirs, loading: apiLoading, error: apiError, isFromCache } = useTafsir();\n\n  const {\n    tafsirs,\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n  } = useTafsirSelection(domainTafsirs);\n\n  const { tabsContainerRef, canScrollLeft, canScrollRight, scrollTabsLeft, scrollTabsRight } =\n    useTafsirTabsScroll(languages);\n\n  const loading = isOpen && apiLoading;\n  const error = apiError;\n\n  return {\n    theme,\n    tafsirs,\n    loading,\n    error,\n    isFromCache,\n\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n\n    handleReset,\n\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirSelection.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":55,"fix":{"range":[290,318],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (89). Maximum allowed is 50.","line":13,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":113,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":63},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"'use client';\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { useSelectableResources } from '@/lib/hooks/useSelectableResources';\nimport { TafsirResource } from '@/types';\n\nimport { Tafsir } from '../../domain/entities/Tafsir';\n\nconst MAX_SELECTIONS = 3;\n\nexport const useTafsirSelection = (domainTafsirs: Tafsir[]) => {\n  const { settings, setTafsirIds } = useSettings();\n  const [showLimitWarning, setShowLimitWarning] = useState(false);\n\n  const tafsirs = useMemo<TafsirResource[]>(() => {\n    return domainTafsirs.map((t) => ({\n      id: t.id,\n      name: t.displayName,\n      lang: t.formattedLanguage,\n    }));\n  }, [domainTafsirs]);\n\n  const languageSort = useCallback(\n    (a: string, b: string) => {\n      const getDomainTafsir = (lang: string) =>\n        domainTafsirs.find((t) => t.formattedLanguage === lang);\n\n      const tafsirA = getDomainTafsir(a);\n      const tafsirB = getDomainTafsir(b);\n\n      if (!tafsirA || !tafsirB) return a.localeCompare(b);\n\n      const priorityA = tafsirA.getLanguagePriority();\n      const priorityB = tafsirB.getLanguagePriority();\n\n      if (priorityA !== priorityB) return priorityA - priorityB;\n      return a.localeCompare(b);\n    },\n    [domainTafsirs]\n  );\n\n  const {\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedResources,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle: baseHandleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    setSelections,\n  } = useSelectableResources<TafsirResource>({\n    resources: tafsirs,\n    selectionLimit: MAX_SELECTIONS,\n    initialSelectedIds: settings.tafsirIds || [],\n    languageSort,\n  });\n\n  const groupedTafsirs = groupedResources;\n\n  const handleSelectionToggle = useCallback(\n    (id: number): boolean => {\n      const changed = baseHandleSelectionToggle(id);\n      if (!changed) {\n        setShowLimitWarning(true);\n        return false;\n      }\n      setShowLimitWarning(false);\n      return true;\n    },\n    [baseHandleSelectionToggle]\n  );\n\n  const handleReset = useCallback(() => {\n    const englishTafsir = tafsirs.find((t) => t.lang.toLowerCase() === 'english');\n    if (englishTafsir) {\n      setSelections([englishTafsir.id]);\n      setShowLimitWarning(false);\n    }\n  }, [tafsirs, setSelections]);\n\n  useEffect(() => {\n    setTafsirIds([...orderedSelection]);\n  }, [orderedSelection, setTafsirIds]);\n\n  return {\n    tafsirs,\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirTabsScroll.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nexport const useTafsirTabsScroll = (languages: string[]) => {\n  const tabsContainerRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(false);\n\n  const checkScrollState = useCallback(() => {\n    if (tabsContainerRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = tabsContainerRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth - 1);\n    }\n  }, []);\n\n  const scrollTabsLeft = useCallback(() => {\n    if (tabsContainerRef.current) {\n      tabsContainerRef.current.scrollBy({ left: -200, behavior: 'smooth' });\n    }\n  }, []);\n\n  const scrollTabsRight = useCallback(() => {\n    if (tabsContainerRef.current) {\n      tabsContainerRef.current.scrollBy({ left: 200, behavior: 'smooth' });\n    }\n  }, []);\n\n  useEffect(() => {\n    checkScrollState();\n    if (tabsContainerRef.current) {\n      const container = tabsContainerRef.current;\n      container.addEventListener('scroll', checkScrollState);\n      window.addEventListener('resize', checkScrollState);\n      return () => {\n        container.removeEventListener('scroll', checkScrollState);\n        window.removeEventListener('resize', checkScrollState);\n      };\n    }\n  }, [languages, checkScrollState]);\n\n  return {\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tailwind.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ARCHITECTURE_COMPLIANT_TEST.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":56,"fix":{"range":[447,466],"text":"@/ExampleComponent"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":21,"column":1,"nodeType":"ImportDeclaration","endLine":21,"endColumn":58,"fix":{"range":[677,700],"text":"@/hooks/useExampleData"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is defined but never used.","line":50,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"/**\n * @fileoverview Architecture-Compliant Test Template for Week 6\n * @description Complete test template following established architecture patterns\n * @template Replace: ExampleComponent, useExampleData, example\n * @location app/(features)/[feature]/__tests__/\n *\n * Required imports for architecture-compliant testing:\n */\n\nimport { createPerformanceTestSuite } from '@/app/testUtils/performanceTestUtils';\n\nimport { ExampleComponent } from '../ExampleComponent';\nimport {\n  clearTestEnvironment,\n  resetTestEnvironment,\n  runComponentTests,\n  runHookTests,\n  runIntegrationTest,\n  setupTestEnvironment,\n} from './architecture/test-utils';\nimport { useExampleData } from '../hooks/useExampleData';\n\n/**\n * Mock data following domain patterns\n */\nconst mockExampleData = {\n  id: '1',\n  verse_key: '1:1',\n  title: 'Test Title',\n  description: 'Test description',\n  content: 'Test content',\n  translations: [\n    { id: 131, text: 'Test translation', language: 'en' },\n  ],\n  words: [\n    { id: 1, text: 'Test', position: 1 },\n  ],\n};\n\n/**\n * Mock external dependencies\n */\njest.mock('@/lib/api/client', () => ({\n  fetchExampleData: jest.fn(),\n  fetchExampleTranslations: jest.fn(),\n}));\n\njest.mock('@/lib/utils/cn', () => ({\n  transformData: jest.fn((data) => data),\n  applySettings: jest.fn((text, settings) => text),\n}));\n\njest.mock('@/lib/text/sanitizeHtml', () => ({\n  sanitizeHtml: jest.fn((html) => html),\n}));\n\n// Mock i18n for consistent testing\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({\n    t: (key: string, options?: Record<string, unknown>) => options?.defaultValue || key,\n  }),\n}));\n\n// Setup responsive testing environment\nbeforeAll(setupTestEnvironment);\n\nconst defaultProps = {\n  id: '1',\n  data: mockExampleData,\n  onAction: jest.fn(),\n  className: '',\n};\n\ndescribe('ExampleComponent - Architecture Compliance', () => {\n  beforeEach(resetTestEnvironment);\n  afterEach(clearTestEnvironment);\n\n  runComponentTests({\n    Component: ExampleComponent,\n    defaultProps,\n    mockData: mockExampleData,\n  });\n});\n\ndescribe('useExampleData Hook - Architecture Compliance', () => {\n  const mockFetch = global.fetch as jest.Mock;\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({\n        data: [mockExampleData],\n        hasNextPage: false,\n      }),\n    });\n  });\n\n  runHookTests({\n    useHook: useExampleData,\n    mockData: mockExampleData,\n  });\n});\n\n// Generate performance test suite\ncreatePerformanceTestSuite('ExampleComponent', ExampleComponent, defaultProps);\nrunIntegrationTest({\n  Component: ExampleComponent,\n  defaultProps,\n  mockData: mockExampleData,\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/component/index.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":74,"fix":{"range":[282,300],"text":"@/templates/ai-compliant/shared/contexts"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ComponentName' has too many lines (92). Maximum allowed is 50.","line":19,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":124,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'localState' is assigned a value but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setLocalState' is assigned a value but never used.","line":25,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":57,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * MANDATORY Architecture-Compliant Component Template\n *\n * Usage: Copy this template and replace ComponentName with your component name.\n */\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useBookmarks, useSettings, useAudio } from '../shared/contexts';\n\nimport type { ComponentData, ComponentAction } from '@/types';\n\ninterface ComponentNameProps {\n  id: string;\n  data: ComponentData;\n  onAction?: ComponentAction;\n  className?: string;\n}\n\nexport const ComponentName = memo(function ComponentName({\n  id,\n  data,\n  onAction,\n  className,\n}: ComponentNameProps) {\n  const [localState, setLocalState] = useState('');\n\n  const { settings } = useSettings();\n  const { currentTrack, isPlaying } = useAudio();\n  const { bookmarkedVerses, toggleBookmark } = useBookmarks();\n\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const processedData = useMemo(\n    () => transformData(data, settings),\n    [data, settings],\n  );\n\n  const isCurrentlyPlaying = useMemo(\n    () => currentTrack === id && isPlaying,\n    [currentTrack, id, isPlaying],\n  );\n\n  const handleAction = useCallback(\n    (actionType: string) => onAction?.(id, actionType),\n    [id, onAction],\n  );\n\n  const handleClick = useCallback(() => {\n    handleAction('click');\n  }, [handleAction]);\n\n  const handleToggleBookmark = useCallback(() => {\n    toggleBookmark(id);\n  }, [id, toggleBookmark]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (\n        event.key === 'Enter' &&\n        componentRef.current?.contains(document.activeElement)\n      ) {\n        handleClick();\n      }\n    };\n\n    document.addEventListener('keypress', handleKeyPress);\n    return () => document.removeEventListener('keypress', handleKeyPress);\n  }, [handleClick]);\n\n  return (\n    <div\n      ref={componentRef}\n      className={`space-y-4 p-4 md:space-y-6 md:p-6 ${className || ''}`.trim()}\n      data-testid={`component-${id}`}\n    >\n      <div className=\"space-y-4 md:space-y-0 md:flex md:items-center md:gap-6\">\n        <div className=\"flex justify-between md:w-16 md:flex-col md:pt-1\">\n          <button\n            className=\"h-11 px-4 bg-accent text-accent-foreground rounded-md\"\n            onClick={handleClick}\n            aria-label={`Action for ${data.name || id}`}\n          >\n            Action\n          </button>\n\n          <button\n            className=\"h-11 px-4 bg-secondary text-secondary-foreground rounded-md\"\n            onClick={handleToggleBookmark}\n            aria-label={`Toggle bookmark for ${data.name || id}`}\n          >\n            {bookmarkedVerses.has(id) ? '★' : '☆'}\n          </button>\n        </div>\n\n        <div className=\"space-y-4 md:flex-grow\">\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              {data.title}\n            </h3>\n            {data.subtitle && (\n              <p className=\"text-sm text-muted-foreground\">{data.subtitle}</p>\n            )}\n          </div>\n\n          {processedData.items.map((item) => (\n            <div\n              key={item.id}\n              className=\"min-h-11 p-3 bg-card text-card-foreground rounded-md border border-border\"\n            >\n              {item.content}\n            </div>\n          ))}\n\n          {isCurrentlyPlaying && (\n            <div className=\"flex items-center space-x-2 text-accent\">\n              <div className=\"h-4 w-4 bg-accent rounded-full animate-pulse\" />\n              <span className=\"text-sm font-medium\">Playing</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport { ComponentName };\nexport default ComponentName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/hook/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { HookData, HookOptions } from '@/types';\n\nexport function getCachedData(key: string): HookData | null {\n  try {\n    const cached = localStorage.getItem(key);\n    return cached ? (JSON.parse(cached) as HookData) : null;\n  } catch {\n    return null;\n  }\n}\n\nexport function setCachedData(key: string, data: HookData): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch {\n    // Ignore storage errors\n  }\n}\n\nexport function clearCachedData(key: string): void {\n  try {\n    localStorage.removeItem(key);\n  } catch {\n    // Ignore storage errors\n  }\n}\n\nexport function transformHookData(\n  data: HookData,\n  settings: Record<string, unknown>,\n): HookData {\n  return data;\n}\n\nexport function apiCall(\n  id: string,\n  options: HookOptions | undefined,\n  config: { signal: AbortSignal },\n): Promise<HookData> {\n  return fetch(`/api/data/${id}`,\n    { signal: config.signal, ...options?.fetchOptions }).then((res) => res.json());\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/hook/index.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":50,"fix":{"range":[354,372],"text":"@/templates/ai-compliant/shared/contexts"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useHookName' has too many lines (98). Maximum allowed is 50.","line":25,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":142,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":56,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":90,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/**\n * MANDATORY Architecture-Compliant Hook Template\n *\n * Usage: Copy this template and replace useHookName with your hook name.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n  apiCall,\n  clearCachedData,\n  getCachedData,\n  setCachedData,\n  transformHookData,\n} from './helpers';\nimport { useSettings } from '../shared/contexts';\n\nimport type { HookData, HookOptions, HookResult } from '@/types';\n\ninterface UseHookNameParams {\n  id: string;\n  options?: HookOptions;\n  initialData?: HookData;\n}\n\nexport function useHookName({\n  id,\n  options,\n  initialData,\n}: UseHookNameParams): HookResult {\n  const [data, setData] = useState<HookData | null>(initialData || null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(!initialData);\n\n  const { settings } = useSettings();\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const retryCountRef = useRef(0);\n  const maxRetries = options?.maxRetries ?? 3;\n\n  const processedData = useMemo(\n    () => (data ? transformHookData(data, settings) : null),\n    [data, settings],\n  );\n\n  const isRetryable = useMemo(\n    () => !!error && retryCountRef.current < maxRetries,\n    [error, maxRetries],\n  );\n\n  const cacheKey = useMemo(\n    () => (options?.cache ? `hook-${id}-${JSON.stringify(options)}` : null),\n    [id, options],\n  );\n\n  const fetchData = useCallback(\n    async (retryCount = 0) => {\n      if (!id) return;\n\n      setIsLoading(true);\n      setError(null);\n      retryCountRef.current = retryCount;\n\n      try {\n        abortControllerRef.current?.abort();\n        abortControllerRef.current = new AbortController();\n\n        if (cacheKey && retryCount === 0) {\n          const cached = getCachedData(cacheKey);\n          if (cached && !options?.forceRefresh) {\n            setData(cached);\n            setIsLoading(false);\n            return;\n          }\n        }\n\n        const result = await apiCall(id, options, {\n          signal: abortControllerRef.current.signal,\n        });\n\n        setData(result);\n\n        if (cacheKey) setCachedData(cacheKey, result);\n      } catch (err) {\n        if (err.name !== 'AbortError') {\n          setError(err instanceof Error ? err.message : 'Unknown error');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [id, options, cacheKey],\n  );\n\n  const refetch = useCallback(() => {\n    retryCountRef.current = 0;\n    fetchData(0);\n  }, [fetchData]);\n\n  const retry = useCallback(() => {\n    if (isRetryable) fetchData(retryCountRef.current + 1);\n  }, [fetchData, isRetryable]);\n\n  const reset = useCallback(() => {\n    setData(initialData || null);\n    setError(null);\n    setIsLoading(false);\n    retryCountRef.current = 0;\n    if (cacheKey) clearCachedData(cacheKey);\n  }, [initialData, cacheKey]);\n\n  const updateData = useCallback(\n    (updater: (prev: HookData | null) => HookData | null) => {\n      setData(updater);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    fetchData(0);\n  }, [fetchData]);\n\n  useEffect(() => () => abortControllerRef.current?.abort(), []);\n\n  useEffect(() => {\n    if (data && settings && options?.refreshOnSettingsChange) {\n      refetch();\n    }\n  }, [settings, data, options?.refreshOnSettingsChange, refetch]);\n\n  return {\n    data: processedData,\n    rawData: data,\n    isLoading,\n    error,\n    isRetryable,\n    retryCount: retryCountRef.current,\n    refetch,\n    retry,\n    reset,\n    updateData,\n  } as const;\n}\n\nexport { useHookName };\nexport default useHookName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/page/index.tsx","messages":[],"suppressedMessages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PageActions' is not defined.","line":48,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":48,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PageSidebar' is not defined.","line":58,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":58,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/page/skeletons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/shared/contexts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/shared/test-wrapper.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AudioProvider, BookmarkProvider, SettingsProvider } from './contexts';\n\nimport type { ReactNode } from 'react';\n\n\nexport const TestWrapper = ({ children }: { children: ReactNode }) => (\n  <SettingsProvider>\n    <AudioProvider>\n      <BookmarkProvider>{children}</BookmarkProvider>\n    </AudioProvider>\n  </SettingsProvider>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/test/index.test.tsx","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":50,"fix":{"range":[376,392],"text":"@/templates/ai-compliant/ComponentName"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":54,"fix":{"range":[424,446],"text":"@/templates/ai-compliant/shared/test-wrapper"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":60,"fix":{"range":[491,507],"text":"@/templates/ai-compliant/ComponentName"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (52). Maximum allowed is 50.","line":37,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":99,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"/**\n * MANDATORY Architecture-Compliant Test Template\n *\n * Usage: Copy this template and replace ComponentName with your component name.\n */\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { validateResponsiveDesign } from '@/app/testUtils/responsiveTestUtils';\n\nimport { ComponentName } from '../ComponentName';\nimport { TestWrapper } from '../shared/test-wrapper';\n\nimport type { ComponentNameProps } from '../ComponentName';\n\n\njest.mock('@/lib/api/client', () => ({\n  fetchData: jest.fn(),\n}));\n\nconst mockData = {\n  id: 'test-id',\n  title: 'Test Component',\n  subtitle: 'Test subtitle',\n  items: [\n    { id: 'item-1', content: 'Test item 1' },\n    { id: 'item-2', content: 'Test item 2' },\n  ],\n};\n\nconst defaultProps: ComponentNameProps = {\n  id: 'test-component',\n  data: mockData,\n  onAction: jest.fn(),\n};\n\ndescribe('ComponentName', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders and memoizes', () => {\n    const { rerender } = render(<ComponentName {...defaultProps} />, {\n      wrapper: TestWrapper,\n    });\n\n    const component = screen.getByTestId('component-test-component');\n    expect(component).toBeInTheDocument();\n\n    const renderCount = jest.fn();\n    const MemoTest = () => {\n      renderCount();\n      return <ComponentName {...defaultProps} />;\n    };\n\n    rerender(<MemoTest />);\n    rerender(<MemoTest />);\n    expect(renderCount).toHaveBeenCalledTimes(1);\n  });\n\n  it('respects responsive design', () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n    const container = screen.getByTestId('component-test-component');\n\n    validateResponsiveDesign(container, {\n      mobileClasses: ['space-y-4', 'p-4'],\n      desktopClasses: ['md:space-y-6', 'md:p-6'],\n    });\n  });\n\n  it('integrates with providers', () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n    expect(screen.getByTestId('component-test-component')).toBeInTheDocument();\n  });\n\n  it('supports keyboard activation', () => {\n    const mockOnAction = jest.fn();\n    render(\n      <ComponentName {...defaultProps} onAction={mockOnAction} />,\n      { wrapper: TestWrapper },\n    );\n\n    const component = screen.getByTestId('component-test-component');\n    component.focus();\n    fireEvent.keyPress(component, { key: 'Enter', code: 'Enter' });\n    expect(mockOnAction).toHaveBeenCalledWith('test-component', 'click');\n  });\n\n  it('is accessible', async () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n\n    const user = userEvent.setup();\n    const buttons = screen.getAllByRole('button');\n    for (const button of buttons) {\n      await user.tab();\n      expect(button).toHaveClass('focus:outline-none');\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/components.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/hooks.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":61},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":52,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":71,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { waitFor, act } from '@testing-library/react';\n\nimport { renderHookWithProviders } from '@/app/testUtils/contextTestUtils';\n\ninterface HookResult<TData> {\n  data: TData[];\n  isLoading: boolean;\n  refetch: () => Promise<void>;\n}\n\ninterface HookSectionParams<TProps, TData> {\n  useHook: (props: TProps) => HookResult<TData>;\n  mockData: TData;\n}\n\nexport function hookContextIntegrationSection<TProps, TData>({\n  useHook,\n  mockData\n}: HookSectionParams<TProps, TData>) {\n  describe('🔄 Context Integration', () => {\n    it('provides data from context', async () => {\n      const { result } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.data).toEqual([mockData]);\n      });\n    });\n  });\n}\n\nexport function hookPerformanceSection<TProps, TData>({\n  useHook\n}: HookSectionParams<TProps, TData>) {\n  describe('⚡ Performance', () => {\n    it('returns stable references', async () => {\n      const { result, rerender } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n      const first = result.current.refetch;\n      rerender();\n      expect(result.current.refetch).toBe(first);\n    });\n  });\n}\n\nexport function hookCleanupSection<TProps, TData>({\n  useHook\n}: HookSectionParams<TProps, TData>) {\n  describe('🧹 Cleanup', () => {\n    it('cancels requests on unmount', () => {\n      const mockAbort = jest.fn();\n      (globalThis as { AbortController: jest.Mock }).AbortController = jest\n        .fn()\n        .mockImplementation(() => ({ abort: mockAbort, signal: {} }));\n      const { unmount } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      unmount();\n      expect(mockAbort).toHaveBeenCalled();\n    });\n  });\n}\n\nexport function hookDataFetchingSection<TProps, TData>({\n  useHook,\n  mockData\n}: HookSectionParams<TProps, TData>) {\n  describe('🔄 Data Fetching', () => {\n    it('supports refetching', async () => {\n      const { result } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.data).toBeTruthy();\n      });\n      await act(async () => {\n        await result.current.refetch();\n      });\n      expect(result.current.data).toBeTruthy();\n      expect(result.current.data).toEqual([mockData]);\n    });\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/routing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/test-sections/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/accessibility.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/component-architecture.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/context-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/integration.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/performance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/responsive-design.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/utils.ts","messages":[{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (4). Maximum allowed is 3.","line":27,"column":9,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":33,"endColumn":10},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (5). Maximum allowed is 3.","line":29,"column":11,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":32,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Page, expect } from '@playwright/test';\n\n/**\n * Test mobile-first responsive design for a selector across breakpoints.\n */\nexport async function testResponsiveDesign(page: Page, elementSelector: string): Promise<void> {\n  const breakpoints = [\n    { name: 'Mobile', width: 375, height: 812 },\n    { name: 'Tablet', width: 768, height: 1024 },\n    { name: 'Desktop', width: 1024, height: 768 },\n    { name: 'Large Desktop', width: 1280, height: 1024 },\n  ];\n\n  for (const breakpoint of breakpoints) {\n    await page.setViewportSize({ width: breakpoint.width, height: breakpoint.height });\n\n    const element = page.locator(elementSelector);\n    await expect(element).toBeVisible();\n\n    // Test touch-friendly interactions on mobile\n    if (breakpoint.width <= 768) {\n      const touchElements = page.locator('[role=\"button\"], button');\n      const count = await touchElements.count();\n\n      for (let i = 0; i < Math.min(count, 3); i++) {\n        const touchEl = touchElements.nth(i);\n        if (await touchEl.isVisible()) {\n          const box = await touchEl.boundingBox();\n          if (box) {\n            // WCAG 2.1 AA: minimum 44px touch target\n            expect(Math.min(box.width, box.height)).toBeGreaterThanOrEqual(44);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Test context integration flows like settings, audio and bookmarks.\n */\nexport async function testContextIntegration(page: Page): Promise<void> {\n  // Test Settings context - font size changes\n  const settingsButton = page.locator('[data-testid=\"settings-button\"]');\n  if (await settingsButton.isVisible()) {\n    await settingsButton.click();\n\n    const fontSizeSlider = page.locator('[data-testid=\"font-size-slider\"]');\n    if (await fontSizeSlider.isVisible()) {\n      await fontSizeSlider.fill('20');\n\n      // Verify font size change is applied\n      const verseText = page.locator('[data-testid=\"verse-text\"]').first();\n      const fontSize = await verseText.evaluate((el) => window.getComputedStyle(el).fontSize);\n      expect(parseInt(fontSize)).toBeGreaterThanOrEqual(20);\n    }\n  }\n\n  // Test Audio context - playback controls\n  const playButton = page.locator('[data-testid=\"play-button\"]').first();\n  if (await playButton.isVisible()) {\n    await playButton.click();\n\n    // Verify audio player appears\n    await expect(page.locator('[data-testid=\"audio-player\"]')).toBeVisible();\n\n    // Verify play state\n    await expect(page.locator('[data-testid=\"pause-button\"]')).toBeVisible();\n  }\n\n  // Test Bookmark context - bookmark functionality\n  const bookmarkButton = page.locator('[data-testid=\"bookmark-button\"]').first();\n  if (await bookmarkButton.isVisible()) {\n    await bookmarkButton.click();\n\n    // Verify bookmark is active\n    await expect(bookmarkButton).toHaveClass(/active|bookmarked/);\n  }\n}\n\n/**\n * Test performance optimizations like memoization and virtual scrolling.\n */\nexport async function testPerformanceOptimizations(page: Page): Promise<void> {\n  // Test memo() effectiveness by checking for unnecessary re-renders\n  const startTime = Date.now();\n\n  // Navigate to different pages quickly\n  await page.goto('/surah/1');\n  await page.goto('/surah/2');\n  await page.goto('/surah/1');\n\n  const endTime = Date.now();\n  const navigationTime = endTime - startTime;\n\n  // Navigation should be fast due to memoization\n  expect(navigationTime).toBeLessThan(3000);\n\n  // Test virtual scrolling performance\n  const longSurah = page.locator('[data-testid=\"verse-card\"]');\n  const initialCount = await longSurah.count();\n\n  // Scroll down\n  await page.evaluate(() => window.scrollBy(0, 2000));\n  await page.waitForTimeout(100);\n\n  const afterScrollCount = await longSurah.count();\n\n  // More verses should be loaded, but not all at once (virtual scrolling)\n  expect(afterScrollCount).toBeGreaterThan(initialCount);\n  expect(afterScrollCount).toBeLessThan(100); // Reasonable limit\n}\n\n/**\n * Basic accessibility checks including keyboard nav and ARIA attributes.\n */\nexport async function testAccessibility(page: Page): Promise<void> {\n  // Test keyboard navigation\n  await page.keyboard.press('Tab');\n  const focusedElement = await page.evaluate(() =>\n    document.activeElement?.getAttribute('data-testid')\n  );\n  expect(focusedElement).toBeTruthy();\n\n  // Test ARIA attributes\n  const buttons = page.locator('[role=\"button\"], button');\n  const buttonCount = await buttons.count();\n\n  for (let i = 0; i < Math.min(buttonCount, 5); i++) {\n    const button = buttons.nth(i);\n    if (await button.isVisible()) {\n      const ariaLabel = await button.getAttribute('aria-label');\n      const text = await button.textContent();\n\n      // Button should have accessible text or aria-label\n      expect(ariaLabel || text?.trim()).toBeTruthy();\n    }\n  }\n\n  // Test contrast ratios (basic check)\n  const textElements = page.locator('p, span, h1, h2, h3, h4, h5, h6');\n  const textCount = await textElements.count();\n\n  for (let i = 0; i < Math.min(textCount, 3); i++) {\n    const textEl = textElements.nth(i);\n    if (await textEl.isVisible()) {\n      const styles = await textEl.evaluate((el) => {\n        const computed = window.getComputedStyle(el);\n        return {\n          color: computed.color,\n          backgroundColor: computed.backgroundColor,\n        };\n      });\n\n      // Basic check - elements should have color values\n      expect(styles.color).toBeTruthy();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/accessibility.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/audio.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/bookmarking.spec.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":3,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":62,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createMockPage, MockPage } from './utils';\n\ndescribe('Bookmarking Functionality', () => {\n  let page: MockPage;\n\n  beforeEach(() => {\n    page = createMockPage();\n  });\n\n  it('should bookmark a verse', async () => {\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n\n    const bookmarkItem = await page.locator('[data-testid=\"bookmark-item-1-1\"]').isVisible();\n    expect(bookmarkItem).toBe(true);\n\n    const bookmarkText = await page\n      .locator('[data-testid=\"bookmark-item-1-1\"] .verse-reference')\n      .textContent();\n    expect(bookmarkText).toBe('1:1');\n  });\n\n  it('should remove bookmark when clicked again', async () => {\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n\n    (page.locator as jest.Mock).mockImplementation((selector: string) => {\n      if (selector === '[data-testid=\"bookmark-item-1-1\"]') {\n        return {\n          count: jest.fn(),\n          textContent: jest.fn(),\n          isVisible: jest.fn().mockResolvedValue(false),\n        };\n      }\n      return {\n        count: jest.fn().mockResolvedValue(7),\n        textContent: jest.fn().mockResolvedValue('بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ'),\n        isVisible: jest.fn().mockResolvedValue(true),\n      };\n    });\n\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n    const bookmarkItem = await page.locator('[data-testid=\"bookmark-item-1-1\"]').isVisible();\n    expect(bookmarkItem).toBe(false);\n  });\n\n  it('should navigate to bookmarked verse from sidebar', async () => {\n    await page.goto('http://localhost:3000/surah/2');\n    await page.click('[data-testid=\"bookmark-button-2-255\"]');\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n    await page.click('[data-testid=\"bookmark-item-2-255\"]');\n    await page.waitForURL('**/surah/2');\n\n    const highlightedVerse = await page\n      .locator('[data-testid=\"verse-2-255\"].highlighted')\n      .isVisible();\n    expect(highlightedVerse).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/navigation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/performance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/responsive.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/search.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/translation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/BookmarkRepository.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":99,"fix":{"range":[51,96],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":98,"fix":{"range":[135,194],"text":"@/src/infrastructure/repositories/BookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":88,"fix":{"range":[235,283],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { logger, MemoryTransport, LogLevel } from '../../../src/infrastructure/monitoring/Logger';\nimport { BookmarkRepository } from '../../../src/infrastructure/repositories/BookmarkRepository';\n\nimport type { StoredBookmark } from '../../../src/domain/value-objects/StoredBookmark';\n\ndescribe('BookmarkRepository logging', () => {\n  let repository: BookmarkRepository;\n  let memory: MemoryTransport;\n\n  beforeEach(() => {\n    repository = new BookmarkRepository();\n    memory = new MemoryTransport();\n    logger.addTransport(memory);\n  });\n\n  afterEach(() => {\n    logger.removeTransport(memory);\n    memory.clear();\n  });\n\n  it('logs warning for invalid import data', async () => {\n    await repository.importBookmarks('user1', [{} as unknown as StoredBookmark]);\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.WARN);\n    expect(entries[0].message).toBe('Invalid bookmark data for import');\n  });\n\n  it('logs info when caching for offline use', async () => {\n    await repository.cacheForOffline('user1');\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.INFO);\n    expect(entries[0].message).toBe('Bookmarks already cached offline');\n    expect(entries[0].context).toEqual({ userId: 'user1' });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/TafsirRepository.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":52,"fix":{"range":[26,49],"text":"@/lib/api/client"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":92,"fix":{"range":[103,141],"text":"@/src/infrastructure/monitoring"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":94,"fix":{"range":[178,235],"text":"@/src/infrastructure/repositories/TafsirRepository"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { apiFetch } from '../../../lib/api/client';\nimport { logger, MemoryTransport, LogLevel } from '../../../src/infrastructure/monitoring';\nimport { TafsirRepository } from '../../../src/infrastructure/repositories/TafsirRepository';\n\njest.mock('../../../lib/api/client', () => ({\n  apiFetch: jest.fn(),\n  fetchWithTimeout: jest.fn(),\n}));\n\ndescribe('TafsirRepository logging', () => {\n  let repository: TafsirRepository;\n  let memory: MemoryTransport;\n\n  beforeEach(() => {\n    repository = new TafsirRepository();\n    memory = new MemoryTransport();\n    logger.addTransport(memory);\n  });\n\n  afterEach(() => {\n    logger.removeTransport(memory);\n    memory.clear();\n    jest.clearAllMocks();\n  });\n\n  it('logs warning when primary tafsir API fails', async () => {\n    (apiFetch as jest.Mock)\n      .mockRejectedValueOnce(new Error('network'))\n      .mockResolvedValueOnce({ tafsir: { text: 'fallback' } });\n\n    const text = await repository.getTafsirByVerse('1:1', 1);\n    expect(text).toBe('fallback');\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.WARN);\n    expect(entries[0].message).toBe('Primary tafsir API failed, trying fallback');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.bulk.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (93). Maximum allowed is 50.","line":3,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":124,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRepository, mockApiVerse, mockApiVerses } from './test-utils';\n\ndescribe('VerseRepository bulk retrieval', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  describe('findBySurah', () => {\n    it('should find all verses in a surah', async () => {\n      const surahVerses = [\n        mockApiVerse,\n        { ...mockApiVerse, id: 2, verse_key: '1:2' },\n        { ...mockApiVerse, id: 3, verse_key: '1:3' },\n      ];\n\n      mockApiVerses.getVersesByChapter.mockResolvedValue({\n        verses: surahVerses,\n        totalPages: 1,\n      });\n\n      const verses = await repository.findBySurah(1);\n\n      expect(verses).toHaveLength(3);\n      expect(verses[0].ayahNumber).toBe(1);\n      expect(verses[1].ayahNumber).toBe(1);\n      expect(mockApiVerses.getVersesByChapter).toHaveBeenCalledWith(1, 20, 1, 300);\n    });\n\n    it('should return empty array on error', async () => {\n      mockApiVerses.getVersesByChapter.mockRejectedValue(new Error('API error'));\n\n      const verses = await repository.findBySurah(1);\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findByJuz', () => {\n    it('should find verses by Juz number', async () => {\n      mockApiVerses.getVersesByJuz.mockResolvedValue({\n        verses: [mockApiVerse],\n        totalPages: 1,\n      });\n\n      const verses = await repository.findByJuz(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getVersesByJuz).toHaveBeenCalledWith(1, 20, 1, 500);\n    });\n  });\n\n  describe('findByPage', () => {\n    it('should find verses by page number', async () => {\n      mockApiVerses.getVersesByPage.mockResolvedValue({\n        verses: [mockApiVerse],\n        totalPages: 1,\n      });\n\n      const verses = await repository.findByPage(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getVersesByPage).toHaveBeenCalledWith(1, 20, 1, 50);\n    });\n  });\n\n  describe('search', () => {\n    it('should search verses by query', async () => {\n      mockApiVerses.searchVerses.mockResolvedValue([mockApiVerse]);\n\n      const verses = await repository.search('Allah');\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.searchVerses).toHaveBeenCalledWith('Allah');\n    });\n\n    it('should return empty array on search error', async () => {\n      mockApiVerses.searchVerses.mockRejectedValue(new Error('Search failed'));\n\n      const verses = await repository.search('test');\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findRandom', () => {\n    it('should find a random verse', async () => {\n      mockApiVerses.getRandomVerse.mockResolvedValue(mockApiVerse);\n\n      const verses = await repository.findRandom(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getRandomVerse).toHaveBeenCalledWith(20);\n    });\n\n    it('should return empty array if random verse fails', async () => {\n      mockApiVerses.getRandomVerse.mockRejectedValue(new Error('Failed'));\n\n      const verses = await repository.findRandom(1);\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findByVerseKeys', () => {\n    it('should find verses by verse keys', async () => {\n      mockApiVerses.getVerseByKey\n        .mockResolvedValueOnce(mockApiVerse)\n        .mockResolvedValueOnce({ ...mockApiVerse, verse_key: '2:255' });\n\n      const verses = await repository.findByVerseKeys(['1:1', '2:255']);\n\n      expect(verses).toHaveLength(2);\n      expect(verses[0].verseKey).toBe('1:1');\n      expect(verses[1].verseKey).toBe('1:1');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.navigation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":78,"fix":{"range":[133,170],"text":"@/src/domain/entities/Verse"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":59,"fix":{"range":[231,279],"text":"@/src/infrastructure/monitoring/Logger"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":45,"fix":{"range":[307,324],"text":"@/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import { createRepository, mockApiVerse, mockApiVerses, mockApiChapters } from './test-utils';\nimport { Verse as VerseEntity } from '../../../../src/domain/entities/Verse';\nimport {\n  logger,\n  MemoryTransport,\n  LogLevel,\n} from '../../../../src/infrastructure/monitoring/Logger';\nimport { Chapter } from '../../../../types';\n\ndescribe('VerseRepository findById', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should find verse by ID successfully', async () => {\n    mockApiVerses.getVerseById.mockResolvedValue(mockApiVerse);\n\n    const verse = await repository.findById('1:1');\n\n    expect(verse).toBeDefined();\n    expect(verse!.id).toBe('1:1');\n    expect(verse!.surahId).toBe(1);\n    expect(verse!.ayahNumber).toBe(1);\n    expect(mockApiVerses.getVerseById).toHaveBeenCalledWith('1:1', 20);\n  });\n\n  it('should return null for non-existent verse', async () => {\n    mockApiVerses.getVerseById.mockRejectedValue(new Error('Not found'));\n\n    const verse = await repository.findById('999:999');\n    expect(verse).toBeNull();\n  });\n});\n\ndescribe('VerseRepository findBySurahAndAyah', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should find verse by surah and ayah', async () => {\n    mockApiVerses.getVerseByKey.mockResolvedValue(mockApiVerse);\n\n    const verse = await repository.findBySurahAndAyah(1, 1);\n\n    expect(verse).toBeDefined();\n    expect(verse!.surahId).toBe(1);\n    expect(verse!.ayahNumber).toBe(1);\n    expect(mockApiVerses.getVerseByKey).toHaveBeenCalledWith('1:1', 20);\n  });\n\n  it('should return null if verse not found', async () => {\n    mockApiVerses.getVerseByKey.mockRejectedValue(new Error('Not found'));\n\n    const verse = await repository.findBySurahAndAyah(999, 999);\n    expect(verse).toBeNull();\n  });\n});\n\ndescribe('VerseRepository getTotalCount', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should return total verse count', async () => {\n    const count = await repository.getTotalCount();\n    expect(count).toBe(6236);\n  });\n});\n\ndescribe('VerseRepository exists', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should return true if verse exists', async () => {\n    mockApiVerses.getVerseById.mockResolvedValue(mockApiVerse);\n\n    const exists = await repository.exists('1:1');\n    expect(exists).toBe(true);\n  });\n\n  it('should return false if verse does not exist', async () => {\n    mockApiVerses.getVerseById.mockRejectedValue(new Error('Not found'));\n\n    const exists = await repository.exists('999:999');\n    expect(exists).toBe(false);\n  });\n});\n\ndescribe('VerseRepository unsupported operations', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should throw error for save operation', async () => {\n    const mockVerse = new VerseEntity(\n      '1:1',\n      1,\n      1,\n      'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ',\n      'بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ'\n    );\n\n    await expect(repository.save(mockVerse)).rejects.toThrow(\n      'Save operation not supported by read-only API'\n    );\n  });\n\n  it('should throw error for remove operation', async () => {\n    await expect(repository.remove('1:1')).rejects.toThrow(\n      'Remove operation not supported by read-only API'\n    );\n  });\n});\n\ndescribe('VerseRepository findSajdahVerses', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should find sajdah verses', async () => {\n    mockApiVerses.getVerseByKey\n      .mockResolvedValueOnce({ ...mockApiVerse, verse_key: '7:206' })\n      .mockResolvedValueOnce({ ...mockApiVerse, verse_key: '13:15' })\n      .mockResolvedValueOnce({ ...mockApiVerse, verse_key: '16:50' });\n\n    const sajdahVerses = await repository.findSajdahVerses();\n    expect(sajdahVerses.length).toBeGreaterThanOrEqual(3);\n  });\n});\n\ndescribe('VerseRepository findByRevelationType', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  it('should find verses from Makki surahs', async () => {\n    mockApiChapters.getChapters.mockResolvedValue([\n      {\n        id: 1,\n        name_simple: 'Al-Fatihah',\n        name_arabic: '',\n        revelation_place: 'makkah',\n        verses_count: 7,\n      },\n      {\n        id: 2,\n        name_simple: 'Al-Baqarah',\n        name_arabic: '',\n        revelation_place: 'madinah',\n        verses_count: 286,\n      },\n    ] as Chapter[]);\n    mockApiVerses.getVersesByChapter.mockResolvedValue({ verses: [mockApiVerse], totalPages: 1 });\n\n    const verses = await repository.findByRevelationType('makki');\n\n    expect(verses).toHaveLength(1);\n    expect(mockApiVerses.getVersesByChapter).toHaveBeenCalledWith(1, 20, 1, 300);\n  });\n});\n\ndescribe('VerseRepository offline caching', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n    localStorage.clear();\n  });\n\n  it('should cache verses for offline use', async () => {\n    mockApiVerses.getVersesByChapter.mockResolvedValue({ verses: [mockApiVerse], totalPages: 1 });\n\n    await repository.cacheForOffline([1]);\n\n    const cached = localStorage.getItem('verse-cache-1');\n    expect(cached).not.toBeNull();\n    const parsed = JSON.parse(cached!);\n    expect(parsed).toHaveLength(1);\n  });\n\n  it('should clear cached verses', async () => {\n    mockApiVerses.getVersesByChapter.mockResolvedValue({ verses: [mockApiVerse], totalPages: 1 });\n\n    await repository.cacheForOffline([1]);\n    await repository.clearCache();\n\n    expect(localStorage.getItem('verse-cache-1')).toBeNull();\n  });\n});\n\ndescribe('VerseRepository logging', () => {\n  let repository: ReturnType<typeof createRepository>;\n  let memory: MemoryTransport;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n    memory = new MemoryTransport();\n    logger.addTransport(memory);\n  });\n\n  afterEach(() => {\n    logger.removeTransport(memory);\n    memory.clear();\n  });\n\n  it('logs warning for unsupported save operation', async () => {\n    const verse = new VerseEntity('1:1', 1, 1, '', '');\n\n    await expect(repository.save(verse)).rejects.toThrow(\n      'Save operation not supported by read-only API'\n    );\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.WARN);\n    expect(entries[0].message).toBe('Save operation not supported by read-only API');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":61,"fix":{"range":[30,58],"text":"@/lib/api/chapters"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":57,"fix":{"range":[89,115],"text":"@/lib/api/verses"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":95,"fix":{"range":[151,210],"text":"@/src/infrastructure/repositories/VerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":43,"fix":{"range":[236,253],"text":"@/types"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import * as apiChapters from '../../../../lib/api/chapters';\nimport * as apiVerses from '../../../../lib/api/verses';\nimport { VerseRepository } from '../../../../src/infrastructure/repositories/VerseRepository';\nimport { Verse } from '../../../../types';\n\njest.mock('../../../../lib/api/verses', () => ({\n  getVerseById: jest.fn(),\n  getVerseByKey: jest.fn(),\n  getVersesByChapter: jest.fn(),\n  getVersesByJuz: jest.fn(),\n  getVersesByPage: jest.fn(),\n  searchVerses: jest.fn(),\n  getRandomVerse: jest.fn(),\n}));\njest.mock('../../../../lib/api/chapters', () => ({\n  getChapters: jest.fn(),\n}));\n\nexport const mockApiVerses = apiVerses as jest.Mocked<typeof apiVerses>;\nexport const mockApiChapters = apiChapters as jest.Mocked<typeof apiChapters>;\n\nexport const createRepository = (): VerseRepository => new VerseRepository();\n\nexport const mockApiVerse: Verse = {\n  id: 1,\n  verse_key: '1:1',\n  text_uthmani: 'بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ',\n  translations: [\n    {\n      id: 131,\n      resource_id: 131,\n      text: 'In the name of Allah, the Beneficent, the Merciful.',\n    },\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/mobile-performance.interaction.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/mobile-performance.render.test.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { renderWithPerf } from './helpers';\n\ndescribe('mobile performance render', () => {\n  it('measures render duration', () => {\n    const Component = () => <div>mobile test</div>;\n    const nowSpy = jest.spyOn(performance, 'now').mockReturnValueOnce(0).mockReturnValueOnce(20);\n\n    const { duration } = renderWithPerf(<Component />);\n    nowSpy.mockRestore();\n\n    expect(duration).toBe(20);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/application/GetTafsirContentUseCase.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":95,"fix":{"range":[41,92],"text":"@/src/application/use-cases/GetTafsirContent"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":50,"fix":{"range":[167,206],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":88,"fix":{"range":[244,294],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":82,"fix":{"range":[331,376],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { GetTafsirContentUseCase } from '../../../src/application/use-cases/GetTafsirContent';\nimport {\n  InvalidTafsirRequestError,\n  TafsirContentLoadError,\n} from '../../../src/domain/errors/DomainErrors';\nimport { ITafsirRepository } from '../../../src/domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../../../src/infrastructure/monitoring/Logger';\n\n// Minimal mocked repository implementing ITafsirRepository\nconst createRepository = (): jest.Mocked<ITafsirRepository> => ({\n  getAllResources: jest.fn(),\n  getResourcesByLanguage: jest.fn(),\n  getById: jest.fn(),\n  getTafsirByVerse: jest.fn(),\n  search: jest.fn(),\n  cacheResources: jest.fn(),\n  getCachedResources: jest.fn(),\n});\n\ndescribe('GetTafsirContentUseCase', () => {\n  let repository: jest.Mocked<ITafsirRepository>;\n  let useCase: GetTafsirContentUseCase;\n\n  beforeEach(() => {\n    repository = createRepository();\n    useCase = new GetTafsirContentUseCase(repository);\n  });\n\n  it('returns content when repository succeeds', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('<p>content</p>');\n\n    const result = await useCase.execute('1:1', 1);\n\n    expect(result).toBe('<p>content</p>');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledWith('1:1', 1);\n  });\n\n  it('returns fallback message when repository returns empty content', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('   ');\n\n    const result = await useCase.execute('1:1', 1);\n\n    expect(result).toBe('No tafsir content available for this verse.');\n  });\n\n  it('throws InvalidTafsirRequestError when parameters are missing', async () => {\n    await expect(useCase.execute('', 0)).rejects.toThrow(InvalidTafsirRequestError);\n  });\n\n  it('throws TafsirContentLoadError when repository fails', async () => {\n    repository.getTafsirByVerse.mockRejectedValue(new Error('Network error'));\n    const errorSpy = jest.spyOn(Logger, 'error').mockImplementation(() => {});\n\n    await expect(useCase.execute('1:1', 1)).rejects.toThrow(TafsirContentLoadError);\n    expect(errorSpy).toHaveBeenCalled();\n    errorSpy.mockRestore();\n  });\n\n  it('retrieves multiple tafsir contents with mixed results', async () => {\n    repository.getTafsirByVerse\n      .mockResolvedValueOnce('<p>tafsir 1</p>')\n      .mockResolvedValueOnce('')\n      .mockRejectedValueOnce(new Error('boom'));\n    const warnSpy = jest.spyOn(Logger, 'warn').mockImplementation(() => {});\n    const errorSpy = jest.spyOn(Logger, 'error').mockImplementation(() => {});\n\n    const result = await useCase.executeMultiple('1:1', [1, 2, 3]);\n\n    expect(result.get(1)).toBe('<p>tafsir 1</p>');\n    expect(result.get(2)).toBe('No tafsir content available for this verse.');\n    expect(result.get(3)).toBe('Failed to load tafsir content.');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(3);\n    expect(warnSpy).toHaveBeenCalled();\n    warnSpy.mockRestore();\n    errorSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/application/GetTafsirResourcesUseCase.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":99,"fix":{"range":[43,96],"text":"@/src/application/use-cases/GetTafsirResources"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":62,"fix":{"range":[123,158],"text":"@/src/domain/entities/Tafsir"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":88,"fix":{"range":[196,246],"text":"@/src/domain/repositories/ITafsirRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":82,"fix":{"range":[283,328],"text":"@/src/infrastructure/monitoring/Logger"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { GetTafsirResourcesUseCase } from '../../../src/application/use-cases/GetTafsirResources';\nimport { Tafsir } from '../../../src/domain/entities/Tafsir';\nimport { ITafsirRepository } from '../../../src/domain/repositories/ITafsirRepository';\nimport { logger as Logger } from '../../../src/infrastructure/monitoring/Logger';\n\nconst createRepository = (): jest.Mocked<ITafsirRepository> => ({\n  getAllResources: jest.fn(),\n  getResourcesByLanguage: jest.fn(),\n  getById: jest.fn(),\n  getTafsirByVerse: jest.fn(),\n  search: jest.fn(),\n  cacheResources: jest.fn(),\n  getCachedResources: jest.fn(),\n});\n\ndescribe('GetTafsirResourcesUseCase', () => {\n  let repository: jest.Mocked<ITafsirRepository>;\n  let useCase: GetTafsirResourcesUseCase;\n  const mockTafsirs = [\n    new Tafsir({ id: 1, name: 'Tafsir One', lang: 'en' }),\n    new Tafsir({ id: 2, name: 'Tafsir Two', lang: 'ar' }),\n  ];\n\n  beforeEach(() => {\n    repository = createRepository();\n    useCase = new GetTafsirResourcesUseCase(repository);\n  });\n\n  it('returns fresh resources when available', async () => {\n    repository.getAllResources.mockResolvedValue(mockTafsirs);\n\n    const result = await useCase.execute();\n\n    expect(result).toEqual({ tafsirs: mockTafsirs, isFromCache: false });\n    expect(repository.getCachedResources).not.toHaveBeenCalled();\n  });\n\n  it('returns error when both API and cache are empty', async () => {\n    repository.getAllResources.mockResolvedValue([]);\n    repository.getCachedResources.mockResolvedValue([]);\n\n    const result = await useCase.execute();\n\n    expect(repository.getCachedResources).toHaveBeenCalled();\n    expect(result).toEqual({\n      tafsirs: [],\n      isFromCache: false,\n      error: 'No tafsir resources available. Please check your internet connection.',\n    });\n  });\n\n  it('falls back to cached resources when API call fails', async () => {\n    repository.getAllResources.mockRejectedValue(new Error('network'));\n    repository.getCachedResources.mockResolvedValue(mockTafsirs);\n    const warnSpy = jest.spyOn(Logger, 'warn').mockImplementation(() => {});\n\n    const result = await useCase.execute();\n\n    expect(result).toEqual({ tafsirs: mockTafsirs, isFromCache: true });\n    expect(warnSpy).toHaveBeenCalled();\n    warnSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.constructor.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":57,"fix":{"range":[220,251],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validId,\n  validName,\n  validArabicName,\n  validEnglishName,\n  validEnglishTranslation,\n  validNumberOfAyahs,\n  validRevelationType,\n  validRevelationOrder,\n} from './Surah/test-utils';\nimport { Surah } from '../../../../src/domain/entities';\n\ndescribe('Surah Constructor - valid creation', () => {\n  it('creates a valid Surah with required parameters', () => {\n    const surah = new Surah(\n      validId,\n      validName,\n      validArabicName,\n      validEnglishName,\n      validEnglishTranslation,\n      validNumberOfAyahs,\n      validRevelationType\n    );\n    expect(surah.id).toBe(validId);\n    expect(surah.name).toBe(validName);\n    expect(surah.arabicName).toBe(validArabicName);\n    expect(surah.englishName).toBe(validEnglishName);\n    expect(surah.englishTranslation).toBe(validEnglishTranslation);\n    expect(surah.numberOfAyahs).toBe(validNumberOfAyahs);\n    expect(surah.revelationType).toBe(validRevelationType);\n    expect(surah.revelationOrder).toBeUndefined();\n  });\n\n  it('creates a Surah with revelation order', () => {\n    const surah = new Surah(\n      validId,\n      validName,\n      validArabicName,\n      validEnglishName,\n      validEnglishTranslation,\n      validNumberOfAyahs,\n      validRevelationType,\n      validRevelationOrder\n    );\n    expect(surah.revelationOrder).toBe(validRevelationOrder);\n  });\n});\n\ndescribe('Surah Constructor - invalid IDs', () => {\n  it('throws for invalid Surah ID (below 1)', () => {\n    expect(\n      () =>\n        new Surah(\n          0,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('Invalid Surah ID: must be between 1 and 114');\n  });\n\n  it('throws for invalid Surah ID (above 114)', () => {\n    expect(\n      () =>\n        new Surah(\n          115,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('Invalid Surah ID: must be between 1 and 114');\n  });\n});\n\ndescribe('Surah Constructor - empty name', () => {\n  it('throws for empty name', () => {\n    expect(\n      () =>\n        new Surah(\n          validId,\n          '',\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('Surah name cannot be empty');\n  });\n});\n\ndescribe('Surah Constructor - whitespace-only name', () => {\n  it('throws for whitespace-only name', () => {\n    expect(\n      () =>\n        new Surah(\n          validId,\n          '   ',\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('Surah name cannot be empty');\n  });\n});\n\ndescribe('Surah Constructor - empty Arabic name', () => {\n  it('throws for empty Arabic name', () => {\n    expect(\n      () =>\n        new Surah(\n          validId,\n          validName,\n          '',\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('Arabic name cannot be empty');\n  });\n});\n\ndescribe('Surah Constructor - empty English name', () => {\n  it('throws for empty English name', () => {\n    expect(\n      () =>\n        new Surah(\n          validId,\n          validName,\n          validArabicName,\n          '',\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          validRevelationType\n        )\n    ).toThrow('English name cannot be empty');\n  });\n});\n\ndescribe('Surah Constructor - invalid ayah count', () => {\n  it('throws for invalid number of ayahs (below 1)', () => {\n    expect(\n      () =>\n        new Surah(\n          validId,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          0,\n          validRevelationType\n        )\n    ).toThrow('Number of ayahs must be positive');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.difficulty.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":42,"fix":{"range":[123,154],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { createSurah } from './Surah/test-utils';\nimport {\n  getEstimatedReadingTime,\n  getMemorizationDifficulty,\n} from '../../../../src/domain/entities';\n\ndescribe('Surah difficulty utilities', () => {\n  describe('getMemorizationDifficulty', () => {\n    it('returns \"easy\" for 10 or fewer verses', () => {\n      const surah = createSurah({ numberOfAyahs: 4 });\n      expect(getMemorizationDifficulty(surah.numberOfAyahs)).toBe('easy');\n    });\n\n    it('returns \"medium\" for 11-50 verses', () => {\n      const surah = createSurah({ id: 36, numberOfAyahs: 25 });\n      expect(getMemorizationDifficulty(surah.numberOfAyahs)).toBe('medium');\n    });\n\n    it('returns \"hard\" for more than 50 verses', () => {\n      const surah = createSurah({ id: 18, numberOfAyahs: 110 });\n      expect(getMemorizationDifficulty(surah.numberOfAyahs)).toBe('hard');\n    });\n  });\n\n  describe('getEstimatedReadingTime', () => {\n    it('calculates reading time based on number of ayahs', () => {\n      const surah = createSurah({ numberOfAyahs: 7 });\n      const readingTime = getEstimatedReadingTime(surah.numberOfAyahs);\n      expect(readingTime).toBe(1);\n    });\n\n    it('returns reasonable time for long Surah', () => {\n      const surah = createSurah({ id: 2, numberOfAyahs: 286 });\n      const readingTime = getEstimatedReadingTime(surah.numberOfAyahs);\n      expect(readingTime).toBe(29);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.length.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":92,"fix":{"range":[124,155],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { createSurah, RevelationType } from './Surah/test-utils';\nimport { isLongSurah, isMediumSurah, isShortSurah } from '../../../../src/domain/entities';\n\ndescribe('Surah length classification', () => {\n  it('classifies short Surah correctly (less than 20 verses)', () => {\n    const surah = createSurah({ id: 108, numberOfAyahs: 3 });\n    expect(isShortSurah(surah.numberOfAyahs)).toBe(true);\n    expect(isMediumSurah(surah.numberOfAyahs)).toBe(false);\n    expect(isLongSurah(surah.numberOfAyahs)).toBe(false);\n  });\n\n  it('classifies medium Surah within range (20-100 verses)', () => {\n    const surah = createSurah({ id: 50, numberOfAyahs: 50 });\n    expect(isShortSurah(surah.numberOfAyahs)).toBe(false);\n    expect(isMediumSurah(surah.numberOfAyahs)).toBe(true);\n    expect(isLongSurah(surah.numberOfAyahs)).toBe(false);\n  });\n\n  it('classifies medium Surah at boundary of 20 verses', () => {\n    const surah = createSurah({ id: 20, numberOfAyahs: 20 });\n    expect(isShortSurah(surah.numberOfAyahs)).toBe(false);\n    expect(isMediumSurah(surah.numberOfAyahs)).toBe(true);\n    expect(isLongSurah(surah.numberOfAyahs)).toBe(false);\n  });\n\n  it('classifies long Surah correctly (more than 100 verses)', () => {\n    const surah = createSurah({ id: 2, numberOfAyahs: 286, revelationType: RevelationType.MADANI });\n    expect(isShortSurah(surah.numberOfAyahs)).toBe(false);\n    expect(isMediumSurah(surah.numberOfAyahs)).toBe(false);\n    expect(isLongSurah(surah.numberOfAyahs)).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.metrics.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":42,"fix":{"range":[262,293],"text":"@/src/domain/entities"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (76). Maximum allowed is 50.","line":17,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":98,"endColumn":2},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":18,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":78,"endColumn":4},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":20,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":35,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":23,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":34,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":37,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":48,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":52,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":63,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":65,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":76,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":95,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":95,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validName,\n  validArabicName,\n  validEnglishName,\n  validEnglishTranslation,\n  validNumberOfAyahs,\n  validRevelationType,\n} from './Surah/test-utils';\nimport {\n  Surah,\n  RevelationType,\n  getJuzNumbers,\n  isMufassalSurah,\n  isSevenLongSurah,\n} from '../../../../src/domain/entities';\n\ndescribe('Surah Entity - Metrics', () => {\n  describe('special Surah classifications', () => {\n    describe('Seven Long Surahs', () => {\n      it('returns true for known Seven Long Surahs', () => {\n        const sevenLongSurahs = [2, 3, 4, 5, 6, 7, 9];\n\n        sevenLongSurahs.forEach((id) => {\n          const surah = new Surah(\n            id,\n            `Surah ${id}`,\n            `السورة ${id}`,\n            `Surah ${id}`,\n            `The ${id}`,\n            100,\n            RevelationType.MAKKI\n          );\n          expect(isSevenLongSurah(surah.id)).toBe(true);\n        });\n      });\n\n      it('returns false for non Seven Long Surahs', () => {\n        const regularSurah = new Surah(\n          8,\n          'الأنفال',\n          'الأنفال',\n          'Al-Anfal',\n          'The Spoils of War',\n          75,\n          RevelationType.MADANI\n        );\n        expect(isSevenLongSurah(regularSurah.id)).toBe(false);\n      });\n    });\n\n    describe('Mufassal Surahs', () => {\n      it('returns true for Mufassal Surahs', () => {\n        const mufassalSurah = new Surah(\n          49,\n          'الحجرات',\n          'الحجرات',\n          'Al-Hujurat',\n          'The Rooms',\n          18,\n          RevelationType.MADANI\n        );\n        expect(isMufassalSurah(mufassalSurah.id)).toBe(true);\n      });\n\n      it('returns false for non Mufassal Surahs', () => {\n        const nonMufassalSurah = new Surah(\n          48,\n          'الفتح',\n          'الفتح',\n          'Al-Fath',\n          'The Victory',\n          29,\n          RevelationType.MADANI\n        );\n        expect(isMufassalSurah(nonMufassalSurah.id)).toBe(false);\n      });\n    });\n  });\n\n  describe('getJuzNumbers', () => {\n    it('should return array of Juz numbers', () => {\n      const surah = new Surah(\n        1,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n\n      const juzNumbers = getJuzNumbers(surah.id);\n      expect(Array.isArray(juzNumbers)).toBe(true);\n      expect(juzNumbers.length).toBeGreaterThan(0);\n      expect(juzNumbers.every((num) => num >= 1 && num <= 30)).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.revelation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":22,"endColumn":42,"fix":{"range":[401,432],"text":"@/src/domain/entities"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (189). Maximum allowed is 50.","line":24,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":222,"endColumn":2},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":25,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":81,"endColumn":4},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":27,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":38,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":40,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":51,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":55,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":66,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":68,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validId,\n  validName,\n  validArabicName,\n  validEnglishName,\n  validEnglishTranslation,\n  validNumberOfAyahs,\n  validRevelationType,\n  validRevelationOrder,\n} from './Surah/test-utils';\nimport {\n  Surah,\n  RevelationType,\n  getEstimatedReadingTime,\n  getJuzNumbers,\n  getMemorizationDifficulty,\n  isLongSurah,\n  isMediumSurah,\n  isMufassalSurah,\n  isSevenLongSurah,\n  isShortSurah,\n} from '../../../../src/domain/entities';\n\ndescribe('Surah Entity - Revelation', () => {\n  describe('revelation type methods', () => {\n    describe('isMakki', () => {\n      it('returns true when revelation type is MAKKI', () => {\n        const makkiSurah = new Surah(\n          validId,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          RevelationType.MAKKI\n        );\n        expect(makkiSurah.isMakki()).toBe(true);\n      });\n\n      it('returns false when revelation type is MADANI', () => {\n        const madaniSurah = new Surah(\n          2,\n          'البقرة',\n          'البقرة',\n          'Al-Baqarah',\n          'The Cow',\n          286,\n          RevelationType.MADANI\n        );\n        expect(madaniSurah.isMakki()).toBe(false);\n      });\n    });\n\n    describe('isMadani', () => {\n      it('returns true when revelation type is MADANI', () => {\n        const madaniSurah = new Surah(\n          2,\n          'البقرة',\n          'البقرة',\n          'Al-Baqarah',\n          'The Cow',\n          286,\n          RevelationType.MADANI\n        );\n        expect(madaniSurah.isMadani()).toBe(true);\n      });\n\n      it('returns false when revelation type is MAKKI', () => {\n        const makkiSurah = new Surah(\n          validId,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          RevelationType.MAKKI\n        );\n        expect(makkiSurah.isMadani()).toBe(false);\n      });\n    });\n  });\n\n  describe('canBeReadInPrayer', () => {\n    it('should return true for most Surahs', () => {\n      const regularSurah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(regularSurah.canBeReadInPrayer()).toBe(true);\n    });\n\n    it('should return false for At-Tawbah (Surah 9)', () => {\n      const atTawbah = new Surah(\n        9,\n        'التوبة',\n        'التوبة',\n        'At-Tawbah',\n        'The Repentance',\n        129,\n        RevelationType.MADANI\n      );\n      expect(atTawbah.canBeReadInPrayer()).toBe(false);\n    });\n  });\n\n  describe('startWithBismillah', () => {\n    it('should return true for most Surahs', () => {\n      const regularSurah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(regularSurah.startWithBismillah()).toBe(true);\n    });\n\n    it('should return false for At-Tawbah (Surah 9)', () => {\n      const atTawbah = new Surah(\n        9,\n        'التوبة',\n        'التوبة',\n        'At-Tawbah',\n        'The Repentance',\n        129,\n        RevelationType.MADANI\n      );\n      expect(atTawbah.startWithBismillah()).toBe(false);\n    });\n  });\n\n  describe('equals', () => {\n    it('should return true for Surahs with same ID', () => {\n      const surah1 = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      const surah2 = new Surah(\n        validId,\n        'Different Name',\n        'اسم مختلف',\n        'Different English',\n        'Different Translation',\n        10,\n        RevelationType.MADANI\n      );\n      expect(surah1.equals(surah2)).toBe(true);\n    });\n\n    it('should return false for Surahs with different IDs', () => {\n      const surah1 = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      const surah2 = new Surah(\n        2,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(surah1.equals(surah2)).toBe(false);\n    });\n  });\n\n  describe('toPlainObject', () => {\n    it('should return plain object with all properties and computed values', () => {\n      const surah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType,\n        validRevelationOrder\n      );\n      const plainObject = surah.toPlainObject();\n      expect(plainObject).toEqual({\n        id: validId,\n        name: validName,\n        arabicName: validArabicName,\n        englishName: validEnglishName,\n        englishTranslation: validEnglishTranslation,\n        numberOfAyahs: validNumberOfAyahs,\n        revelationType: validRevelationType,\n        revelationOrder: validRevelationOrder,\n        isMakki: true,\n        isMadani: false,\n        canBeReadInPrayer: true,\n        startWithBismillah: true,\n        memorizationDifficulty: getMemorizationDifficulty(validNumberOfAyahs),\n        estimatedReadingTime: getEstimatedReadingTime(validNumberOfAyahs),\n        isShortSurah: isShortSurah(validNumberOfAyahs),\n        isMediumSurah: isMediumSurah(validNumberOfAyahs),\n        isLongSurah: isLongSurah(validNumberOfAyahs),\n        isSevenLongSurah: isSevenLongSurah(validId),\n        isMufassalSurah: isMufassalSurah(validId),\n        juzNumbers: getJuzNumbers(validId),\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":76,"fix":{"range":[39,73],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Surah, RevelationType } from '../../../../../src/domain/entities';\n\nexport const validId = 1;\nexport const validName = 'الفاتحة';\nexport const validArabicName = 'الفاتحة';\nexport const validEnglishName = 'Al-Fatiha';\nexport const validEnglishTranslation = 'The Opening';\nexport const validNumberOfAyahs = 7;\nexport const validRevelationType = RevelationType.MAKKI;\nexport const validRevelationOrder = 5;\n\ninterface SurahProps {\n  id?: number;\n  name?: string;\n  arabicName?: string;\n  englishName?: string;\n  englishTranslation?: string;\n  numberOfAyahs?: number;\n  revelationType?: RevelationType;\n  revelationOrder?: number;\n}\n\nconst defaultProps: Required<Omit<SurahProps, 'revelationOrder'>> = {\n  id: validId,\n  name: validName,\n  arabicName: validArabicName,\n  englishName: validEnglishName,\n  englishTranslation: validEnglishTranslation,\n  numberOfAyahs: validNumberOfAyahs,\n  revelationType: validRevelationType,\n};\n\nexport function createSurah(overrides: SurahProps = {}): Surah {\n  const props = { ...defaultProps, ...overrides };\n  return new Surah(\n    props.id,\n    props.name,\n    props.arabicName,\n    props.englishName,\n    props.englishTranslation,\n    props.numberOfAyahs,\n    props.revelationType,\n    props.revelationOrder\n  );\n}\n\nexport { RevelationType };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.constructor.invalid.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":57,"fix":{"range":[146,177],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validId,\n  validSurahId,\n  validAyahNumber,\n  validArabicText,\n  validUthmaniText,\n} from './Verse/test-utils';\nimport { Verse } from '../../../../src/domain/entities';\n\ndescribe('Verse constructor (invalid cases)', () => {\n  it('throws error for empty ID', () => {\n    expect(\n      () => new Verse('', validSurahId, validAyahNumber, validArabicText, validUthmaniText)\n    ).toThrow('Verse ID cannot be empty');\n  });\n\n  it('throws error for invalid Surah ID (below 1)', () => {\n    expect(() => new Verse(validId, 0, validAyahNumber, validArabicText, validUthmaniText)).toThrow(\n      'Invalid Surah ID'\n    );\n  });\n\n  it('throws error for invalid Surah ID (above 114)', () => {\n    expect(\n      () => new Verse(validId, 115, validAyahNumber, validArabicText, validUthmaniText)\n    ).toThrow('Invalid Surah ID');\n  });\n\n  it('throws error for invalid Ayah number (below 1)', () => {\n    expect(() => new Verse(validId, validSurahId, 0, validArabicText, validUthmaniText)).toThrow(\n      'Invalid Ayah number'\n    );\n  });\n\n  it('throws error for empty or whitespace-only Arabic text', () => {\n    expect(() => new Verse(validId, validSurahId, validAyahNumber, '', validUthmaniText)).toThrow(\n      'Arabic text cannot be empty'\n    );\n    expect(\n      () => new Verse(validId, validSurahId, validAyahNumber, '   ', validUthmaniText)\n    ).toThrow('Arabic text cannot be empty');\n  });\n\n  it('throws error for empty Uthmani text', () => {\n    expect(() => new Verse(validId, validSurahId, validAyahNumber, validArabicText, '')).toThrow(\n      'Uthmani text cannot be empty'\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.constructor.valid.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":80,"fix":{"range":[156,204],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validSurahId,\n  validAyahNumber,\n  validArabicText,\n  validUthmaniText,\n  createVerse,\n} from './Verse/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Verse constructor (valid cases)', () => {\n  it('creates a valid verse with required parameters', () => {\n    const verse = createVerse();\n    expect(verse.surahId).toBe(validSurahId);\n    expect(verse.ayahNumber).toBe(validAyahNumber);\n    expect(verse.arabicText).toBe(validArabicText);\n    expect(verse.uthmaniText).toBe(validUthmaniText);\n    expect(verse.translation).toBeUndefined();\n  });\n\n  it('creates a verse with translation', () => {\n    const translation = new Translation(\n      1,\n      1,\n      'In the name of Allah, the Beneficent, the Merciful.'\n    );\n    const verse = createVerse(translation);\n    expect(verse.translation).toBe(translation);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.equalsAndTranslation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":57,"fix":{"range":[73,104],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":80,"fix":{"range":[136,184],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { createVerse } from './Verse/test-utils';\nimport { Verse } from '../../../../src/domain/entities';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Verse equals and withTranslation', () => {\n  it('equals returns true for verses with same ID and false otherwise', () => {\n    const verse1 = createVerse();\n    const verse2 = new Verse(verse1.id, 2, 2, 'different text', 'different uthmani');\n    const verse3 = new Verse(\n      'verse-1-2',\n      verse1.surahId,\n      verse1.ayahNumber,\n      verse1.arabicText,\n      verse1.uthmaniText\n    );\n    expect(verse1.equals(verse2)).toBe(true);\n    expect(verse1.equals(verse3)).toBe(false);\n  });\n\n  it('withTranslation returns new verse with translation', () => {\n    const original = createVerse();\n    const translation = new Translation(1, 1, 'Test translation');\n    const updated = original.withTranslation(translation);\n    expect(updated.translation).toBe(translation);\n    expect(updated).not.toBe(original);\n    expect(updated.id).toBe(original.id);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.isSajdah.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":65,"fix":{"range":[31,62],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { isSajdahVerse } from '../../../../src/domain/entities';\n\ndescribe('Verse isSajdahVerse', () => {\n  it('returns true for known sajdah verses', () => {\n    expect(isSajdahVerse(7, 206)).toBe(true);\n  });\n\n  it('returns false for non-sajdah verses', () => {\n    expect(isSajdahVerse(1, 1)).toBe(false);\n  });\n\n  it('returns true for multiple sajdah verses', () => {\n    const sajdahVerses = [\n      { surah: 13, ayah: 15 },\n      { surah: 16, ayah: 50 },\n      { surah: 32, ayah: 15 },\n      { surah: 96, ayah: 19 },\n    ];\n    sajdahVerses.forEach(({ surah, ayah }) => {\n      expect(isSajdahVerse(surah, ayah)).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.properties.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":57,"fix":{"range":[104,135],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validId, validArabicText, validUthmaniText } from './Verse/test-utils';\nimport { Verse } from '../../../../src/domain/entities';\n\ndescribe('Verse properties', () => {\n  it('verseKey returns correct format', () => {\n    const verse = new Verse(validId, 2, 255, validArabicText, validUthmaniText);\n    expect(verse.verseKey).toBe('2:255');\n  });\n\n  it('isFirstVerse returns true for ayah 1 and false otherwise', () => {\n    const v1 = new Verse(validId, 1, 1, validArabicText, validUthmaniText);\n    const v2 = new Verse(validId, 1, 2, validArabicText, validUthmaniText);\n    expect(v1.isFirstVerse()).toBe(true);\n    expect(v2.isFirstVerse()).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.serialization.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":42,"fix":{"range":[180,211],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":80,"fix":{"range":[243,291],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { validId, validArabicText, validUthmaniText, createVerse } from './Verse/test-utils';\nimport {\n  Verse,\n  getWordCount,\n  getEstimatedReadingTime,\n  isSajdahVerse,\n} from '../../../../src/domain/entities';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Verse serialization', () => {\n  it('converts to plain object with all properties', () => {\n    const translation = new Translation(1, 1, 'Test translation');\n    const verse = new Verse(validId, 2, 255, validArabicText, validUthmaniText, translation);\n\n    const plain = verse.toPlainObject();\n\n    expect(plain).toEqual({\n      id: validId,\n      surahId: 2,\n      ayahNumber: 255,\n      verseKey: '2:255',\n      arabicText: validArabicText,\n      uthmaniText: validUthmaniText,\n      translation: translation.toPlainObject(),\n      wordCount: getWordCount(validArabicText),\n      estimatedReadingTime: getEstimatedReadingTime(validArabicText),\n      isFirstVerse: false,\n      isSajdahVerse: isSajdahVerse(2, 255),\n    });\n  });\n\n  it('omits translation when not provided', () => {\n    const verse = createVerse();\n    const plain = verse.toPlainObject();\n    expect(plain.translation).toBeUndefined();\n    expect(typeof plain).toBe('object');\n  });\n\n  it('reconstructs from plain object', () => {\n    const translation = new Translation(1, 1, 'Test translation');\n    const verse = createVerse(translation);\n    const plain = verse.toPlainObject();\n\n    const reconstructed = new Verse(\n      plain.id,\n      plain.surahId,\n      plain.ayahNumber,\n      plain.arabicText,\n      plain.uthmaniText,\n      translation\n    );\n\n    expect(reconstructed.toPlainObject()).toEqual(plain);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.textUtils.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":42,"fix":{"range":[162,193],"text":"@/src/domain/entities"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validArabicText } from './Verse/test-utils';\nimport {\n  getMemorizationSegments,\n  getEstimatedReadingTime,\n  containsBismillah,\n  getWordCount,\n} from '../../../../src/domain/entities';\n\ndescribe('Verse text utilities', () => {\n  it('getMemorizationSegments splits Arabic text into segments', () => {\n    const segments = getMemorizationSegments(validArabicText);\n    expect(segments).toHaveLength(4);\n    expect(segments).toEqual(['بِسْمِ', 'اللَّهِ', 'الرَّحْمَٰنِ', 'الرَّحِيمِ']);\n  });\n\n  it('handles text with extra whitespace and filters empties', () => {\n    const segments1 = getMemorizationSegments('  ' + validArabicText + '  ');\n    expect(segments1).toHaveLength(4);\n    const segments2 = getMemorizationSegments('بِسْمِ اللَّهِ   الرَّحْمَٰنِ الرَّحِيمِ');\n    expect(segments2.every((segment) => segment.length > 0)).toBe(true);\n  });\n\n  it('getEstimatedReadingTime computes reasonable times', () => {\n    const readingTime = getEstimatedReadingTime(validArabicText);\n    expect(readingTime).toBe(2);\n    const shortTime = getEstimatedReadingTime('اللَّهِ');\n    expect(shortTime).toBeGreaterThanOrEqual(1);\n  });\n\n  it('containsBismillah and getWordCount', () => {\n    expect(containsBismillah(validArabicText)).toBe(true);\n    const regularText = 'الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ';\n    expect(containsBismillah(regularText)).toBe(false);\n    expect(getWordCount(validArabicText)).toBe(4);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[23,54],"text":"@/tests/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":80,"fix":{"range":[86,134],"text":"@/tests/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { Verse } from '../../../../src/domain/entities';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\nexport const validId = 'verse-1-1';\nexport const validSurahId = 1;\nexport const validAyahNumber = 1;\nexport const validArabicText = 'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ';\nexport const validUthmaniText = 'بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ';\n\nexport function createVerse(translation?: Translation): Verse {\n  return new Verse(\n    validId,\n    validSurahId,\n    validAyahNumber,\n    validArabicText,\n    validUthmaniText,\n    translation\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkImportService.export.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":95,"fix":{"range":[37,92],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":89,"fix":{"range":[129,181],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":95,"fix":{"range":[223,276],"text":"@/src/domain/services/BookmarkImportService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":90,"fix":{"range":[313,366],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":86,"fix":{"range":[401,452],"text":"@/src/domain/value-objects/StoredBookmark"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"import { IBookmarkRepository } from '../../../../src/domain/repositories/IBookmarkRepository';\nimport { IVerseRepository } from '../../../../src/domain/repositories/IVerseRepository';\nimport { BookmarkImportService } from '../../../../src/domain/services/BookmarkImportService';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\nimport { StoredBookmark } from '../../../../src/domain/value-objects/StoredBookmark';\n\nconst mockBookmarkRepository: jest.Mocked<IBookmarkRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  existsByUserAndVerse: jest.fn(),\n  findByUser: jest.fn(),\n  findByUserWithOptions: jest.fn(),\n  findRecent: jest.fn(),\n  findByVerse: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByPosition: jest.fn(),\n  findByTags: jest.fn(),\n  findWithNotes: jest.fn(),\n  findByDateRange: jest.fn(),\n  search: jest.fn(),\n  existsAtPosition: jest.fn(),\n  getCountByUser: jest.fn(),\n  getCountBySurah: jest.fn(),\n  getTagsByUser: jest.fn(),\n  getStatistics: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findNearPosition: jest.fn(),\n  saveMany: jest.fn(),\n  removeMany: jest.fn(),\n  removeAllByUser: jest.fn(),\n  removeBySurah: jest.fn(),\n  exportBookmarks: jest.fn(),\n  importBookmarks: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\nconst mockVerseRepository: jest.Mocked<IVerseRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  findBySurahAndAyah: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByJuz: jest.fn(),\n  findByPage: jest.fn(),\n  findByHizb: jest.fn(),\n  findByRubAlHizb: jest.fn(),\n  search: jest.fn(),\n  findSajdahVerses: jest.fn(),\n  findFirstVerses: jest.fn(),\n  findByVerseKeys: jest.fn(),\n  findRandom: jest.fn(),\n  getTotalCount: jest.fn(),\n  getCountBySurah: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findWithTranslation: jest.fn(),\n  findByRevelationType: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\ndescribe('BookmarkImportService export', () => {\n  let importService: BookmarkImportService;\n  const userId = 'user123';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    importService = new BookmarkImportService(mockBookmarkRepository, mockVerseRepository);\n  });\n\n  it('exports bookmarks in portable format', async () => {\n    const position1 = new BookmarkPosition(1, 1, new Date());\n    const now = new Date().toISOString();\n    const mockStored: StoredBookmark[] = [\n      {\n        id: 'b1',\n        userId,\n        verseId: 'v1',\n        position: position1.toPlainObject(),\n        createdAt: now,\n        tags: [],\n      },\n    ];\n    mockBookmarkRepository.exportBookmarks.mockResolvedValue(mockStored);\n\n    const result = await importService.exportBookmarks(userId);\n\n    expect(mockBookmarkRepository.exportBookmarks).toHaveBeenCalledWith(userId);\n    expect(result).toEqual(mockStored);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkImportService.import.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":57,"fix":{"range":[23,54],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":95,"fix":{"range":[94,149],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":89,"fix":{"range":[186,238],"text":"@/src/domain/repositories/IVerseRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":95,"fix":{"range":[280,333],"text":"@/src/domain/services/BookmarkImportService"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { Verse } from '../../../../src/domain/entities';\nimport { IBookmarkRepository } from '../../../../src/domain/repositories/IBookmarkRepository';\nimport { IVerseRepository } from '../../../../src/domain/repositories/IVerseRepository';\nimport { BookmarkImportService } from '../../../../src/domain/services/BookmarkImportService';\n\nconst mockBookmarkRepository: jest.Mocked<IBookmarkRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  existsByUserAndVerse: jest.fn(),\n  findByUser: jest.fn(),\n  findByUserWithOptions: jest.fn(),\n  findRecent: jest.fn(),\n  findByVerse: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByPosition: jest.fn(),\n  findByTags: jest.fn(),\n  findWithNotes: jest.fn(),\n  findByDateRange: jest.fn(),\n  search: jest.fn(),\n  existsAtPosition: jest.fn(),\n  getCountByUser: jest.fn(),\n  getCountBySurah: jest.fn(),\n  getTagsByUser: jest.fn(),\n  getStatistics: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findNearPosition: jest.fn(),\n  saveMany: jest.fn(),\n  removeMany: jest.fn(),\n  removeAllByUser: jest.fn(),\n  removeBySurah: jest.fn(),\n  exportBookmarks: jest.fn(),\n  importBookmarks: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\nconst mockVerseRepository: jest.Mocked<IVerseRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  findBySurahAndAyah: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByJuz: jest.fn(),\n  findByPage: jest.fn(),\n  findByHizb: jest.fn(),\n  findByRubAlHizb: jest.fn(),\n  search: jest.fn(),\n  findSajdahVerses: jest.fn(),\n  findFirstVerses: jest.fn(),\n  findByVerseKeys: jest.fn(),\n  findRandom: jest.fn(),\n  getTotalCount: jest.fn(),\n  getCountBySurah: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findWithTranslation: jest.fn(),\n  findByRevelationType: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\ndescribe('BookmarkImportService import', () => {\n  let importService: BookmarkImportService;\n  const userId = 'user123';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    importService = new BookmarkImportService(mockBookmarkRepository, mockVerseRepository);\n  });\n\n  it('successfully imports valid bookmarks', async () => {\n    const importData = [\n      { surahId: 1, ayahNumber: 1, notes: 'Opening verse' },\n      { surahId: 2, ayahNumber: 255, tags: ['powerful', 'ayat-kursi'] },\n    ];\n    const mockVerse1 = new Verse('v1', 1, 1, 'text1', 'uthmani1');\n    const mockVerse2 = new Verse('v2', 2, 255, 'text2', 'uthmani2');\n    mockVerseRepository.findBySurahAndAyah\n      .mockResolvedValueOnce(mockVerse1)\n      .mockResolvedValueOnce(mockVerse2);\n    mockBookmarkRepository.existsAtPosition\n      .mockResolvedValueOnce(false)\n      .mockResolvedValueOnce(false);\n    mockBookmarkRepository.saveMany.mockResolvedValue(undefined);\n\n    const result = await importService.importBookmarks(userId, importData);\n\n    expect(result).toHaveLength(2);\n    expect(result[0].notes).toBe('Opening verse');\n    expect(result[1].tags).toEqual(['powerful', 'ayat-kursi']);\n    expect(mockBookmarkRepository.saveMany).toHaveBeenCalledWith(result);\n  });\n\n  it('skips invalid or existing bookmarks', async () => {\n    const importData = [\n      { surahId: 1, ayahNumber: 1 },\n      { surahId: 999, ayahNumber: 999 },\n    ];\n    mockVerseRepository.findBySurahAndAyah\n      .mockResolvedValueOnce(new Verse('v1', 1, 1, 'text1', 'uthmani1'))\n      .mockResolvedValueOnce(null);\n    mockBookmarkRepository.existsAtPosition.mockResolvedValueOnce(false);\n    mockBookmarkRepository.saveMany.mockResolvedValue(undefined);\n\n    const result = await importService.importBookmarks(userId, importData);\n\n    expect(result).toHaveLength(1);\n    expect(mockBookmarkRepository.saveMany).toHaveBeenCalledWith(result);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.addTag.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[116,150],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":91,"fix":{"range":[196,241],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":102,"fix":{"range":[285,343],"text":"@/src/domain/services/BookmarkMutationService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":93,"fix":{"range":[380,436],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { createMockBookmarkRepository, userId, verseId, bookmarkId } from './test-utils';\nimport { Bookmark } from '../../../../../src/domain/entities';\nimport { UnauthorizedBookmarkError } from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkMutationService } from '../../../../../src/domain/services/BookmarkMutationService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkMutationService addTag', () => {\n  let service: BookmarkMutationService;\n  let mockRepo = createMockBookmarkRepository();\n  const position = new BookmarkPosition(1, 1, new Date());\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockRepo = createMockBookmarkRepository();\n    service = new BookmarkMutationService(mockRepo);\n  });\n\n  it('adds tag', async () => {\n    const base = new Bookmark(bookmarkId, userId, verseId, position, new Date(), undefined, [\n      'memorize',\n    ]);\n    mockRepo.findById.mockResolvedValue(base);\n    const result = await service.addTagToBookmark(userId, bookmarkId, 'important');\n    expect(result.tags).toContain('important');\n    expect(mockRepo.save).toHaveBeenCalled();\n  });\n\n  it('throws on unauthorized', async () => {\n    const other = new Bookmark(bookmarkId, 'other', verseId, position, new Date(), undefined, [\n      'memorize',\n    ]);\n    mockRepo.findById.mockResolvedValue(other);\n    await expect(service.addTagToBookmark(userId, bookmarkId, 'important')).rejects.toThrow(\n      UnauthorizedBookmarkError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.removeTag.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[116,150],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":91,"fix":{"range":[196,241],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":102,"fix":{"range":[285,343],"text":"@/src/domain/services/BookmarkMutationService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":93,"fix":{"range":[380,436],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { createMockBookmarkRepository, userId, verseId, bookmarkId } from './test-utils';\nimport { Bookmark } from '../../../../../src/domain/entities';\nimport { UnauthorizedBookmarkError } from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkMutationService } from '../../../../../src/domain/services/BookmarkMutationService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkMutationService removeTag', () => {\n  let service: BookmarkMutationService;\n  let mockRepo = createMockBookmarkRepository();\n  const position = new BookmarkPosition(1, 1, new Date());\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockRepo = createMockBookmarkRepository();\n    service = new BookmarkMutationService(mockRepo);\n  });\n\n  it('removes tag', async () => {\n    const base = new Bookmark(bookmarkId, userId, verseId, position, new Date(), undefined, [\n      'important',\n      'memorize',\n    ]);\n    mockRepo.findById.mockResolvedValue(base);\n    const result = await service.removeTagFromBookmark(userId, bookmarkId, 'memorize');\n    expect(result.tags).not.toContain('memorize');\n    expect(mockRepo.save).toHaveBeenCalled();\n  });\n\n  it('throws on unauthorized', async () => {\n    const other = new Bookmark(bookmarkId, 'other', verseId, position, new Date(), undefined, [\n      'important',\n      'memorize',\n    ]);\n    mockRepo.findById.mockResolvedValue(other);\n    await expect(service.removeTagFromBookmark(userId, bookmarkId, 'memorize')).rejects.toThrow(\n      UnauthorizedBookmarkError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.updateNotes.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[116,150],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":56,"fix":{"range":[224,269],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":102,"fix":{"range":[313,371],"text":"@/src/domain/services/BookmarkMutationService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":93,"fix":{"range":[408,464],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { createMockBookmarkRepository, userId, verseId, bookmarkId } from './test-utils';\nimport { Bookmark } from '../../../../../src/domain/entities';\nimport {\n  BookmarkNotFoundError,\n  UnauthorizedBookmarkError,\n} from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkMutationService } from '../../../../../src/domain/services/BookmarkMutationService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkMutationService updateNotes', () => {\n  let service: BookmarkMutationService;\n  let mockRepo = createMockBookmarkRepository();\n  const position = new BookmarkPosition(1, 1, new Date());\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockRepo = createMockBookmarkRepository();\n    service = new BookmarkMutationService(mockRepo);\n  });\n\n  it('updates notes', async () => {\n    const base = new Bookmark(bookmarkId, userId, verseId, position, new Date(), 'Old notes');\n    mockRepo.findById.mockResolvedValue(base);\n    const result = await service.updateBookmarkNotes(userId, bookmarkId, 'Updated notes');\n    expect(result.notes).toBe('Updated notes');\n    expect(mockRepo.save).toHaveBeenCalled();\n  });\n\n  it('throws when not found', async () => {\n    mockRepo.findById.mockResolvedValue(null);\n    await expect(service.updateBookmarkNotes(userId, bookmarkId, 'Updated notes')).rejects.toThrow(\n      BookmarkNotFoundError\n    );\n  });\n\n  it('throws on unauthorized', async () => {\n    const other = new Bookmark(bookmarkId, 'other', verseId, position, new Date(), 'Old notes');\n    mockRepo.findById.mockResolvedValue(other);\n    await expect(service.updateBookmarkNotes(userId, bookmarkId, 'Updated notes')).rejects.toThrow(\n      UnauthorizedBookmarkError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.updateTags.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":63,"fix":{"range":[116,150],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":91,"fix":{"range":[196,241],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":102,"fix":{"range":[285,343],"text":"@/src/domain/services/BookmarkMutationService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":5,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":93,"fix":{"range":[380,436],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import { createMockBookmarkRepository, userId, verseId, bookmarkId } from './test-utils';\nimport { Bookmark } from '../../../../../src/domain/entities';\nimport { UnauthorizedBookmarkError } from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkMutationService } from '../../../../../src/domain/services/BookmarkMutationService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkMutationService updateTags', () => {\n  let service: BookmarkMutationService;\n  let mockRepo = createMockBookmarkRepository();\n  const position = new BookmarkPosition(1, 1, new Date());\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockRepo = createMockBookmarkRepository();\n    service = new BookmarkMutationService(mockRepo);\n  });\n\n  it('updates tags', async () => {\n    const base = new Bookmark(bookmarkId, userId, verseId, position, new Date());\n    mockRepo.findById.mockResolvedValue(base);\n    const result = await service.updateBookmarkTags(userId, bookmarkId, ['important']);\n    expect(result.tags).toEqual(['important']);\n    expect(mockRepo.save).toHaveBeenCalled();\n  });\n\n  it('throws on unauthorized', async () => {\n    const other = new Bookmark(bookmarkId, 'other', verseId, position, new Date());\n    mockRepo.findById.mockResolvedValue(other);\n    await expect(service.updateBookmarkTags(userId, bookmarkId, ['important'])).rejects.toThrow(\n      UnauthorizedBookmarkError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.bookmarkVerse.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":70,"fix":{"range":[172,206],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":56,"fix":{"range":[278,323],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":14,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":86,"fix":{"range":[359,409],"text":"@/src/domain/services/BookmarkService"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import {\n  createMockBookmarkRepository,\n  createMockVerseRepository,\n  userId,\n  surahId,\n  ayahNumber,\n  verseId,\n} from './test-utils';\nimport { Bookmark, Verse } from '../../../../../src/domain/entities';\nimport {\n  BookmarkAlreadyExistsError,\n  VerseNotFoundError,\n} from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkService } from '../../../../../src/domain/services/BookmarkService';\n\ndescribe('BookmarkService bookmarkVerse', () => {\n  let service: BookmarkService;\n  let mockBookmarkRepo = createMockBookmarkRepository();\n  let mockVerseRepo = createMockVerseRepository();\n  const verse = new Verse(verseId, surahId, ayahNumber, 'text', 'uthmani');\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockBookmarkRepo = createMockBookmarkRepository();\n    mockVerseRepo = createMockVerseRepository();\n    service = new BookmarkService(mockBookmarkRepo, mockVerseRepo);\n  });\n\n  it('creates bookmark for valid verse', async () => {\n    mockVerseRepo.findBySurahAndAyah.mockResolvedValue(verse);\n    mockBookmarkRepo.existsAtPosition.mockResolvedValue(false);\n    const result = await service.bookmarkVerse(userId, surahId, ayahNumber, 'note', ['tag']);\n    expect(result).toBeInstanceOf(Bookmark);\n    expect(result.notes).toBe('note');\n    expect(result.tags).toEqual(['tag']);\n  });\n\n  it('throws when verse missing', async () => {\n    mockVerseRepo.findBySurahAndAyah.mockResolvedValue(null);\n    await expect(service.bookmarkVerse(userId, surahId, ayahNumber)).rejects.toThrow(\n      VerseNotFoundError\n    );\n  });\n\n  it('throws when bookmark exists', async () => {\n    mockVerseRepo.findBySurahAndAyah.mockResolvedValue(verse);\n    mockBookmarkRepo.existsAtPosition.mockResolvedValue(true);\n    await expect(service.bookmarkVerse(userId, surahId, ayahNumber)).rejects.toThrow(\n      BookmarkAlreadyExistsError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.isBookmarked.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":86,"fix":{"range":[161,211],"text":"@/src/domain/services/BookmarkService"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  createMockBookmarkRepository,\n  createMockVerseRepository,\n  userId,\n  surahId,\n  ayahNumber,\n} from './test-utils';\nimport { BookmarkService } from '../../../../../src/domain/services/BookmarkService';\n\ndescribe('BookmarkService isVerseBookmarked', () => {\n  it('returns true then false based on repository', async () => {\n    const mockBookmarkRepo = createMockBookmarkRepository();\n    const mockVerseRepo = createMockVerseRepository();\n    const service = new BookmarkService(mockBookmarkRepo, mockVerseRepo);\n    mockBookmarkRepo.existsAtPosition.mockResolvedValueOnce(true);\n    await expect(service.isVerseBookmarked(userId, surahId, ayahNumber)).resolves.toBe(true);\n    mockBookmarkRepo.existsAtPosition.mockResolvedValueOnce(false);\n    await expect(service.isVerseBookmarked(userId, surahId, ayahNumber)).resolves.toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.queries.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":70,"fix":{"range":[186,220],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":11,"endColumn":84,"fix":{"range":[259,304],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":12,"column":1,"nodeType":"ImportDeclaration","endLine":12,"endColumn":86,"fix":{"range":[340,390],"text":"@/src/domain/services/BookmarkService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":13,"column":1,"nodeType":"ImportDeclaration","endLine":13,"endColumn":93,"fix":{"range":[427,483],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import {\n  createMockBookmarkRepository,\n  createMockVerseRepository,\n  userId,\n  surahId,\n  ayahNumber,\n  verseId,\n  bookmarkId,\n} from './test-utils';\nimport { Bookmark, Verse } from '../../../../../src/domain/entities';\nimport { VerseNotFoundError } from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkService } from '../../../../../src/domain/services/BookmarkService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkService queries', () => {\n  let service: BookmarkService;\n  let mockBookmarkRepo = createMockBookmarkRepository();\n  let mockVerseRepo = createMockVerseRepository();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockBookmarkRepo = createMockBookmarkRepository();\n    mockVerseRepo = createMockVerseRepository();\n    service = new BookmarkService(mockBookmarkRepo, mockVerseRepo);\n  });\n\n  // moved to dedicated test file\n\n  it('getBookmarksWithVerses returns bookmarks with verses', async () => {\n    const base = new Bookmark(\n      bookmarkId,\n      userId,\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    const verse = new Verse(verseId, surahId, ayahNumber, 'text', 'uthmani');\n    mockBookmarkRepo.findByUser.mockResolvedValue([base]);\n    mockVerseRepo.findById.mockResolvedValue(verse);\n    const result = await service.getBookmarksWithVerses(userId);\n    expect(result[0]).toEqual({ bookmark: base, verse });\n  });\n\n  it('getBookmarksWithVerses throws when verse missing', async () => {\n    const base = new Bookmark(\n      bookmarkId,\n      userId,\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    mockBookmarkRepo.findByUser.mockResolvedValue([base]);\n    mockVerseRepo.findById.mockResolvedValue(null);\n    await expect(service.getBookmarksWithVerses(userId)).rejects.toThrow(VerseNotFoundError);\n  });\n\n  it('organizeBookmarksBySurah organizes and sorts', async () => {\n    const bookmarks = [\n      new Bookmark('b1', userId, 'v1', new BookmarkPosition(1, 3, new Date()), new Date()),\n      new Bookmark('b2', userId, 'v2', new BookmarkPosition(1, 1, new Date()), new Date()),\n      new Bookmark('b3', userId, 'v3', new BookmarkPosition(2, 5, new Date()), new Date()),\n    ];\n    mockBookmarkRepo.findByUser.mockResolvedValue(bookmarks);\n    const result = await service.organizeBookmarksBySurah(userId);\n    expect(result.get(1)?.map((b) => b.position.ayahNumber)).toEqual([1, 3]);\n    expect(result.get(2)?.length).toBe(1);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.removeBookmark.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":10,"column":1,"nodeType":"ImportDeclaration","endLine":10,"endColumn":63,"fix":{"range":[179,213],"text":"@/src/domain/entities"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":11,"column":1,"nodeType":"ImportDeclaration","endLine":14,"endColumn":56,"fix":{"range":[287,332],"text":"@/src/domain/errors/DomainErrors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":15,"column":1,"nodeType":"ImportDeclaration","endLine":15,"endColumn":86,"fix":{"range":[368,418],"text":"@/src/domain/services/BookmarkService"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":93,"fix":{"range":[455,511],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"import {\n  createMockBookmarkRepository,\n  createMockVerseRepository,\n  userId,\n  surahId,\n  ayahNumber,\n  verseId,\n  bookmarkId,\n} from './test-utils';\nimport { Bookmark } from '../../../../../src/domain/entities';\nimport {\n  BookmarkNotFoundError,\n  UnauthorizedBookmarkError,\n} from '../../../../../src/domain/errors/DomainErrors';\nimport { BookmarkService } from '../../../../../src/domain/services/BookmarkService';\nimport { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkService removeBookmark', () => {\n  let service: BookmarkService;\n  let mockBookmarkRepo = createMockBookmarkRepository();\n  let mockVerseRepo = createMockVerseRepository();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockBookmarkRepo = createMockBookmarkRepository();\n    mockVerseRepo = createMockVerseRepository();\n    service = new BookmarkService(mockBookmarkRepo, mockVerseRepo);\n  });\n\n  it('removes bookmark', async () => {\n    const base = new Bookmark(\n      bookmarkId,\n      userId,\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    mockBookmarkRepo.findById.mockResolvedValue(base);\n    await service.removeBookmark(userId, bookmarkId);\n    expect(mockBookmarkRepo.remove).toHaveBeenCalledWith(bookmarkId);\n  });\n\n  it('throws when missing', async () => {\n    mockBookmarkRepo.findById.mockResolvedValue(null);\n    await expect(service.removeBookmark(userId, bookmarkId)).rejects.toThrow(BookmarkNotFoundError);\n  });\n\n  it('throws on unauthorized removal', async () => {\n    const other = new Bookmark(\n      bookmarkId,\n      'other',\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    mockBookmarkRepo.findById.mockResolvedValue(other);\n    await expect(service.removeBookmark(userId, bookmarkId)).rejects.toThrow(\n      UnauthorizedBookmarkError\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":98,"fix":{"range":[37,95],"text":"@/src/domain/repositories/IBookmarkRepository"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":92,"fix":{"range":[132,187],"text":"@/src/domain/repositories/IVerseRepository"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { IBookmarkRepository } from '../../../../../src/domain/repositories/IBookmarkRepository';\nimport { IVerseRepository } from '../../../../../src/domain/repositories/IVerseRepository';\n\nexport const createMockBookmarkRepository = (): jest.Mocked<IBookmarkRepository> => ({\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  existsByUserAndVerse: jest.fn(),\n  findByUser: jest.fn(),\n  findByUserWithOptions: jest.fn(),\n  findRecent: jest.fn(),\n  findByVerse: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByPosition: jest.fn(),\n  findByTags: jest.fn(),\n  findWithNotes: jest.fn(),\n  findByDateRange: jest.fn(),\n  search: jest.fn(),\n  existsAtPosition: jest.fn(),\n  getCountByUser: jest.fn(),\n  getCountBySurah: jest.fn(),\n  getTagsByUser: jest.fn(),\n  getStatistics: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findNearPosition: jest.fn(),\n  saveMany: jest.fn(),\n  removeMany: jest.fn(),\n  removeAllByUser: jest.fn(),\n  removeBySurah: jest.fn(),\n  exportBookmarks: jest.fn(),\n  importBookmarks: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n});\n\nexport const createMockVerseRepository = (): jest.Mocked<IVerseRepository> => ({\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  findBySurahAndAyah: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByJuz: jest.fn(),\n  findByPage: jest.fn(),\n  findByHizb: jest.fn(),\n  findByRubAlHizb: jest.fn(),\n  search: jest.fn(),\n  findSajdahVerses: jest.fn(),\n  findFirstVerses: jest.fn(),\n  findByVerseKeys: jest.fn(),\n  findRandom: jest.fn(),\n  getTotalCount: jest.fn(),\n  getCountBySurah: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findWithTranslation: jest.fn(),\n  findByRevelationType: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n});\n\nexport const userId = 'user123';\nexport const surahId = 1;\nexport const ayahNumber = 1;\nexport const verseId = 'verse-1-1';\nexport const bookmarkId = 'bookmark123';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.classification.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition classification helpers', () => {\n  describe('isFirstVerse', () => {\n    it('returns true for ayah number 1', () => {\n      const position = new BookmarkPosition(5, 1, validTimestamp);\n\n      expect(position.isFirstVerse()).toBe(true);\n    });\n\n    it('returns false for ayah numbers greater than 1', () => {\n      const position = new BookmarkPosition(5, 2, validTimestamp);\n\n      expect(position.isFirstVerse()).toBe(false);\n    });\n  });\n\n  describe('isInSurah', () => {\n    it('returns true for matching Surah ID', () => {\n      const position = new BookmarkPosition(5, 10, validTimestamp);\n\n      expect(position.isInSurah(5)).toBe(true);\n    });\n\n    it('returns false for non-matching Surah ID', () => {\n      const position = new BookmarkPosition(5, 10, validTimestamp);\n\n      expect(position.isInSurah(6)).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.compareTo.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition compareTo', () => {\n  it('returns negative when this comes before other', () => {\n    const a = new BookmarkPosition(1, 5, validTimestamp);\n    const b = new BookmarkPosition(1, 6, validTimestamp);\n    expect(a.compareTo(b)).toBeLessThan(0);\n  });\n\n  it('returns positive when this comes after other', () => {\n    const a = new BookmarkPosition(1, 6, validTimestamp);\n    const b = new BookmarkPosition(1, 5, validTimestamp);\n    expect(a.compareTo(b)).toBeGreaterThan(0);\n  });\n\n  it('returns zero when positions are equal', () => {\n    const a = new BookmarkPosition(1, 5, validTimestamp);\n    const b = new BookmarkPosition(1, 5, new Date());\n    expect(a.compareTo(b)).toBe(0);\n  });\n\n  it('prioritizes Surah comparison over Ayah', () => {\n    const a = new BookmarkPosition(1, 100, validTimestamp);\n    const b = new BookmarkPosition(2, 1, validTimestamp);\n    expect(a.compareTo(b)).toBeLessThan(0);\n  });\n\n  it('handles different surahs correctly', () => {\n    const a = new BookmarkPosition(2, 1, validTimestamp);\n    const b = new BookmarkPosition(1, 7, validTimestamp);\n    expect(a.compareTo(b)).toBeGreaterThan(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.formatting.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition formatting & display', () => {\n  describe('toString and verseKey', () => {\n    it('returns correct verse key format', () => {\n      const position = new BookmarkPosition(2, 255, validTimestamp);\n\n      expect(position.toString()).toBe('2:255');\n      expect(position.verseKey).toBe('2:255');\n    });\n\n    it('handles single digit surah and ayah', () => {\n      const position = new BookmarkPosition(1, 1, validTimestamp);\n\n      expect(position.verseKey).toBe('1:1');\n    });\n\n    it('handles three digit surah', () => {\n      const position = new BookmarkPosition(114, 6, validTimestamp);\n\n      expect(position.verseKey).toBe('114:6');\n    });\n  });\n\n  describe('getDisplayText', () => {\n    it('returns human-readable description', () => {\n      const position = new BookmarkPosition(2, 255, validTimestamp);\n\n      expect(position.getDisplayText()).toBe('Surah 2, Verse 255');\n    });\n  });\n\n  describe('toPlainObject', () => {\n    it('returns plain object with all properties', () => {\n      const position = new BookmarkPosition(2, 255, validTimestamp);\n\n      const plainObject = position.toPlainObject();\n\n      expect(plainObject).toEqual({\n        surahId: 2,\n        ayahNumber: 255,\n        verseKey: '2:255',\n        timestamp: validTimestamp.toISOString(),\n        isFirstVerse: false,\n        displayText: 'Surah 2, Verse 255',\n      });\n    });\n\n    it('handles first verse correctly', () => {\n      const position = new BookmarkPosition(1, 1, validTimestamp);\n\n      const plainObject = position.toPlainObject();\n\n      expect(plainObject.isFirstVerse).toBe(true);\n      expect(plainObject.verseKey).toBe('1:1');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.methods.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[112,165],"text":"@/src/domain/value-objects/BookmarkPosition"}},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":31,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":31,"endColumn":57},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":34,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":34,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":37,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":37,"endColumn":60},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":40,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":40,"endColumn":58},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":43,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":43,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validSurahId, validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition methods', () => {\n  it('withNewTimestamp creates a new position with updated timestamp', () => {\n    const original = new BookmarkPosition(validSurahId, 5, validTimestamp);\n    const updated = original.withNewTimestamp();\n    expect(updated.surahId).toBe(original.surahId);\n    expect(updated.ayahNumber).toBe(original.ayahNumber);\n    expect(updated.timestamp).not.toBe(original.timestamp);\n    expect(updated).not.toBe(original);\n  });\n\n  describe('fromVerseKey', () => {\n    it('parses valid keys', () => {\n      const p1 = BookmarkPosition.fromVerseKey('2:255');\n      expect(p1.surahId).toBe(2);\n      expect(p1.ayahNumber).toBe(255);\n      expect(p1.verseKey).toBe('2:255');\n\n      const p2 = BookmarkPosition.fromVerseKey('1:1');\n      expect(p2.surahId).toBe(1);\n      expect(p2.ayahNumber).toBe(1);\n\n      const p3 = BookmarkPosition.fromVerseKey('114:6');\n      expect(p3.surahId).toBe(114);\n      expect(p3.ayahNumber).toBe(6);\n    });\n\n    it('throws on invalid formats', () => {\n      expect(() => BookmarkPosition.fromVerseKey('2255')).toThrow(\n        'Invalid verse key format. Expected \"surah:ayah\"'\n      );\n      expect(() => BookmarkPosition.fromVerseKey('2:255:extra')).toThrow(\n        'Invalid verse key format. Expected \"surah:ayah\"'\n      );\n      expect(() => BookmarkPosition.fromVerseKey('abc:255')).toThrow(\n        'Invalid verse key: surah and ayah must be numbers'\n      );\n      expect(() => BookmarkPosition.fromVerseKey('2:abc')).toThrow(\n        'Invalid verse key: surah and ayah must be numbers'\n      );\n      expect(() => BookmarkPosition.fromVerseKey(':255')).toThrow(\n        'Invalid verse key: surah and ayah must be numbers'\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.navigation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition navigation', () => {\n  describe('getNextVerse', () => {\n    it('should return next verse in same Surah', () => {\n      const position = new BookmarkPosition(1, 5, validTimestamp);\n      const nextPosition = position.getNextVerse(7); // Al-Fatiha has 7 verses\n\n      expect(nextPosition).toBeDefined();\n      expect(nextPosition!.surahId).toBe(1);\n      expect(nextPosition!.ayahNumber).toBe(6);\n    });\n\n    it('should return null for last verse of Surah', () => {\n      const position = new BookmarkPosition(1, 7, validTimestamp);\n      const nextPosition = position.getNextVerse(7); // Last verse of Al-Fatiha\n\n      expect(nextPosition).toBeNull();\n    });\n\n    it('should return null when current ayah equals max ayah', () => {\n      const position = new BookmarkPosition(2, 286, validTimestamp);\n      const nextPosition = position.getNextVerse(286); // Last verse of Al-Baqarah\n\n      expect(nextPosition).toBeNull();\n    });\n  });\n\n  describe('getPreviousVerse', () => {\n    it('should return previous verse in same Surah', () => {\n      const position = new BookmarkPosition(1, 5, validTimestamp);\n      const previousPosition = position.getPreviousVerse();\n\n      expect(previousPosition).toBeDefined();\n      expect(previousPosition!.surahId).toBe(1);\n      expect(previousPosition!.ayahNumber).toBe(4);\n    });\n\n    it('should return null for first verse of Surah', () => {\n      const position = new BookmarkPosition(1, 1, validTimestamp);\n      const previousPosition = position.getPreviousVerse();\n\n      expect(previousPosition).toBeNull();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.ordering.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition ordering', () => {\n  describe('isBefore', () => {\n    it('returns true when before another', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(1, 6, validTimestamp);\n      expect(a.isBefore(b)).toBe(true);\n    });\n\n    it('returns false when after another', () => {\n      const a = new BookmarkPosition(1, 6, validTimestamp);\n      const b = new BookmarkPosition(1, 5, validTimestamp);\n      expect(a.isBefore(b)).toBe(false);\n    });\n\n    it('handles cross-surah comparisons', () => {\n      const a = new BookmarkPosition(1, 7, validTimestamp);\n      const b = new BookmarkPosition(2, 1, validTimestamp);\n      expect(a.isBefore(b)).toBe(true);\n    });\n  });\n\n  describe('isAfter', () => {\n    it('returns true when after another', () => {\n      const a = new BookmarkPosition(1, 6, validTimestamp);\n      const b = new BookmarkPosition(1, 5, validTimestamp);\n      expect(a.isAfter(b)).toBe(true);\n    });\n\n    it('returns false when before another', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(1, 6, validTimestamp);\n      expect(a.isAfter(b)).toBe(false);\n    });\n\n    it('handles cross-surah comparisons', () => {\n      const a = new BookmarkPosition(1, 7, validTimestamp);\n      const b = new BookmarkPosition(2, 1, validTimestamp);\n      expect(b.isAfter(a)).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.rangeAndEquals.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition range and equals', () => {\n  describe('isWithinRange', () => {\n    it('returns true when range exceeds distance in same Surah', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(1, 3, validTimestamp);\n      expect(a.isWithinRange(b, 5)).toBe(true);\n    });\n\n    it('returns true when range equals distance in same Surah', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(1, 3, validTimestamp);\n      expect(a.isWithinRange(b, 2)).toBe(true);\n    });\n\n    it('returns false when outside range in same Surah', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(1, 6, validTimestamp);\n      expect(a.isWithinRange(b, 3)).toBe(false);\n    });\n\n    it('returns false for positions in different Surahs', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(2, 1, validTimestamp);\n      expect(a.isWithinRange(b, 100)).toBe(false);\n    });\n  });\n\n  describe('equals', () => {\n    it('returns true for same Surah and Ayah', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(1, 5, new Date());\n      expect(a.equals(b)).toBe(true);\n    });\n\n    it('returns false for different Surah', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(2, 5, validTimestamp);\n      expect(a.equals(b)).toBe(false);\n    });\n\n    it('returns false for different Ayah', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(1, 6, validTimestamp);\n      expect(a.equals(b)).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.surahAndDistance.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":90,"fix":{"range":[98,151],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validTimestamp } from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition surah and distance', () => {\n  describe('isInSameSurah', () => {\n    it('returns true for positions in same Surah', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(1, 7, validTimestamp);\n      expect(a.isInSameSurah(b)).toBe(true);\n    });\n\n    it('returns false for positions in different Surahs', () => {\n      const a = new BookmarkPosition(1, 7, validTimestamp);\n      const b = new BookmarkPosition(2, 1, validTimestamp);\n      expect(a.isInSameSurah(b)).toBe(false);\n    });\n  });\n\n  describe('getDistanceFrom', () => {\n    it('returns correct distance from earlier to later ayah', () => {\n      const start = new BookmarkPosition(1, 1, validTimestamp);\n      const end = new BookmarkPosition(1, 5, validTimestamp);\n      expect(start.getDistanceFrom(end)).toBe(4);\n    });\n\n    it('returns correct distance from later to earlier ayah', () => {\n      const end = new BookmarkPosition(1, 5, validTimestamp);\n      const start = new BookmarkPosition(1, 1, validTimestamp);\n      expect(end.getDistanceFrom(start)).toBe(4);\n    });\n\n    it('returns null for positions in different Surahs', () => {\n      const a = new BookmarkPosition(1, 1, validTimestamp);\n      const b = new BookmarkPosition(2, 1, validTimestamp);\n      expect(a.getDistanceFrom(b)).toBeNull();\n    });\n\n    it('returns 0 for same positions', () => {\n      const a = new BookmarkPosition(1, 5, validTimestamp);\n      const b = new BookmarkPosition(1, 5, new Date());\n      expect(a.getDistanceFrom(b)).toBe(0);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.validation.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":7,"column":1,"nodeType":"ImportDeclaration","endLine":7,"endColumn":90,"fix":{"range":[169,222],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validSurahId,\n  validAyahNumber,\n  validTimestamp,\n  expectBookmarkPositionToThrow,\n} from './BookmarkPosition/test-utils';\nimport { BookmarkPosition } from '../../../../src/domain/value-objects/BookmarkPosition';\n\ndescribe('BookmarkPosition constructor validation', () => {\n  it('creates a valid BookmarkPosition with all parameters', () => {\n    const position = new BookmarkPosition(validSurahId, validAyahNumber, validTimestamp);\n    expect(position.surahId).toBe(validSurahId);\n    expect(position.ayahNumber).toBe(validAyahNumber);\n    expect(position.timestamp).toBe(validTimestamp);\n  });\n\n  it('throws error for invalid Surah ID below 1', () => {\n    expectBookmarkPositionToThrow(\n      0,\n      validAyahNumber,\n      validTimestamp,\n      'Invalid Surah ID: must be between 1 and 114'\n    );\n  });\n\n  it('throws error for invalid Surah ID above 114', () => {\n    expectBookmarkPositionToThrow(\n      115,\n      validAyahNumber,\n      validTimestamp,\n      'Invalid Surah ID: must be between 1 and 114'\n    );\n  });\n\n  it('throws error for invalid Ayah number below 1', () => {\n    expectBookmarkPositionToThrow(validSurahId, 0, validTimestamp, 'Ayah number must be positive');\n  });\n\n  it('throws error when timestamp is null/undefined', () => {\n    expectBookmarkPositionToThrow(validSurahId, validAyahNumber, null, 'Timestamp is required');\n    expectBookmarkPositionToThrow(\n      validSurahId,\n      validAyahNumber,\n      undefined,\n      'Timestamp is required'\n    );\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":93,"fix":{"range":[34,90],"text":"@/src/domain/value-objects/BookmarkPosition"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { BookmarkPosition } from '../../../../../src/domain/value-objects/BookmarkPosition';\n\nexport const validSurahId = 1;\nexport const validAyahNumber = 1;\nexport const validTimestamp = new Date('2024-01-01T10:00:00Z');\n\nexport const expectBookmarkPositionToThrow = (\n  surahId: number,\n  ayahNumber: number,\n  timestamp: Date | null | undefined,\n  expectedMessage: string\n): void => {\n  const createPosition = (): BookmarkPosition =>\n    new BookmarkPosition(surahId, ayahNumber, timestamp as Date);\n  expect(createPosition).toThrow(expectedMessage);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.equalsAndPlainObject.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":80,"fix":{"range":[109,157],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validId, validResourceId, validText } from './Translation/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Translation equals and toPlainObject', () => {\n  it('equals returns true for same id/resourceId and false otherwise', () => {\n    const t1 = new Translation(1, 131, 'Text 1');\n    const t2 = new Translation(1, 131, 'Text 2');\n    expect(t1.equals(t2)).toBe(true);\n\n    const cases: Array<[Translation, Translation]> = [\n      [new Translation(1, 131, validText), new Translation(2, 131, validText)],\n      [new Translation(1, 131, validText), new Translation(1, 132, validText)],\n      [new Translation(1, 131, validText), new Translation(2, 132, validText)],\n    ];\n    cases.forEach(([a, b]) => expect(a.equals(b)).toBe(false));\n  });\n\n  it('toPlainObject returns full snapshot with computed values', () => {\n    const t = new Translation(\n      validId,\n      validResourceId,\n      'This is a test translation with multiple words',\n      'en-US'\n    );\n    expect(t.toPlainObject()).toEqual({\n      id: validId,\n      resourceId: validResourceId,\n      text: 'This is a test translation with multiple words',\n      languageCode: 'en-US',\n      wordCount: 8,\n      characterCount: 46,\n      isEnglish: true,\n      isLong: false,\n      preview: 'This is a test translation with multiple words',\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.languageAndContains.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":80,"fix":{"range":[117,165],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validId, validResourceId, testLanguageCodes } from './Translation/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Translation language and contains', () => {\n  it('detects English language codes', () => {\n    testLanguageCodes(['en', 'en-US', 'en-GB', 'EN'], true);\n  });\n\n  it('detects non-English language codes', () => {\n    testLanguageCodes(['ar', 'fr', 'es', 'de', 'ur', 'fa'], false);\n  });\n\n  it('contains matches exact, partial, and case-insensitive text', () => {\n    const t = new Translation(validId, validResourceId, 'In the name of Allah');\n    expect(t.contains('In the name of Allah')).toBe(true);\n    ['in the', 'ALLAH', 'name of'].forEach((q) => expect(t.contains(q)).toBe(true));\n    ['Goodbye', 'xyz'].forEach((q) => expect(t.contains(q)).toBe(false));\n    expect(t.contains('')).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.parsing.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":80,"fix":{"range":[165,213],"text":"@/src/domain/value-objects/Translation"}},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (69). Maximum allowed is 50.","line":10,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":85,"endColumn":2},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (67). Maximum allowed is 50.","line":11,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":84,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import {\n  validId,\n  validResourceId,\n  validText,\n  validLanguageCode,\n  expectTranslationToThrow,\n} from './Translation/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Translation Parsing and Validation', () => {\n  describe('constructor', () => {\n    it('creates a valid Translation with all parameters', () => {\n      const translation = new Translation(validId, validResourceId, validText, validLanguageCode);\n      expect(translation.id).toBe(validId);\n      expect(translation.resourceId).toBe(validResourceId);\n      expect(translation.text).toBe(validText);\n      expect(translation.languageCode).toBe(validLanguageCode);\n    });\n\n    it('creates a Translation with default language code', () => {\n      const translation = new Translation(validId, validResourceId, validText);\n      expect(translation.languageCode).toBe('en');\n    });\n\n    it('throws error for negative ID', () => {\n      expectTranslationToThrow({\n        id: -1,\n        resourceId: validResourceId,\n        text: validText,\n        languageCode: validLanguageCode,\n        expectedMessage: 'Translation ID must be non-negative',\n      });\n    });\n\n    it('throws error for negative resource ID', () => {\n      expectTranslationToThrow({\n        id: validId,\n        resourceId: -1,\n        text: validText,\n        languageCode: validLanguageCode,\n        expectedMessage: 'Resource ID must be non-negative',\n      });\n    });\n\n    it('throws error for empty text', () => {\n      expectTranslationToThrow({\n        id: validId,\n        resourceId: validResourceId,\n        text: '',\n        languageCode: validLanguageCode,\n        expectedMessage: 'Translation text cannot be empty',\n      });\n    });\n\n    it('throws error for whitespace-only text', () => {\n      expectTranslationToThrow({\n        id: validId,\n        resourceId: validResourceId,\n        text: '   ',\n        languageCode: validLanguageCode,\n        expectedMessage: 'Translation text cannot be empty',\n      });\n    });\n\n    it('throws error for empty language code', () => {\n      expectTranslationToThrow({\n        id: validId,\n        resourceId: validResourceId,\n        text: validText,\n        languageCode: '',\n        expectedMessage: 'Language code cannot be empty',\n      });\n    });\n\n    it('throws error for whitespace-only language code', () => {\n      expectTranslationToThrow({\n        id: validId,\n        resourceId: validResourceId,\n        text: validText,\n        languageCode: '   ',\n        expectedMessage: 'Language code cannot be empty',\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.previewAndLength.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":80,"fix":{"range":[98,146],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validId, validResourceId } from './Translation/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Translation preview and length', () => {\n  it('getPreview returns full text when within limit and truncates long text', () => {\n    const short = new Translation(validId, validResourceId, 'Short text here');\n    expect(short.getPreview(5)).toBe('Short text here');\n\n    const longText = 'This is a very long text that should be truncated when preview is requested';\n    const long = new Translation(validId, validResourceId, longText);\n    expect(long.getPreview(5)).toBe('This is a very long...');\n  });\n\n  it('uses default word limit of 10', () => {\n    const text = 'This is a very long text that has more than ten words in it';\n    const t = new Translation(validId, validResourceId, text);\n    expect(t.getPreview()).toBe('This is a very long text that has more than...');\n  });\n\n  it('handles exactly the word limit', () => {\n    const t = new Translation(validId, validResourceId, 'One two three four five');\n    expect(t.getPreview(5)).toBe('One two three four five');\n  });\n\n  it('isLong detects long translations', () => {\n    const long = new Translation(validId, validResourceId, Array(51).fill('word').join(' '));\n    expect(long.isLong()).toBe(true);\n    const notLong = new Translation(validId, validResourceId, Array(50).fill('word').join(' '));\n    expect(notLong.isLong()).toBe(false);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.wordAndCharCount.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":80,"fix":{"range":[98,146],"text":"@/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { validId, validResourceId } from './Translation/test-utils';\nimport { Translation } from '../../../../src/domain/value-objects/Translation';\n\ndescribe('Translation word and character count', () => {\n  it('counts words across variations', () => {\n    const cases: Array<[string, number]> = [\n      ['In the name of Allah, the Beneficent, the Merciful.', 9],\n      ['In   the    name  of   Allah', 5],\n      ['  In the name of Allah  ', 5],\n      ['Allah', 1],\n    ];\n    cases.forEach(([text, expected]) => {\n      const t = new Translation(validId, validResourceId, text);\n      expect(t.getWordCount()).toBe(expected);\n    });\n  });\n\n  it('returns correct character count including spaces', () => {\n    const t1 = new Translation(validId, validResourceId, 'Hello World');\n    expect(t1.getCharacterCount()).toBe(11);\n    const t2 = new Translation(validId, validResourceId, 'a');\n    expect(t2.getCharacterCount()).toBe(1);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation/test-utils.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":80,"fix":{"range":[29,77],"text":"@/tests/src/domain/value-objects/Translation"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Translation } from '../../../../src/domain/value-objects/Translation';\n\nexport const validId = 1;\nexport const validResourceId = 131;\nexport const validText = 'In the name of Allah, the Beneficent, the Merciful.';\nexport const validLanguageCode = 'en';\n\nexport type ExpectTranslationParams = {\n  id: number;\n  resourceId: number;\n  text: string;\n  languageCode: string;\n  expectedMessage: string;\n};\n\nexport const expectTranslationToThrow = ({\n  id,\n  resourceId,\n  text,\n  languageCode,\n  expectedMessage,\n}: ExpectTranslationParams): void => {\n  const createTranslation = (): Translation => new Translation(id, resourceId, text, languageCode);\n  expect(createTranslation).toThrow(expectedMessage);\n};\n\nexport const testLanguageCodes = (codes: string[], expectedResult: boolean): void => {\n  codes.forEach((code) => {\n    const translation = new Translation(validId, validResourceId, validText, code);\n    expect(translation.isEnglish()).toBe(expectedResult);\n  });\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/errors/ErrorHandler.actions1.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":5,"endColumn":48,"fix":{"range":[70,107],"text":"@/src/infrastructure/errors"}},{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":6,"column":1,"nodeType":"ImportDeclaration","endLine":6,"endColumn":95,"fix":{"range":[161,202],"text":"@/src/infrastructure/monitoring"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import {\n  AuthenticationError,\n  AudioError,\n  ErrorHandler,\n} from '../../../../src/infrastructure/errors';\nimport { logger, MemoryTransport, LogLevel } from '../../../../src/infrastructure/monitoring';\n\ndescribe('ErrorHandler action logging (auth/audio)', () => {\n  let memory: MemoryTransport;\n\n  beforeEach(() => {\n    memory = new MemoryTransport();\n    logger.addTransport(memory);\n  });\n\n  afterEach(() => {\n    logger.removeTransport(memory);\n    memory.clear();\n  });\n\n  it('logs info when sign in action is executed', async () => {\n    const notifier = jest.fn();\n    ErrorHandler.configure({ notifier, logger: jest.fn(), reporter: jest.fn() });\n\n    const error = new AuthenticationError();\n    await ErrorHandler.handle(error, {\n      showUserNotification: true,\n      logError: false,\n      reportError: false,\n    });\n\n    const notification = notifier.mock.calls[0][0];\n    notification.actions?.[0].action();\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.INFO);\n    expect(entries[0].message).toBe('Redirect to sign in');\n  });\n\n  it('logs info when audio retry action is executed', async () => {\n    const notifier = jest.fn();\n    ErrorHandler.configure({ notifier, logger: jest.fn(), reporter: jest.fn() });\n\n    const error = new AudioError('Playback failed');\n    await ErrorHandler.handle(error, {\n      showUserNotification: true,\n      logError: false,\n      reportError: false,\n    });\n\n    const notification = notifier.mock.calls[0][0];\n    notification.actions?.[0].action();\n\n    const entries = memory.getEntries();\n    expect(entries).toHaveLength(1);\n    expect(entries[0].level).toBe(LogLevel.INFO);\n    expect(entries[0].message).toBe('Retry audio playback');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/errors/ErrorHandler.actions2.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":1,"column":1,"nodeType":"ImportDeclaration","endLine":1,"endColumn":84,"fix":{"range":[44,81],"text":"@/src/infrastructure/errors"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { NetworkError, ErrorHandler } from '../../../../src/infrastructure/errors';\n\ndescribe('ErrorHandler action logging (network)', () => {\n  it('executes no-op retry callback by default for network errors', async () => {\n    const notifier = jest.fn();\n    ErrorHandler.configure({ notifier, logger: jest.fn(), reporter: jest.fn() });\n\n    const error = new NetworkError('Failed');\n    await ErrorHandler.handle(error, {\n      showUserNotification: true,\n      logError: false,\n      reportError: false,\n    });\n\n    const notification = notifier.mock.calls[0][0];\n    expect(() => notification.actions?.[0].action()).not.toThrow();\n  });\n\n  it('uses injected retry callback for network errors', async () => {\n    const notifier = jest.fn();\n    const refresh = jest.fn();\n    ErrorHandler.configure({\n      notifier,\n      logger: jest.fn(),\n      reporter: jest.fn(),\n      retryCallback: refresh,\n    });\n\n    const error = new NetworkError('Failed');\n    await ErrorHandler.handle(error, {\n      showUserNotification: true,\n      logError: false,\n      reportError: false,\n    });\n\n    const notification = notifier.mock.calls[0][0];\n    notification.actions?.[0].action();\n    expect(refresh).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/MemoryTransport.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteErrorTracker.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":63,"fix":{"range":[99,125],"text":"@/lib/api/client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { RemoteErrorTracker, logger } from '@infra/monitoring';\n\nimport { fetchWithTimeout } from '../../../../lib/api/client';\n\njest.mock('../../../../lib/api/client', () => ({\n  fetchWithTimeout: jest.fn(),\n}));\n\ndescribe('RemoteErrorTracker', () => {\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('flushes buffered events to endpoint', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock.mockResolvedValue({ ok: true } as Response);\n\n    const tracker = new RemoteErrorTracker('https://example.com');\n    tracker.captureMessage('hello');\n    await tracker.flush();\n\n    expect(fetchMock).toHaveBeenCalled();\n    const body = JSON.parse(fetchMock.mock.calls[0][1]?.body as string);\n    expect(body.events).toHaveLength(1);\n\n    tracker.destroy();\n  });\n\n  it('retries failed requests', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock\n      .mockRejectedValueOnce(new Error('network'))\n      .mockResolvedValueOnce({ ok: true } as Response);\n    const warnMock = jest.spyOn(logger, 'warn').mockImplementation(() => undefined);\n\n    const tracker = new RemoteErrorTracker('https://example.com');\n    tracker.captureMessage('hello');\n    await tracker.flush();\n\n    expect(warnMock).toHaveBeenCalled();\n\n    await tracker.flush();\n    expect(fetchMock).toHaveBeenCalledTimes(2);\n\n    tracker.destroy();\n  });\n\n  it('aborts long-running requests and retries', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock\n      .mockRejectedValueOnce(new DOMException('Aborted', 'AbortError'))\n      .mockResolvedValueOnce({ ok: true } as Response);\n    const warnMock = jest.spyOn(logger, 'warn').mockImplementation(() => undefined);\n\n    const tracker = new RemoteErrorTracker('https://example.com');\n    tracker.captureMessage('hello');\n    await tracker.flush();\n\n    expect(warnMock).toHaveBeenCalled();\n\n    await tracker.flush();\n    expect(fetchMock).toHaveBeenCalledTimes(2);\n\n    tracker.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteTransport.flushing.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":63,"fix":{"range":[113,139],"text":"@/lib/api/client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { RemoteTransport, LogLevel, type LogEntry } from '@infra/monitoring';\n\nimport { fetchWithTimeout } from '../../../../lib/api/client';\n\njest.mock('../../../../lib/api/client', () => ({\n  fetchWithTimeout: jest.fn(),\n}));\n\ndescribe('RemoteTransport flushing', () => {\n  const createEntry = (level: LogLevel = LogLevel.INFO): LogEntry => ({\n    level,\n    message: 'msg',\n    timestamp: new Date(),\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('flushes buffered logs to endpoint', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock.mockResolvedValue({ ok: true } as Response);\n\n    const transport = new RemoteTransport('https://example.com');\n    const entry = createEntry();\n    transport.log(entry);\n    await transport.flush();\n\n    expect(fetchMock).toHaveBeenCalled();\n    const body = JSON.parse(fetchMock.mock.calls[0][1]?.body as string);\n    expect(body.entries).toHaveLength(1);\n    transport.destroy();\n  });\n\n  it('flushes immediately on error level', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock.mockResolvedValue({ ok: true } as Response);\n\n    const transport = new RemoteTransport('https://example.com');\n    transport.log(createEntry(LogLevel.ERROR));\n    await new Promise((resolve) => setTimeout(resolve, 0));\n\n    expect(fetchMock).toHaveBeenCalled();\n    transport.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteTransport.retries.test.ts","messages":[{"ruleId":"no-relative-import-paths/no-relative-import-paths","severity":1,"message":"import statements should have an absolute path","line":3,"column":1,"nodeType":"ImportDeclaration","endLine":3,"endColumn":63,"fix":{"range":[121,147],"text":"@/lib/api/client"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { RemoteTransport, LogLevel, type LogEntry, logger } from '@infra/monitoring';\n\nimport { fetchWithTimeout } from '../../../../lib/api/client';\n\njest.mock('../../../../lib/api/client', () => ({\n  fetchWithTimeout: jest.fn(),\n}));\n\ndescribe('RemoteTransport retries', () => {\n  const createEntry = (level: LogLevel = LogLevel.INFO): LogEntry => ({\n    level,\n    message: 'msg',\n    timestamp: new Date(),\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('retries failed requests', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock\n      .mockRejectedValueOnce(new Error('network'))\n      .mockResolvedValueOnce({ ok: true } as Response);\n    const warnMock = jest.spyOn(logger, 'warn').mockImplementation(() => undefined);\n\n    const transport = new RemoteTransport('https://example.com');\n    transport.log(createEntry());\n    await transport.flush();\n\n    expect(warnMock).toHaveBeenCalled();\n\n    await transport.flush();\n    expect(fetchMock).toHaveBeenCalledTimes(2);\n    const body = JSON.parse(fetchMock.mock.calls[1][1]?.body as string);\n    expect(body.entries).toHaveLength(1);\n    transport.destroy();\n  });\n\n  it('aborts long-running requests and retries', async () => {\n    const fetchMock = fetchWithTimeout as jest.Mock;\n    fetchMock\n      .mockRejectedValueOnce(new DOMException('Aborted', 'AbortError'))\n      .mockResolvedValueOnce({ ok: true } as Response);\n    const warnMock = jest.spyOn(logger, 'warn').mockImplementation(() => undefined);\n\n    const transport = new RemoteTransport('https://example.com');\n    transport.log(createEntry());\n    await transport.flush();\n\n    expect(warnMock).toHaveBeenCalled();\n    await transport.flush();\n    expect(fetchMock).toHaveBeenCalledTimes(2);\n    transport.destroy();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/eslint/no-raw-color-classes.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/eslint/no-theme-conditionals.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/fetchData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generate-component.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generate-tokens.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":39,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":39,"endColumn":12,"suggestions":[{"fix":{"range":[1149,1188],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync, writeFileSync } from 'fs';\nimport path from 'path';\n\nfunction hexToRgb(hex: string): string {\n  const sanitized = hex.replace('#', '');\n  const bigint = parseInt(sanitized, 16);\n  const r = (bigint >> 16) & 255;\n  const g = (bigint >> 8) & 255;\n  const b = bigint & 255;\n  return `${r} ${g} ${b}`;\n}\n\nfunction kebabCase(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nconst designSystemPath = path.resolve('design-system.json');\nconst themePath = path.resolve('app/theme.css');\n\nconst design = JSON.parse(readFileSync(designSystemPath, 'utf8'));\nconst colors = design.colors as Record<string, string>;\n\nconst baseKeys = Object.keys(colors).filter((key) => !key.endsWith('Dark'));\n\nconst rootVars = baseKeys\n  .map((key) => `  --color-${kebabCase(key)}: ${hexToRgb(colors[key])};`)\n  .join('\\n');\n\nconst darkVars = baseKeys\n  .map((key) => {\n    const darkKey = `${key}Dark`;\n    return `  --color-${kebabCase(key)}: ${hexToRgb(colors[darkKey] || colors[key])};`;\n  })\n  .join('\\n');\n\nconst css = `:root {\\n${rootVars}\\n}\\n\\n.dark {\\n${darkVars}\\n}\\n`;\n\nwriteFileSync(themePath, css);\nconsole.log('Generated theme tokens.');\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generateFeature.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":97,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":97,"endColumn":14,"suggestions":[{"fix":{"range":[2882,2935],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Scaffolds a new feature page along with a basic test file.\n *\n * Expects a kebab-case feature name as the first CLI argument and generates:\n * - `app/(features)/<name>/page.tsx`\n * - `app/(features)/<name>/components/.gitkeep`\n * - `app/(features)/<name>/__tests__/<Pascal>Page.test.tsx`\n */\n\nimport { mkdir, writeFile } from 'fs/promises';\n\nfunction toPascalCase(name: string): string {\n  return name\n    .split(/[-_]/)\n    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n    .join('');\n}\n\nasync function main(): Promise<void> {\n  const name = process.argv[2];\n  if (!name) {\n    console.error('Usage: ts-node scripts/generateFeature.ts <name>');\n    process.exit(1);\n  }\n\n  const pascal = toPascalCase(name);\n  const dir = `app/(features)/${name}`;\n  await mkdir(dir, { recursive: true });\n  await Promise.all([\n    mkdir(`${dir}/context`, { recursive: true }),\n    mkdir(`${dir}/hooks`, { recursive: true }),\n    mkdir(`${dir}/lib`, { recursive: true }),\n    mkdir(`${dir}/components`, { recursive: true }),\n    mkdir(`${dir}/__tests__`, { recursive: true }),\n  ]);\n  await Promise.all([\n    writeFile(`${dir}/context/.gitkeep`, ''),\n    writeFile(`${dir}/hooks/.gitkeep`, ''),\n    writeFile(`${dir}/lib/.gitkeep`, ''),\n    writeFile(`${dir}/components/.gitkeep`, ''),\n  ]);\n\n  const page = `// ${dir}/page.tsx\n'use client';\nimport { useEffect, useState } from 'react';\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { getRandomVerse } from '@/lib/api';\nimport { Verse } from '@/types';\n\nexport const ${pascal}Page = () => {\n  const { settings } = useSettings();\n  const [verse, setVerse] = useState<Verse | null>(null);\n\n  useEffect(() => {\n    getRandomVerse(settings.translationId).then(setVerse);\n  }, [settings.translationId]);\n\n  if (!verse) return <p>Loading...</p>;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">${pascal}</h1>\n      <p>{verse.text_uthmani}</p>\n    </div>\n  );\n};\n`;\n\n  await writeFile(`${dir}/page.tsx`, page);\n\n  const test = `import { render, screen } from '@testing-library/react';\nimport { SettingsProvider } from '@/app/providers/SettingsContext';\nimport * as api from '@/lib/api';\nimport { Verse } from '@/types';\nimport { ${pascal}Page } from '@/app/(features)/${name}/page';\n\njest.mock('react-i18next', () => ({ useTranslation: () => ({ t: (key: string) => key }) }));\njest.mock('@/lib/api');\n\nconst mockVerse: Verse = { id: 1, verse_key: '1:1', text_uthmani: '${name} verse', words: [] } as Verse;\n\nbeforeEach(() => {\n  (api.getRandomVerse as jest.Mock).mockResolvedValue(mockVerse);\n});\n\ntest('renders API data', async () => {\n  render(\n    <SettingsProvider>\n      <${pascal}Page />\n    </SettingsProvider>\n  );\n  expect(await screen.findByText('${name} verse')).toBeInTheDocument();\n});\n`;\n\n  await writeFile(`${dir}/__tests__/${pascal}Page.test.tsx`, test);\n  console.log(`Generated feature '${name}' at ${dir}`);\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/migrate-tokens.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/rg.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/validate-tokens.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":122,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":122,"endColumn":12,"suggestions":[{"fix":{"range":[2588,2655],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readdirSync, readFileSync } from 'fs';\nimport path from 'path';\n\nfunction kebabCase(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nconst designPath = path.resolve(__dirname, '..', 'design-system.json');\nconst design = JSON.parse(readFileSync(designPath, 'utf8'));\nconst allowedTokens = new Set(\n  Object.keys(design.colors)\n    .filter((key) => !key.endsWith('Dark'))\n    .map(kebabCase)\n);\n\nconst ignore: Record<string, Set<string>> = {\n  text: new Set([\n    'center',\n    'left',\n    'right',\n    'justify',\n    'start',\n    'end',\n    'xs',\n    'sm',\n    'base',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n    '6xl',\n    '7xl',\n    '8xl',\n    '9xl',\n  ]),\n  bg: new Set([\n    'cover',\n    'contain',\n    'center',\n    'fixed',\n    'local',\n    'no-repeat',\n    'repeat',\n    'repeat-x',\n    'repeat-y',\n    'auto',\n    'bottom',\n    'top',\n    'left',\n    'right',\n  ]),\n  border: new Set([\n    '0',\n    '2',\n    '4',\n    '8',\n    't',\n    'b',\n    'l',\n    'r',\n    'x',\n    'y',\n    'solid',\n    'dashed',\n    'double',\n    'collapse',\n    'separate',\n  ]),\n};\n\nconst tokenRegex = /(bg|text|border)-([a-zA-Z0-9-]+)/g;\n\nfunction getFiles(dir: string): string[] {\n  const entries = readdirSync(dir, { withFileTypes: true });\n  const files: string[] = [];\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n    if (entry.isDirectory()) {\n      if (['node_modules', '.git', '.next', 'public'].includes(entry.name)) {\n        continue;\n      }\n      files.push(...getFiles(fullPath));\n    } else if (/\\.(ts|tsx|js|jsx)$/.test(entry.name)) {\n      files.push(fullPath);\n    }\n  }\n  return files;\n}\n\nconst rootDir = path.resolve(__dirname, '..');\nconst files = getFiles(rootDir);\nconst undefinedTokens: Record<string, Set<string>> = {};\n\nfor (const file of files) {\n  const content = readFileSync(file, 'utf8');\n  let match: RegExpExecArray | null;\n  while ((match = tokenRegex.exec(content))) {\n    const prefix = match[1];\n    const token = match[2];\n    if (ignore[prefix]?.has(token)) continue;\n    if (!allowedTokens.has(token)) {\n      const key = `${prefix}-${token}`;\n      undefinedTokens[key] ||= new Set();\n      undefinedTokens[key].add(path.relative(rootDir, file));\n    }\n  }\n}\n\nif (Object.keys(undefinedTokens).length > 0) {\n  console.error('Undefined design tokens found:');\n  for (const [token, files] of Object.entries(undefinedTokens)) {\n    console.error(`  ${token}`);\n    for (const f of files) {\n      console.error(`    - ${f}`);\n    }\n  }\n  process.exit(1);\n}\n\nconsole.log('All token classes are defined in design-system.json');\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/bookmark.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/chapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/juz.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/quran-meta.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/surah.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/translation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/word.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
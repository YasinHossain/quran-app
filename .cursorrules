# Cursor AI Rules for Quran App

## Project Context
This is a Next.js 15 Quran reading app with TypeScript, Tailwind CSS, and comprehensive testing.

## Core Rules

### 1. Styling & Design System
- ALWAYS use semantic design tokens: `bg-surface`, `text-foreground`, `bg-accent`, `border-border`
- NEVER use hardcoded colors or theme conditionals in JSX
- Prefer existing UI components from `app/shared/ui/`
- Use className overrides for custom styling when needed

### 2. Component Patterns
- Follow feature-based architecture under `app/(features)/`
- Use established component patterns and interfaces
- Place feature components in `components/` subfolder
- Custom hooks go in `hooks/` subfolder

### 3. State Management
- Use `useUIState()` for panels, modals, sidebars
- Use `useSettings()` for app configuration
- Use `useState()` only for local component state
- Avoid creating new global contexts in feature folders

### 4. File Organization
- Tests in `__tests__/` folders next to components
- Named exports preferred (except page.tsx/layout.tsx)
- Follow existing import/export patterns
- Update relevant AGENTS.md files when adding features

### 5. Quality Standards
- Write tests for new components and hooks
- Maintain TypeScript strict mode compliance
- Use semantic HTML and proper ARIA labels
- Consider performance and accessibility

## Common Components

```typescript
// UI Components
import { Button, Panel, TabToggle } from '@/app/shared/ui';

// State Hooks
import { useUIState } from '@/app/providers/UIStateContext';
import { useSettings } from '@/app/providers/SettingsContext';

// Testing
import { renderWithProviders } from '@/app/testUtils/renderWithProviders';
```

## Styling Examples

```typescript
// ✅ Correct - semantic tokens
<div className="bg-surface text-foreground border border-border">

// ✅ Correct - component variants
<Button variant="primary" size="md">Action</Button>

// ✅ Correct - custom styling with className
<Button variant="primary" className="bg-gradient-to-r from-blue-500 to-purple-600">

// ❌ Wrong - theme conditionals
<div className={theme === 'dark' ? 'bg-gray-800' : 'bg-white'}>

// ❌ Wrong - hardcoded colors
<div style={{ backgroundColor: '#1a202c' }}>
```

## Before Implementing
1. Check existing components in `app/shared/ui/`
2. Review similar features for patterns
3. Read feature-specific AGENTS.md files
4. Understand current state management approach

## Commands to Run
```bash
npm run check      # Run all quality checks
npm run test       # Run tests
npm run audit-styles  # Check style violations
```

## Key Directories
- `app/(features)/` - Feature-based routes
- `app/shared/ui/` - Reusable UI components
- `app/providers/` - Global state contexts
- `lib/` - Utilities and API helpers
- `types/` - TypeScript definitions

## Restrictions
- No theme conditionals in JSX
- No hardcoded colors or raw utility classes
- No new global contexts in feature folders
- No skipping tests for new components

Follow these rules to maintain code quality and consistency.
name: Secrets Scanning

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scanning:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection

      - name: Run TruffleHog OSS
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: true

      - name: Custom secret patterns check
        id: custom-secrets
        run: |
          echo "## Custom Secret Patterns Check" > secrets-report.md
          echo "" >> secrets-report.md

          # Define custom patterns for common secrets
          declare -A patterns=(
            ["API_KEY"]="['\"]?[A-Za-z0-9_-]*[aA][pP][iI]_?[kK][eE][yY]['\"]?\s*[:=]\s*['\"][A-Za-z0-9_-]{32,}['\"]"
            ["PRIVATE_KEY"]="-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
            ["QURAN_API_KEY"]="['\"]?[qQ][uU][rR][aA][nN]_?[aA][pP][iI]_?[kK][eE][yY]['\"]?\s*[:=]\s*['\"][A-Za-z0-9_-]{16,}['\"]"
            ["JWT_SECRET"]="['\"]?[jJ][wW][tT]_?[sS][eE][cC][rR][eE][tT]['\"]?\s*[:=]\s*['\"][A-Za-z0-9_-]{32,}['\"]"
            ["DATABASE_URL"]="['\"]?[dD][aA][tT][aA][bB][aA][sS][eE]_?[uU][rR][lL]['\"]?\s*[:=]\s*['\"]postgres://[^'\"]*['\"]"
            ["MONGODB_URI"]="['\"]?[mM][oO][nN][gG][oO][dD][bB]_?[uU][rR][iI]['\"]?\s*[:=]\s*['\"]mongodb://[^'\"]*['\"]"
          )

          FOUND_SECRETS=false

          for pattern_name in "${!patterns[@]}"; do
            pattern="${patterns[$pattern_name]}"
            
            # Search for pattern in all files
            if grep -rE "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=.next --exclude="*.md" > /dev/null 2>&1; then
              echo "⚠️ **Potential $pattern_name detected**" >> secrets-report.md
              echo "" >> secrets-report.md
              echo "<details>" >> secrets-report.md
              echo "<summary>View matches for $pattern_name</summary>" >> secrets-report.md
              echo "" >> secrets-report.md
              echo "\`\`\`" >> secrets-report.md
              grep -rE "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=.next --exclude="*.md" | head -10 >> secrets-report.md
              echo "\`\`\`" >> secrets-report.md
              echo "</details>" >> secrets-report.md
              echo "" >> secrets-report.md
              FOUND_SECRETS=true
            fi
          done

          # Check for common filename patterns that might contain secrets
          echo "### Checking for suspicious filenames..." >> secrets-report.md

          suspicious_files=$(find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*secret*" -o -name "*password*" -o -name "*.env.local" -o -name "*.env.production" \) 2>/dev/null | grep -v node_modules | head -10)

          if [ ! -z "$suspicious_files" ]; then
            echo "⚠️ **Suspicious files that might contain secrets:**" >> secrets-report.md
            echo "\`\`\`" >> secrets-report.md
            echo "$suspicious_files" >> secrets-report.md
            echo "\`\`\`" >> secrets-report.md
            FOUND_SECRETS=true
          fi

          if [ "$FOUND_SECRETS" = "false" ]; then
            echo "✅ **No custom secret patterns detected**" >> secrets-report.md
          fi

          echo "SECRETS_FOUND=$FOUND_SECRETS" >> $GITHUB_OUTPUT

      - name: Combine results and create report
        if: always()
        run: |
          echo "## Secrets Scanning Report" > final-report.md
          echo "" >> final-report.md
          echo "*Automated scan for secrets and sensitive information*" >> final-report.md
          echo "" >> final-report.md

          # Check TruffleHog results
          if [ "${{ steps.trufflehog.outcome }}" = "success" ]; then
            echo "✅ **TruffleHog**: No verified secrets found" >> final-report.md
          else
            echo "⚠️ **TruffleHog**: Potential secrets detected (check logs)" >> final-report.md
          fi

          # Check GitLeaks results
          if [ "${{ steps.gitleaks.outcome }}" = "success" ]; then
            echo "✅ **GitLeaks**: No secrets found" >> final-report.md
          else
            echo "⚠️ **GitLeaks**: Potential secrets detected (check logs)" >> final-report.md
          fi

          echo "" >> final-report.md

          # Append custom secrets check
          if [ -f secrets-report.md ]; then
            cat secrets-report.md >> final-report.md
          fi

          echo "" >> final-report.md
          echo "### Recommendations" >> final-report.md
          echo "1. Review any flagged files carefully" >> final-report.md
          echo "2. Remove any actual secrets from the repository" >> final-report.md
          echo "3. Use environment variables for sensitive configuration" >> final-report.md
          echo "4. Add sensitive files to \`.gitignore\`" >> final-report.md
          echo "5. Consider using secrets management tools (e.g., Azure Key Vault, AWS Secrets Manager)" >> final-report.md

      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let report;
            try {
              report = fs.readFileSync('final-report.md', 'utf8');
            } catch (error) {
              report = "## Secrets Scanning Report\n\n❌ **Scan failed to complete properly**";
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(
              comment => comment.body.includes('Secrets Scanning Report')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Upload scanning reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scanning-reports
          path: |
            final-report.md
            secrets-report.md
          retention-days: 90

      - name: Fail on secrets found
        if: steps.custom-secrets.outputs.SECRETS_FOUND == 'true' || steps.trufflehog.outcome == 'failure' || steps.gitleaks.outcome == 'failure'
        run: |
          echo "::error::Potential secrets detected in the repository!"
          echo "Please review the scanning report and remove any sensitive information."
          exit 1

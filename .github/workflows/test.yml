name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Unit and Integration Tests
  test-unit-integration:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 2: Build Tests
  test-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build size
        run: npm run size-limit

  # Job 3: E2E Tests
  test-e2e:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Job 4: Security Tests
  test-security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run audit:deps

      - name: Run dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Job 5: Code Quality
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Run style audits
        run: npm run audit-styles

      - name: Check for TODOs
        run: npm run search:todos || true # Don't fail build on TODOs

  # Job 6: Performance Tests
  test-performance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 7: Accessibility Tests
  test-accessibility:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run axe accessibility tests
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3000 --exit

  # Job 8: Domain Tests (Phase 4 specific)
  test-domain:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run domain entity tests
        run: npm test -- --testPathPatterns=tests/unit/domain/entities

      - name: Run domain service tests
        run: npm test -- --testPathPatterns=tests/unit/domain/services

      - name: Run repository integration tests
        run: npm test -- --testPathPatterns=tests/integration/repositories

      - name: Check domain test coverage
        run: |
          npm run test:coverage -- --testPathPatterns=tests/unit/domain --collectCoverageFrom='src/domain/**/*.ts' --coverageThreshold='{}'

  # Summary job to check all tests passed
  test-summary:
    runs-on: ubuntu-latest
    needs:
      - test-unit-integration
      - test-build
      - test-e2e
      - test-security
      - code-quality
      - test-performance
      - test-accessibility
      - test-domain
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test-unit-integration.result }}" != "success" ]]; then
            echo "Unit/Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.test-build.result }}" != "success" ]]; then
            echo "Build tests failed"
            exit 1
          fi
          if [[ "${{ needs.test-e2e.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.test-security.result }}" != "success" ]]; then
            echo "Security tests failed"
            exit 1
          fi
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "Code quality checks failed"
            exit 1
          fi
          if [[ "${{ needs.test-domain.result }}" != "success" ]]; then
            echo "Domain tests failed"
            exit 1
          fi
          # Performance and accessibility tests are allowed to fail without breaking the build
          echo "All critical tests passed!"

      - name: Post test summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Unit/Integration': '${{ needs.test-unit-integration.result }}',
              'Build': '${{ needs.test-build.result }}',
              'E2E': '${{ needs.test-e2e.result }}',
              'Security': '${{ needs.test-security.result }}',
              'Code Quality': '${{ needs.code-quality.result }}',
              'Performance': '${{ needs.test-performance.result }}',
              'Accessibility': '${{ needs.test-accessibility.result }}',
              'Domain': '${{ needs.test-domain.result }}'
            };

            let summary = "## Test Results Summary\n\n";
            for (const [test, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
              summary += `${icon} **${test}**: ${result}\n`;
            }

            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Summary',
              head_sha: context.sha,
              status: 'completed',
              conclusion: '${{ job.status }}',
              output: {
                title: 'Test Results',
                summary: summary
              }
            });

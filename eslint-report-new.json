
> quran-app-v1@0.2.0 lint
> eslint . --fix --format=json

[{"filePath":"/Users/yasinhossain/quran-app/.storybook/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/.storybook/preview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/BookmarkFolderClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/__tests__/BookmarkFolderClient.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BookmarkFolderView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BookmarkVersesContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/BreadcrumbNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/FolderNotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/MainContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/SettingsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/hooks/useBookmarkFolderPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/[folderId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/BookmarkFolderSidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/Bookmarks.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/LastReadPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/PinnedPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/__tests__/UseBookmarkFolderData.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkFolderContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkFolderSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkVerseSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarkedVersesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/BookmarksSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CircularProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CreateFolderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/CreateMemorizationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/DeleteFolderModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/EmptyStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderContextMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderSettingsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/FolderVerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahOption.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahSearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/SurahSelector.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (78). Maximum allowed is 50.","line":25,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":110,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\n\nimport { ChevronDownIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\nimport { Chapter } from '@/types';\n\nimport {\n  buildButtonClasses,\n  buildIconClasses,\n  renderSelectedContent,\n} from './surah-selector.helpers';\nimport { SurahDropdown } from './SurahDropdown';\n\ninterface SurahSelectorProps {\n  chapters: Chapter[];\n  value?: number;\n  onChange: (surahId: number) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n  id?: string;\n}\n\nexport const SurahSelector = ({\n  chapters,\n  value,\n  onChange,\n  placeholder = 'Select Surah',\n  disabled = false,\n  className,\n  id,\n}: SurahSelectorProps): React.JSX.Element => {\n  const [open, setOpen] = useState(false);\n  const [term, setTerm] = useState('');\n  const ref = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const selected = chapters.find((c) => c.id === value);\n\n  const closeDropdown = useCallback(() => {\n    setOpen(false);\n    setTerm('');\n  }, []);\n\n  const toggleOpen = useCallback(() => {\n    if (!disabled) setOpen((prev) => !prev);\n  }, [disabled]);\n\n  useEffect(() => {\n    if (!open) return;\n\n    const handleClick = (e: MouseEvent): void => {\n      if (ref.current && !ref.current.contains(e.target as Node)) {\n        closeDropdown();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClick);\n    const timer = setTimeout(() => inputRef.current?.focus(), 50);\n    return () => {\n      clearTimeout(timer);\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, [open, closeDropdown]);\n\n  const selectSurah = useCallback(\n    (c: Chapter): void => {\n      onChange(c.id);\n      closeDropdown();\n    },\n    [onChange, closeDropdown]\n  );\n\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent): void => {\n      if (e.key === 'Escape') {\n        closeDropdown();\n      }\n    },\n    [closeDropdown]\n  );\n\n  return (\n    <div className={cn('relative', className)} ref={ref}>\n      <button\n        type=\"button\"\n        id={id}\n        onClick={toggleOpen}\n        disabled={disabled}\n        className={buildButtonClasses(disabled, open)}\n      >\n        <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n          {renderSelectedContent(selected, placeholder)}\n        </div>\n        <ChevronDownIcon size={18} className={buildIconClasses(open)} />\n      </button>\n      {open && (\n        <SurahDropdown\n          chapters={chapters}\n          value={value}\n          searchTerm={term}\n          setSearchTerm={setTerm}\n          onSelect={selectSurah}\n          searchInputRef={inputRef}\n          handleKeyDown={handleKeyDown}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-list-view/VerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/SidebarHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/VerseItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmark-verse-sidebar/VerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/ChildrenSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/FolderSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/NavigationSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/bookmarks-content/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/FolderInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/QuickSuggestions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-folder-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/MemorizationForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/EstimatedDaysInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/FormActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/PlanNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/PlanStatistics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/SurahSelectionSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/create-memorization-modal/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/FolderPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalBody.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/WarningMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/delete-folder-modal/useDeleteFolder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/EmptyBookmarksComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/EmptySearchComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/empty-states/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/ModalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/SettingsForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings-modal/useFolderSettingsModalAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/ColorSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/FolderNameInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/IconSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/folder-settings/useFolderSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/HeaderActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/HeaderTitleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/SearchBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/header/SortDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarkCardComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarkListComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarksLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/BookmarksPageHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/ExpandedContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/FolderHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/FolderItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/shared/folder/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/components/surah-selector.helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkAudio.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkListState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarkVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useBookmarksPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/hooks/useFolderNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/LastReadHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/hooks/useLastReadPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/last-read/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/MemorizationHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/hooks/useMemorizationPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/memorization/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/PinnedHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/PinnedVersesList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/hooks/usePinnedPage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/bookmarks/pinned/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/HomePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/UseRandomVerse.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.fixtures.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.render.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/__tests__/VerseOfDay.transition.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomePageBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/HomeTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/JuzTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/PageTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/RenderStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahEmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahLoadingGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/SurahTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/ThemedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseErrorState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseLoadingState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/components/VerseOfDay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/__tests__/UseRandomVerse.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useFallbackVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useRandomVerse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useSurahName.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useSurahSearch.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useMemo, useState } from 'react';\n\nimport { getSurahList } from '@/lib/api';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport type { Surah } from '@/types';\n\nexport function useSurahSearch(searchQuery: string) {\n  const [surahs, setSurahs] = useState<Surah[]>([]);\n\n  useEffect(() => {\n    getSurahList()\n      .then(setSurahs)\n      .catch((err) => logger.error(err as Error));\n  }, []);\n\n  const filteredSurahs = useMemo(() => {\n    if (!searchQuery) return surahs;\n    return surahs.filter(\n      (surah) =>\n        surah.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        surah.number.toString().includes(searchQuery)\n    );\n  }, [searchQuery, surahs]);\n\n  const isLoading = surahs.length === 0;\n  const isEmpty = !isLoading && filteredSurahs.length === 0;\n\n  return { filteredSurahs, isLoading, isEmpty } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseOfDay.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseRotation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseSource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/hooks/useVerseTransition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/home/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/JuzClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/AudioPlayerBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzMain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/components/JuzVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/[juzId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/__tests__/JuzPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzClientState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzContentProps.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { useJuzData } from './useJuzData';\n\nexport function useJuzContentProps(\n  args: {\n    juzId: string;\n    t: (key: string) => string;\n  } & Pick<\n    ReturnType<typeof useJuzData>,\n    | 'isLoading'\n    | 'error'\n    | 'juzError'\n    | 'juz'\n    | 'verses'\n    | 'loadMoreRef'\n    | 'isValidating'\n    | 'isReachingEnd'\n  >\n) {\n  const {\n    juzId,\n    isLoading,\n    error,\n    juzError,\n    juz,\n    verses,\n    loadMoreRef,\n    isValidating,\n    isReachingEnd,\n    t,\n  } = args;\n\n  return {\n    juzId,\n    isLoading,\n    error,\n    juzError,\n    juz,\n    verses,\n    loadMoreRef,\n    isValidating,\n    isReachingEnd,\n    t,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzPlayerBarProps.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { useCoverAndTrack } from '@/app/shared/hooks/useCoverAndTrack';\n\nimport type { useJuzData } from './useJuzData';\n\nexport function useJuzPlayerBarProps(\n  args: Pick<\n    ReturnType<typeof useJuzData>,\n    'activeVerse' | 'reciter' | 'isPlayerVisible' | 'handleNext' | 'handlePrev'\n  >\n) {\n  const { activeVerse, reciter, isPlayerVisible, handleNext, handlePrev } = args;\n\n  const { isHidden } = useHeaderVisibility();\n  const { track } = useCoverAndTrack(activeVerse, reciter);\n\n  const playerBarProps = {\n    isHidden,\n    track,\n    activeVerseExists: !!activeVerse,\n    isPlayerVisible,\n    onNext: handleNext,\n    onPrev: handlePrev,\n  } as const;\n\n  return { isHidden, playerBarProps } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/hooks/useJuzSettingsProps.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { useSelectedNames } from '@/app/shared/hooks/useSelectedNames';\n\nimport type { useJuzData } from './useJuzData';\n\nexport function useJuzSettingsProps(\n  args: {\n    t: (key: string) => string;\n  } & Pick<ReturnType<typeof useJuzData>, 'settings' | 'translationOptions' | 'wordLanguageOptions'>\n) {\n  const { settings, translationOptions, wordLanguageOptions, t } = args;\n\n  const [isTranslationPanelOpen, setIsTranslationPanelOpen] = useState(false);\n  const [isWordPanelOpen, setIsWordPanelOpen] = useState(false);\n\n  const { selectedTranslationName, selectedWordLanguageName } = useSelectedNames({\n    settings,\n    translationOptions,\n    wordLanguageOptions,\n    t,\n  });\n\n  return {\n    isTranslationPanelOpen,\n    setIsTranslationPanelOpen,\n    isWordPanelOpen,\n    setIsWordPanelOpen,\n    selectedTranslationName,\n    selectedWordLanguageName,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/juz/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/layout/context/HeaderVisibilityContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/components/PageAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/components/PageContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/hooks/usePageData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/[pageId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/__tests__/PagePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/page/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/search/__tests__/SearchPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/search/hooks/useVerseSearch.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\nimport { searchVerses } from '@/lib/api';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nimport type { Verse as VerseType } from '@/types';\n\nexport function useVerseSearch(query: string) {\n  const [verses, setVerses] = useState<VerseType[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!query) {\n      setVerses([]);\n      return;\n    }\n\n    setLoading(true);\n    searchVerses(query)\n      .then(setVerses)\n      .catch((err) => {\n        logger.error(err as Error);\n        setError('Failed to load results.');\n      })\n      .finally(() => setLoading(false));\n  }, [query]);\n\n  return { verses, loading, error } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/search/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/[surahId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/SettingsSidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/SurahPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/UseFontSize.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/UseVerseListing.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/__tests__/Verse.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/ArabicFontPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/CollapsibleSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahVerseList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/SurahView.client.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/VerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/WordLanguagePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahVerseList.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/accessibility.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/architecture.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/context.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/error-handling.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/interaction.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/loading.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/performance.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/responsive.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/__tests__/SurahView/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/ArabicFontList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/arabic-font-panel/FilterToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/ArabicFontSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/ArabicFontSelectionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/arabic-font-panel/useArabicFontPanel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirLimitWarning.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/TafsirSelectionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirPanelContent.tsx","messages":[{"ruleId":"max-lines","severity":1,"message":"File has too many lines (247). Maximum allowed is 150.","line":162,"column":1,"nodeType":null,"messageId":"exceed","endLine":269,"endColumn":1},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (59). Maximum allowed is 50.","line":180,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":241,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { TafsirLimitWarning } from '@/app/(features)/surah/components/panels/tafsir-panel/TafsirLimitWarning';\nimport { AlertIcon } from '@/app/shared/icons';\nimport { TafsirResource } from '@/types';\n\nimport { TafsirList, TafsirListProps } from './TafsirList';\nimport { TafsirSearchSection, TafsirSearchSectionProps } from './TafsirSearchSection';\nimport { TafsirTabs, TafsirTabsProps } from './TafsirTabs';\n\ninterface TafsirPanelContentProps {\n  loading: boolean;\n  error: string | null;\n  showLimitWarning: boolean;\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  orderedSelection: number[];\n  tafsirs: TafsirResource[];\n  handleSelectionToggle: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n  languages: string[];\n  activeFilter: string;\n  setActiveFilter: (filter: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n  resourcesToRender: TafsirResource[];\n  selectedIds: Set<number>;\n  listHeight: number;\n  listContainerRef: React.RefObject<HTMLDivElement>;\n}\n\ninterface TafsirContentBodyProps {\n  showLimitWarning: boolean;\n  searchProps: TafsirSearchSectionProps;\n  tabsProps: TafsirTabsProps;\n  listProps: TafsirListProps;\n  listContainerRef: React.RefObject<HTMLDivElement>;\n}\n\ninterface SearchPropsArgs {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  orderedSelection: number[];\n  tafsirs: TafsirResource[];\n  handleSelectionToggle: (id: number) => void;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n}\n\ninterface TabsPropsArgs {\n  languages: string[];\n  activeFilter: string;\n  setActiveFilter: (filter: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n}\n\ninterface ListPropsArgs {\n  resources: TafsirResource[];\n  selectedIds: Set<number>;\n  onToggle: (id: number) => void;\n  height: number;\n  total: number;\n}\n\nconst useTafsirSearchProps = ({\n  searchTerm,\n  setSearchTerm,\n  orderedSelection,\n  tafsirs,\n  handleSelectionToggle,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n  handleDragEnd,\n  draggedId,\n}: SearchPropsArgs): TafsirSearchSectionProps =>\n  React.useMemo(\n    () => ({\n      searchTerm,\n      setSearchTerm,\n      orderedSelection,\n      tafsirs,\n      handleSelectionToggle,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      draggedId,\n    }),\n    [\n      searchTerm,\n      setSearchTerm,\n      orderedSelection,\n      tafsirs,\n      handleSelectionToggle,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      draggedId,\n    ]\n  );\n\nconst useTafsirTabsProps = ({\n  languages,\n  activeFilter,\n  setActiveFilter,\n  tabsContainerRef,\n  canScrollLeft,\n  canScrollRight,\n  scrollTabsLeft,\n  scrollTabsRight,\n}: TabsPropsArgs): TafsirTabsProps =>\n  React.useMemo(\n    () => ({\n      languages,\n      activeFilter,\n      setActiveFilter,\n      tabsContainerRef,\n      canScrollLeft,\n      canScrollRight,\n      scrollTabsLeft,\n      scrollTabsRight,\n    }),\n    [\n      languages,\n      activeFilter,\n      setActiveFilter,\n      tabsContainerRef,\n      canScrollLeft,\n      canScrollRight,\n      scrollTabsLeft,\n      scrollTabsRight,\n    ]\n  );\n\nconst useTafsirListProps = ({\n  resources,\n  selectedIds,\n  onToggle,\n  height,\n  total,\n}: ListPropsArgs): TafsirListProps =>\n  React.useMemo(\n    () => ({ resources, selectedIds, onToggle, height, total }),\n    [resources, selectedIds, onToggle, height, total]\n  );\n\nconst LoadingSpinner = (): React.JSX.Element => (\n  <div className=\"flex items-center justify-center p-8\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-accent\" />\n  </div>\n);\n\nconst ErrorMessage = ({ error }: { error: string }): React.JSX.Element => (\n  <div className=\"mx-4 mt-4 p-4 rounded-lg border bg-error/10 border-error/20 text-error\">\n    <div className=\"flex items-center space-x-2\">\n      <AlertIcon className=\"h-5 w-5 text-error\" />\n      <span className=\"text-sm\">{error}</span>\n    </div>\n  </div>\n);\n\nconst useTafsirContent = (\n  props: Omit<TafsirPanelContentProps, 'loading' | 'error'>\n): TafsirContentBodyProps => {\n  const {\n    showLimitWarning,\n    searchTerm,\n    setSearchTerm,\n    orderedSelection,\n    tafsirs,\n    handleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    languages,\n    activeFilter,\n    setActiveFilter,\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n    resourcesToRender,\n    selectedIds,\n    listHeight,\n    listContainerRef,\n  } = props;\n  const searchProps = useTafsirSearchProps({\n    searchTerm,\n    setSearchTerm,\n    orderedSelection,\n    tafsirs,\n    handleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n  });\n\n  const tabsProps = useTafsirTabsProps({\n    languages,\n    activeFilter,\n    setActiveFilter,\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  });\n\n  const listProps = useTafsirListProps({\n    resources: resourcesToRender,\n    selectedIds,\n    onToggle: handleSelectionToggle,\n    height: listHeight,\n    total: tafsirs.length,\n  });\n\n  return { showLimitWarning, searchProps, tabsProps, listProps, listContainerRef };\n};\n\nconst TafsirContentBody = ({\n  showLimitWarning,\n  searchProps,\n  tabsProps,\n  listProps,\n  listContainerRef,\n}: TafsirContentBodyProps): React.JSX.Element => (\n  <>\n    <TafsirLimitWarning show={showLimitWarning} />\n    <div className=\"flex-1 overflow-y-auto\" ref={listContainerRef}>\n      <TafsirSearchSection {...searchProps} />\n      <TafsirTabs {...tabsProps} />\n      <TafsirList {...listProps} />\n    </div>\n  </>\n);\n\nexport const TafsirPanelContent = (props: TafsirPanelContentProps): React.JSX.Element => {\n  const { loading, error, ...rest } = props;\n  const contentProps = useTafsirContent(rest);\n\n  if (loading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage error={error} />;\n\n  return <TafsirContentBody {...contentProps} />;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirSearchSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirTabsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/components/TafsirVirtualList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/hooks/useTafsirSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/tafsir-panel/tafsirPanel.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/SelectedTranslationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/TranslationSelectionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelContentBody.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationPanelHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationTabsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationsByLanguage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/components/TranslationsVirtualList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTabsScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/hooks/useTranslationsData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/translationPanel.data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/translationPanel.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/panels/translation-panel/useTranslationPanel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/FontSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/ReadingSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsContentWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsPanels.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/SettingsTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/TafsirSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/TranslationSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/ArabicFontFaceSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/FontSettingsContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/font-settings/FontSizeSlider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/sidebar/SettingsContentWrapperProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/sidebar/SettingsPanelsProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/settings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahAudio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahMain.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/SurahSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/useBodyOverflowHidden.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/surah-view/useSurahView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/VerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/VerseTranslations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/useVerseCard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/components/verse-card/useVerseLastReadObserver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/__tests__/UseSettingsSections.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useFontSize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useHideScrollbar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useInfiniteVerseLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useOpenSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useScrollbarHiding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSettingsSections.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSettingsTabState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useSurahPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useTranslationOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/useVerseListing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/useNavigationHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/hooks/verse-listing/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/lib/surahImageMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/surah/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/AyahNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirAudioPlayer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":79,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport dynamic from 'next/dynamic';\nimport { useEffect, useState } from 'react';\n\nimport { useHeaderVisibility } from '@/app/(features)/layout/context/HeaderVisibilityContext';\nimport { Spinner } from '@/app/shared/Spinner';\nimport { getSurahCoverUrl } from '@/lib/api';\nimport { buildAudioUrl } from '@/lib/audio/reciters';\n\nimport type { Reciter } from '@/app/shared/player/types';\nimport type { Verse } from '@/types';\n\n// Loading fallback extracted to keep component lean\nconst LoadingFallback = (): JSX.Element => (\n  <div className=\"flex justify-center items-center p-4 bg-surface rounded-lg\">\n    <Spinner className=\"h-4 w-4 md:h-5 md:w-5 text-accent\" />\n  </div>\n);\n\n// Dynamic import for heavy QuranAudioPlayer component\nconst QuranAudioPlayer = dynamic(\n  () =>\n    import('@/app/shared/player/QuranAudioPlayer').then((mod) => ({\n      default: mod.QuranAudioPlayer,\n    })),\n  { loading: () => <LoadingFallback />, ssr: false }\n);\n\ninterface TafsirAudioPlayerProps {\n  activeVerse: Verse | null;\n  reciter: Reciter;\n  isVisible: boolean;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n}\n\n// Helper: derive surah cover URL from active verse\nconst useSurahCover = (verse: Verse | null): string | null => {\n  const [coverUrl, setCoverUrl] = useState<string | null>(null);\n  useEffect(() => {\n    if (!verse) return;\n    const [surahStr] = verse.verse_key.split(':');\n    const surahNumber = Number.parseInt(surahStr ?? '0', 10);\n    getSurahCoverUrl(surahNumber).then(setCoverUrl);\n  }, [verse]);\n  return coverUrl;\n};\n\n// Helper: build audio track object\nconst createTrack = (verse: Verse, reciter: Reciter, coverUrl: string | null) => ({\n  id: verse.id.toString(),\n  title: `Verse ${verse.verse_key}`,\n  artist: reciter.name,\n  coverUrl: coverUrl || '',\n  durationSec: 0,\n  src: buildAudioUrl(verse.verse_key, reciter.path),\n});\n\nexport const TafsirAudioPlayer = ({\n  activeVerse,\n  reciter,\n  isVisible,\n  onNext,\n  onPrev,\n}: TafsirAudioPlayerProps): React.JSX.Element | null => {\n  const { isHidden } = useHeaderVisibility();\n  const coverUrl = useSurahCover(activeVerse);\n\n  if (!activeVerse || !isVisible) return null;\n\n  const track = createTrack(activeVerse, reciter, coverUrl);\n  const handleNext = (): boolean => Boolean(onNext?.());\n  const handlePrev = (): boolean => Boolean(onPrev?.());\n\n  return (\n    <div\n      className={`fixed left-0 right-0 p-4 bg-background/0 z-audio-player transition-all duration-300 ease-in-out ${\n        isHidden ? 'bottom-0 pb-safe' : 'bottom-0 pb-safe lg:pb-4'\n      } lg:left-1/2 lg:-translate-x-1/2 lg:right-auto lg:w-[min(90vw,60rem)]`}\n      style={{\n        bottom: isHidden\n          ? 'env(safe-area-inset-bottom)'\n          : 'calc(5rem + env(safe-area-inset-bottom))',\n      }}\n    >\n      <QuranAudioPlayer track={track} onNext={handleNext} onPrev={handlePrev} />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirPanels.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirVerse.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TafsirViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/TranslationSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/VerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/WordTranslationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/WordTranslationPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/useTafsirTabsState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/useWordTranslationSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/verse-card/VerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/components/verse-card/VerseContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/hooks/useTafsirPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/[surahId]/[ayahId]/useTafsirPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/IndexPage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirTabs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirVerseCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/__tests__/TafsirVersePage.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTafsirOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTafsirVerseData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useTranslationOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useVerseNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/hooks/useWordTranslations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/(features)/tafsir/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/RootLayout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/not-found.bn.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/__tests__/not-found.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/api/metrics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/api/verses/random/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/BookmarkContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/ClientProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/NavigationContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/SettingsContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/SidebarContext.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\nimport { useBodyScrollLock } from './hooks/useBodyScrollLock';\nimport { useSidebarScrollPositions } from './hooks/useSidebarScrollPositions';\n\n// Helper hook for keyboard controls\nconst useSidebarKeyboard = (\n  isSurahListOpen: boolean,\n  setSurahListOpen: (open: boolean) => void,\n  isBookmarkSidebarOpen: boolean,\n  setBookmarkSidebarOpen: (open: boolean) => void\n): void => {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent): void => {\n      if (event.key === 'Escape') {\n        if (isSurahListOpen) setSurahListOpen(false);\n        if (isBookmarkSidebarOpen) setBookmarkSidebarOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isSurahListOpen, setSurahListOpen, isBookmarkSidebarOpen, setBookmarkSidebarOpen]);\n};\n\ninterface SidebarContextType {\n  isSurahListOpen: boolean;\n  setSurahListOpen: (open: boolean) => void;\n  isBookmarkSidebarOpen: boolean;\n  setBookmarkSidebarOpen: (open: boolean) => void;\n  surahScrollTop: number;\n  setSurahScrollTop: (top: number) => void;\n  juzScrollTop: number;\n  setJuzScrollTop: (top: number) => void;\n  pageScrollTop: number;\n  setPageScrollTop: (top: number) => void;\n}\n\ninterface SidebarToggles {\n  isSurahListOpen: boolean;\n  setSurahListOpen: (open: boolean) => void;\n  isBookmarkSidebarOpen: boolean;\n  setBookmarkSidebarOpen: (open: boolean) => void;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\n/**\n * Provides global sidebar UI state.\n * Wrap components needing access to sidebar visibility and scroll\n * positions with this provider to synchronize their behavior.\n */\n// Local hooks to keep provider lean\nconst useSidebarToggles = (): SidebarToggles => {\n  const [isSurahListOpen, _setSurahListOpen] = useState(false);\n  const [isBookmarkSidebarOpen, _setBookmarkSidebarOpen] = useState(false);\n\n  const setSurahListOpen = useCallback((open: boolean): void => {\n    _setSurahListOpen(open);\n  }, []);\n\n  const setBookmarkSidebarOpen = useCallback((open: boolean): void => {\n    _setBookmarkSidebarOpen(open);\n  }, []);\n\n  useBodyScrollLock(isSurahListOpen || isBookmarkSidebarOpen);\n  useSidebarKeyboard(\n    isSurahListOpen,\n    setSurahListOpen,\n    isBookmarkSidebarOpen,\n    setBookmarkSidebarOpen\n  );\n\n  return { isSurahListOpen, setSurahListOpen, isBookmarkSidebarOpen, setBookmarkSidebarOpen };\n};\n\nconst useSidebarContextValue = (\n  toggles: SidebarToggles,\n  positions: ReturnType<typeof useSidebarScrollPositions>\n) =>\n  useMemo(\n    () => ({\n      ...toggles,\n      surahScrollTop: positions.surahScrollTop,\n      setSurahScrollTop: positions.setSurahScrollTop,\n      juzScrollTop: positions.juzScrollTop,\n      setJuzScrollTop: positions.setJuzScrollTop,\n      pageScrollTop: positions.pageScrollTop,\n      setPageScrollTop: positions.setPageScrollTop,\n    }),\n    [toggles, positions]\n  );\n\nexport const SidebarProvider = ({ children }: { children: React.ReactNode }): React.JSX.Element => {\n  const toggles = useSidebarToggles();\n  const positions = useSidebarScrollPositions();\n  const value = useSidebarContextValue(toggles, positions);\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>;\n};\n\n/**\n * Hook for interacting with sidebar state.\n * Call within components to read or update sidebar visibility and\n * scroll positions managed by `SidebarProvider`.\n */\nexport const useSidebar = (): SidebarContextType => {\n  const ctx = useContext(SidebarContext);\n  if (!ctx) throw new Error('useSidebar must be used within SidebarProvider');\n  return ctx;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/TranslationProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/UIStateContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/BookmarkContext.initial-state.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/BookmarkContext.operations.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (87). Maximum allowed is 50.","line":10,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":104,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { renderWithProviders, BookmarkTestComponent } from './test-utils';\n\nimport type { Folder } from '@/types';\n\nconst BOOKMARKS_STORAGE_KEY = 'quranAppBookmarks_v2';\n\ndescribe('BookmarkContext operations', () => {\n  beforeEach(() => {\n    localStorage.clear();\n  });\n\n  it('creates a new folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await waitFor(() => {\n      const folders = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders).toHaveLength(1);\n      expect(folders[0].name).toBe('Test Folder');\n    });\n  });\n\n  it('adds a bookmark to a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Add Bookmark'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].bookmarks).toHaveLength(1);\n      expect(folders[0].bookmarks[0].verseId).toBe('1:1');\n      expect(screen.getByTestId('is-bookmarked-1:1').textContent).toBe('true');\n    });\n  });\n\n  it('removes a bookmark from a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Add Bookmark'));\n    await userEvent.click(screen.getByText('Remove Bookmark'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].bookmarks).toHaveLength(0);\n      expect(screen.getByTestId('is-bookmarked-1:1').textContent).toBe('false');\n    });\n  });\n\n  it('renames a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Rename Folder'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].name).toBe('New Name');\n    });\n  });\n\n  it('deletes a folder', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Delete Folder'));\n    await waitFor(() => {\n      expect(screen.getByTestId('folders').textContent).toBe('[]');\n    });\n  });\n\n  it('pins and unpins a verse', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Toggle Pin'));\n    await waitFor(() => {\n      const pinned = JSON.parse(screen.getByTestId('pinned').textContent || '[]');\n      expect(pinned).toHaveLength(1);\n      expect(screen.getByTestId('is-pinned-1:1').textContent).toBe('true');\n    });\n    await userEvent.click(screen.getByText('Toggle Pin'));\n    await waitFor(() => {\n      const pinned = JSON.parse(screen.getByTestId('pinned').textContent || '[]');\n      expect(pinned).toHaveLength(0);\n      expect(screen.getByTestId('is-pinned-1:1').textContent).toBe('false');\n    });\n  });\n\n  it('sets last read verse', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Set Last Read'));\n    await waitFor(() => {\n      const last = JSON.parse(screen.getByTestId('lastRead').textContent || '{}');\n      expect(last['1']).toBe(1);\n    });\n  });\n\n  it('persists folder color', async () => {\n    renderWithProviders(<BookmarkTestComponent />);\n    await userEvent.click(screen.getByText('Create Folder'));\n    await userEvent.click(screen.getByText('Set Color'));\n    await waitFor(() => {\n      const folders: Folder[] = JSON.parse(screen.getByTestId('folders').textContent || '[]');\n      expect(folders[0].color).toBe('text-primary');\n      const stored: Folder[] = JSON.parse(localStorage.getItem(BOOKMARKS_STORAGE_KEY) || '[]');\n      expect(stored[0].color).toBe('text-primary');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/BookmarkContext/test-utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/SettingsContext.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (61). Maximum allowed is 50.","line":21,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { SettingsProvider, useSettings } from '@/app/providers/SettingsContext';\n\nconst SettingsTest = (): React.ReactElement => {\n  const { settings, setSettings } = useSettings();\n  return (\n    <div>\n      <div data-testid=\"settings\">{JSON.stringify(settings)}</div>\n      <button\n        onClick={() => setSettings({ ...settings, arabicFontSize: settings.arabicFontSize + 2 })}\n      >\n        Update\n      </button>\n      <button onClick={() => setSettings({ ...settings, tafsirIds: [1, 2, 3] })}>Tafsirs</button>\n    </div>\n  );\n};\n\ndescribe('SettingsContext settings state', () => {\n  beforeEach(() => {\n    localStorage.clear();\n  });\n\n  const defaultSettings = {\n    translationId: 20,\n    translationIds: [20],\n    tafsirIds: [169],\n    arabicFontSize: 28,\n    translationFontSize: 16,\n    tafsirFontSize: 16,\n    arabicFontFace: '\"KFGQPC-Uthman-Taha\", serif',\n    wordLang: 'en',\n    wordTranslationId: 85,\n    showByWords: false,\n    tajweed: false,\n  };\n\n  it('defaults to expected values', () => {\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    expect(screen.getByTestId('settings').textContent).toBe(JSON.stringify(defaultSettings));\n  });\n\n  it('persists settings changes in localStorage across renders', async () => {\n    const { unmount } = render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Update' }));\n    await waitFor(() => {\n      expect(JSON.parse(localStorage.getItem('quranAppSettings') || '{}').arabicFontSize).toBe(30);\n    });\n    unmount();\n\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await waitFor(() => {\n      expect(screen.getByTestId('settings').textContent).toBe(\n        JSON.stringify({ ...defaultSettings, arabicFontSize: 30 })\n      );\n    });\n  });\n\n  it('saves multiple tafsir selections', async () => {\n    render(\n      <SettingsProvider>\n        <SettingsTest />\n      </SettingsProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Tafsirs' }));\n    await waitFor(() => {\n      expect(JSON.parse(localStorage.getItem('quranAppSettings') || '{}').tafsirIds).toEqual([\n        1, 2, 3,\n      ]);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/SidebarContext.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (59). Maximum allowed is 50.","line":28,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":90,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { SidebarProvider, useSidebar } from '@/app/providers/SidebarContext';\n\nconst ScrollTest = (): React.ReactElement => {\n  const {\n    surahScrollTop,\n    setSurahScrollTop,\n    juzScrollTop,\n    setJuzScrollTop,\n    pageScrollTop,\n    setPageScrollTop,\n  } = useSidebar();\n\n  return (\n    <div>\n      <div data-testid=\"surah\">{surahScrollTop}</div>\n      <button onClick={() => setSurahScrollTop(100)}>Surah</button>\n      <div data-testid=\"juz\">{juzScrollTop}</div>\n      <button onClick={() => setJuzScrollTop(200)}>Juz</button>\n      <div data-testid=\"page\">{pageScrollTop}</div>\n      <button onClick={() => setPageScrollTop(300)}>Page</button>\n    </div>\n  );\n};\n\ndescribe('SidebarContext scroll positions', () => {\n  beforeEach(() => {\n    let store: Record<string, string> = {};\n    const mockSessionStorage = {\n      getItem: jest.fn((key: string) => store[key]),\n      setItem: jest.fn((key: string, value: string) => {\n        store[key] = value;\n      }),\n      clear: jest.fn(() => {\n        store = {};\n      }),\n      removeItem: jest.fn((key: string) => {\n        delete store[key];\n      }),\n      key: jest.fn(),\n      length: 0,\n    } as unknown as Storage;\n\n    Object.defineProperty(window, 'sessionStorage', {\n      value: mockSessionStorage,\n      writable: true,\n    });\n  });\n\n  it('updates surahScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Surah' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('surah').textContent).toBe('100');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('surahScrollTop', '100');\n    });\n  });\n\n  it('updates juzScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Juz' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('juz').textContent).toBe('200');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('juzScrollTop', '200');\n    });\n  });\n\n  it('updates pageScrollTop and writes to sessionStorage', async () => {\n    render(\n      <SidebarProvider>\n        <ScrollTest />\n      </SidebarProvider>\n    );\n    await userEvent.click(screen.getByRole('button', { name: 'Page' }));\n    await waitFor(() => {\n      expect(screen.getByTestId('page').textContent).toBe('300');\n      expect(sessionStorage.setItem).toHaveBeenCalledWith('pageScrollTop', '300');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/ThemeContext.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/__tests__/fonts.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/BookmarkContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/BookmarkProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/bookmark-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkMetadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useBookmarkOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useFolderOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/useMemorizationOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/hooks/usePinnedBookmarks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/storage-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/bookmarks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/panelController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useBodyScrollLock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useEscapeKey.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useOpenPanels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/usePanelState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/usePersistentSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useScrollPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/hooks/useSidebarScrollPositions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsNormalization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsReducer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/providers/settingsStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/HeaderSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/IconSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/LoadingError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ResponsiveVerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/SelectionBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/Spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/SurahListSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/VerseArabic.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/Header.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/LoadingError.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/ResponsiveVerseActions.interactions.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/ResponsiveVerseActions.render.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (72). Maximum allowed is 50.","line":9,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":92,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { screen } from '@testing-library/react';\n\nimport {\n  renderResponsiveVerseActions,\n  renderWithResponsiveState,\n  testAccessibility,\n} from './test-helpers';\n\ndescribe('ResponsiveVerseActions render', () => {\n  it('[Cross-Device] renders correctly on mobile', () => {\n    renderWithResponsiveState('compact', 'mobile');\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Cross-Device] renders correctly on tablet', () => {\n    renderWithResponsiveState('default', 'tablet');\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Cross-Device] renders correctly on desktop', () => {\n    renderResponsiveVerseActions();\n    expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /bookmark/i })).toBeInTheDocument();\n    expect(screen.getByRole('link', { name: 'View tafsir' })).toBeInTheDocument();\n  });\n\n  it('[Touch Targets] are WCAG-compliant on mobile', () => {\n    const { container } = renderWithResponsiveState('compact', 'mobile');\n    const result = testAccessibility.testTouchTargets(container);\n    expect(result.isCompliant).toBe(true);\n    expect(result.undersizedTargets).toHaveLength(0);\n  });\n\n  it('[Touch Targets] are appropriate on tablets', () => {\n    const { container } = renderWithResponsiveState('default', 'tablet');\n    const result = testAccessibility.testTouchTargets(container);\n    expect(result.isCompliant).toBe(true);\n    expect(result.totalTargets).toBeGreaterThan(0);\n  });\n\n  it('[Accessibility] has proper focus management', async () => {\n    const { container } = renderResponsiveVerseActions();\n    const result = await testAccessibility.testFocusManagement(container);\n    expect(result.focusableCount).toBeGreaterThan(0);\n    expect(result.hasLogicalOrder).toBe(true);\n  });\n\n  it('[Variants] applies compact classes for mobile', () => {\n    const { container } = renderWithResponsiveState('compact', 'mobile');\n    const component = container.firstChild as HTMLElement;\n    expect(component).toBeTruthy();\n  });\n\n  it('[Variants] applies expanded classes for desktop', () => {\n    const { container } = renderWithResponsiveState('expanded', 'desktop');\n    const component = container.firstChild as HTMLElement;\n    expect(component).toBeTruthy();\n  });\n\n  it('[Functionality] tafsir link has correct href', () => {\n    renderResponsiveVerseActions();\n    const link = screen.getByRole('link', { name: 'View tafsir' });\n    expect(link).toHaveAttribute('href', '/tafsir/1/1');\n  });\n\n  it('[Functionality] handles different verse keys', () => {\n    renderResponsiveVerseActions({ verseKey: '2:255' });\n    const link = screen.getByRole('link', { name: 'View tafsir' });\n    expect(link).toHaveAttribute('href', '/tafsir/2/255');\n  });\n\n  it('[Errors] handles missing props gracefully', () => {\n    // Avoid nested callback in expect().not.toThrow\n    try {\n      renderResponsiveVerseActions();\n    } catch (e) {\n      expect(e).toBeUndefined();\n    }\n  });\n\n  it('[Errors] handles invalid verse key format', () => {\n    try {\n      renderResponsiveVerseActions({ verseKey: 'invalid' });\n    } catch (e) {\n      expect(e).toBeUndefined();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/ResponsiveVerseActions/test-helpers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/Spinner.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/__tests__/SurahListSidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/BookmarkModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/CreateFolderForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/FolderList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { memo } from 'react';\n\nimport { FolderIcon, CheckIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\nimport { Folder, Bookmark } from '@/types';\n\nconst getButtonClasses = (isSelected: boolean) =>\n  cn(\n    'w-full flex items-center gap-4 p-4 rounded-2xl transition-all duration-200 text-left',\n    isSelected\n      ? 'bg-accent/10 border border-accent/20'\n      : 'hover:bg-interactive border border-transparent',\n    touchClasses.target,\n    touchClasses.focus\n  );\n\nconst getIconWrapperClasses = (color?: string) =>\n  cn(\n    'flex-shrink-0 w-10 h-10 rounded-2xl flex items-center justify-center',\n    !color && 'bg-surface-secondary'\n  );\n\nconst getTitleClasses = (isSelected: boolean) =>\n  cn('font-medium truncate', isSelected ? 'text-accent' : 'text-foreground');\n\ninterface FolderListItemProps {\n  folder: Folder;\n  isSelected: boolean;\n  onSelect: (folder: Folder) => void;\n}\n\nconst FolderListItem = memo(function FolderListItem({\n  folder,\n  isSelected,\n  onSelect,\n}: FolderListItemProps): React.JSX.Element {\n  const bookmarkCount = folder.bookmarks?.length || 0;\n\n  return (\n    <motion.button\n      onClick={() => onSelect(folder)}\n      className={getButtonClasses(isSelected)}\n      whileTap={{ scale: 0.98 }}\n    >\n      <div\n        className={getIconWrapperClasses(folder.color)}\n        style={folder.color ? { backgroundColor: folder.color } : undefined}\n      >\n        <FolderIcon size={20} className={isSelected ? 'text-accent' : 'text-foreground'} />\n      </div>\n\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center gap-2\">\n          <h3 className={getTitleClasses(isSelected)}>{folder.name}</h3>\n          {isSelected && <CheckIcon size={16} className=\"text-accent flex-shrink-0\" />}\n        </div>\n        <p className=\"text-sm text-muted\">\n          {bookmarkCount} {bookmarkCount === 1 ? 'verse' : 'verses'}\n        </p>\n      </div>\n    </motion.button>\n  );\n});\n\nconst EmptyState = memo(function EmptyState({ message }: { message: string }): React.JSX.Element {\n  return (\n    <div className=\"text-center py-8\">\n      <div className=\"w-16 h-16 bg-surface-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n        <FolderIcon size={24} className=\"text-muted\" />\n      </div>\n      <p className=\"text-muted\">{message}</p>\n    </div>\n  );\n});\n\ninterface FolderListProps {\n  folders: Folder[];\n  verseId: string;\n  onFolderSelect: (folder: Folder) => void;\n  findBookmark: (verseId: string) => { folder: Folder; bookmark: Bookmark } | null;\n  emptyMessage?: string;\n}\n\nexport const FolderList = memo(function FolderList({\n  folders,\n  verseId,\n  onFolderSelect,\n  findBookmark,\n  emptyMessage = 'No folders found',\n}: FolderListProps): React.JSX.Element {\n  const existingBookmark = findBookmark(verseId);\n  if (!folders.length) return <EmptyState message={emptyMessage} />;\n\n  return (\n    <div className=\"space-y-2\">\n      {folders.map((folder) => (\n        <FolderListItem\n          key={folder.id}\n          folder={folder}\n          isSelected={existingBookmark?.folder.id === folder.id}\n          onSelect={onFolderSelect}\n        />\n      ))}\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/FolderSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/BookmarkTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/BookmarkTabHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/PinTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/TabContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/components/TabNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/useBookmarkModal.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react';\n\nexport interface UseBookmarkModalReturn {\n  activeTab: 'bookmark' | 'pin';\n  setActiveTab: Dispatch<SetStateAction<'bookmark' | 'pin'>>;\n  isCreatingFolder: boolean;\n  openCreateFolder: () => void;\n  closeCreateFolder: () => void;\n  newFolderName: string;\n  setNewFolderName: Dispatch<SetStateAction<string>>;\n}\n\nexport function useBookmarkModal(isOpen: boolean, onClose: () => void): UseBookmarkModalReturn {\n  const [activeTab, setActiveTab] = useState<'bookmark' | 'pin'>('pin');\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [newFolderName, setNewFolderName] = useState('');\n\n  useEffect(() => {\n    if (!isOpen) return;\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') onClose();\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onClose]);\n\n  const openCreateFolder = useCallback((): void => setIsCreatingFolder(true), []);\n  const closeCreateFolder = useCallback((): void => {\n    setIsCreatingFolder(false);\n    setNewFolderName('');\n  }, []);\n\n  return {\n    activeTab,\n    setActiveTab,\n    isCreatingFolder,\n    openCreateFolder,\n    closeCreateFolder,\n    newFolderName,\n    setNewFolderName,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/bookmark-modal/useBookmarkTab.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":13,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useMemo, useState } from 'react';\n\nimport { useBookmarks } from '@/app/providers/BookmarkContext';\nimport { Folder } from '@/types';\n\ninterface UseBookmarkTabParams {\n  verseId: string;\n  newFolderName: string;\n  onNewFolderNameChange: (name: string) => void;\n  onToggleCreateFolder: (creating: boolean) => void;\n}\n\nexport function useBookmarkTab({\n  verseId,\n  newFolderName,\n  onNewFolderNameChange,\n  onToggleCreateFolder,\n}: UseBookmarkTabParams) {\n  const { folders, findBookmark, addBookmark, removeBookmark, createFolder } = useBookmarks();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFolders = useMemo(() => {\n    if (!searchQuery.trim()) return folders;\n    return folders.filter((folder) =>\n      folder.name.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  }, [folders, searchQuery]);\n\n  const handleFolderSelect = useCallback(\n    (folder: Folder) => {\n      const existingBookmark = findBookmark(verseId);\n      if (existingBookmark?.folder.id === folder.id) {\n        removeBookmark(verseId, folder.id);\n      } else {\n        if (existingBookmark) removeBookmark(verseId, existingBookmark.folder.id);\n        addBookmark(verseId, folder.id);\n      }\n    },\n    [verseId, findBookmark, removeBookmark, addBookmark]\n  );\n\n  const handleCreateFolder = useCallback(() => {\n    if (!newFolderName.trim()) return;\n    createFolder(newFolderName.trim());\n    onNewFolderNameChange('');\n    onToggleCreateFolder(false);\n  }, [newFolderName, createFolder, onNewFolderNameChange, onToggleCreateFolder]);\n\n  return {\n    folders,\n    filteredFolders,\n    findBookmark,\n    searchQuery,\n    setSearchQuery,\n    handleFolderSelect,\n    handleCreateFolder,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/AdaptiveLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/AudioErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/BaseSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/BookmarkModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/ConfirmDeleteModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SearchInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SidebarHeader.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":59},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":93,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":95},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":41,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":82,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { CloseIcon, ArrowLeftIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\ninterface SidebarHeaderProps {\n  title: string;\n  onClose?: () => void;\n  onBack?: () => void;\n  showCloseButton?: boolean;\n  showBackButton?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst BackButton = ({ onBack }: { onBack: () => void }) => (\n  <button\n    onClick={onBack}\n    className=\"p-2 rounded-full hover:bg-surface-hover transition-colors\"\n    aria-label=\"Go back\"\n  >\n    <ArrowLeftIcon size={20} className=\"text-foreground\" />\n  </button>\n);\n\nconst CloseButton = ({ onClose, alwaysShow }: { onClose: () => void; alwaysShow: boolean }) => (\n  <button\n    onClick={onClose}\n    className={cn(\n      'btn-touch p-2 rounded-md hover:bg-surface/60 transition-colors',\n      alwaysShow ? '' : 'md:hidden'\n    )}\n    aria-label=\"Close sidebar\"\n  >\n    <CloseIcon size={18} />\n  </button>\n);\n\nexport const SidebarHeader = ({\n  title,\n  onClose,\n  onBack,\n  showCloseButton = false,\n  showBackButton = false,\n  className,\n  children,\n}: SidebarHeaderProps): React.JSX.Element => {\n  const shouldShowBack = Boolean(showBackButton && onBack);\n  const shouldShowClose = Boolean(showCloseButton && onClose);\n  const alwaysShowClose = title === 'Settings';\n\n  const containerClass = cn(\n    'flex items-center justify-between px-3 sm:px-4 py-3 sm:py-4 shadow-card',\n    showCloseButton && 'md:justify-center',\n    className\n  );\n\n  return (\n    <div className={containerClass}>\n      {shouldShowBack && onBack ? <BackButton onBack={onBack} /> : null}\n\n      <h2\n        className={cn(\n          'text-lg font-semibold text-foreground',\n          showBackButton && 'flex-1 text-center'\n        )}\n      >\n        {title}\n      </h2>\n\n      {shouldShowClose && onClose ? (\n        <CloseButton onClose={onClose} alwaysShow={alwaysShowClose} />\n      ) : null}\n\n      {children}\n\n      {showBackButton && !showCloseButton ? <div className=\"w-10 h-10\" aria-hidden=\"true\" /> : null}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SurahListContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/SurahTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/VerseErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ResponsiveImage.preload.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/ResponsiveImage.resizing.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/__tests__/test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/LayoutBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/LayoutContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-layout/useLayoutStyles.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (53). Maximum allowed is 50.","line":18,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\nimport type { ResponsiveVariant } from '@/lib/responsive';\n\ninterface UseLayoutStylesOptions {\n  variant: ResponsiveVariant;\n  showNavigation: boolean;\n  sidebarOpen: boolean;\n  hasSidebar: boolean;\n}\n\ninterface LayoutStyles {\n  getContentPadding: () => string;\n  getSidebarClasses: () => string;\n  getContainerClasses: () => string;\n}\n\nexport const useLayoutStyles = ({\n  variant,\n  showNavigation,\n  sidebarOpen,\n  hasSidebar,\n}: UseLayoutStylesOptions): LayoutStyles => {\n  const getContentPadding = (): string => {\n    if (!showNavigation) return '';\n\n    switch (variant) {\n      case 'compact':\n        return 'bottom-nav-space';\n      case 'default':\n        return 'bottom-nav-space';\n      case 'expanded':\n        return '';\n      default:\n        return 'bottom-nav-space';\n    }\n  };\n\n  const getSidebarClasses = (): string => {\n    if (!hasSidebar) return '';\n\n    const baseClasses = 'bg-surface border-border shadow-modal transition-transform duration-300';\n\n    switch (variant) {\n      case 'compact':\n        return cn(\n          baseClasses,\n          'fixed bottom-0 left-0 right-0 max-h-[70dvh] rounded-t-2xl border-t',\n          sidebarOpen ? 'translate-y-0' : 'translate-y-full'\n        );\n\n      case 'default':\n        return cn(\n          baseClasses,\n          'fixed top-16 right-0 bottom-0 w-80 border-l rounded-tl-2xl',\n          sidebarOpen ? 'translate-x-0' : 'translate-x-full'\n        );\n\n      case 'expanded':\n        return cn(\n          baseClasses,\n          'static w-80 h-full border rounded-xl',\n          sidebarOpen ? 'block' : 'hidden'\n        );\n\n      default:\n        return baseClasses;\n    }\n  };\n\n  const getContainerClasses = (): string =>\n    cn('flex', variant === 'expanded' ? 'flex-row' : 'flex-col');\n\n  return {\n    getContentPadding,\n    getSidebarClasses,\n    getContainerClasses,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-navigation/NavigationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/adaptive-navigation/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/DefaultErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorBoundary.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":46,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":50,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { ErrorHandler } from '@/src/infrastructure/errors';\n\nimport { DefaultErrorFallback } from './DefaultErrorFallback';\n\nexport interface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: React.ErrorInfo;\n}\n\nexport interface ErrorFallbackProps {\n  error?: Error;\n  resetError: () => void;\n}\n\nexport interface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<ErrorFallbackProps>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n}\n\nclass ErrorBoundaryClass extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ hasError: true, error, errorInfo });\n    this.props.onError?.(error, errorInfo);\n\n    ErrorHandler.handle(error, {\n      context: { errorInfo },\n      showUserNotification: false,\n    });\n  }\n\n  resetError = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback || DefaultErrorFallback;\n      return <FallbackComponent error={this.state.error} resetError={this.resetError} />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport function ErrorBoundary(props: ErrorBoundaryProps): React.JSX.Element {\n  return <ErrorBoundaryClass {...props} />;\n}\nexport { DefaultErrorFallback } from './DefaultErrorFallback';\nexport { useErrorHandler } from './useErrorHandler';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorDetails.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/ErrorIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/error-boundary/withErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderActions.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { IconSun, IconMoon, IconSettings } from '@tabler/icons-react';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { useUIState } from '@/app/providers/UIStateContext';\n\nexport function HeaderActions(): JSX.Element {\n  const { theme, setTheme } = useTheme();\n  const { setSettingsOpen } = useUIState();\n\n  const toggleTheme = () => {\n    const html = document.documentElement;\n    if (html.classList.contains('dark')) {\n      html.classList.remove('dark');\n      setTheme('light');\n    } else {\n      html.classList.add('dark');\n      setTheme('dark');\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-end space-x-1 sm:space-x-1.5 w-1/3 mr-1\">\n      {/* Settings button - only show on mobile/tablet when settings sidebar is hidden */}\n      <button\n        onClick={() => setSettingsOpen(true)}\n        className=\"btn-touch p-2.5 rounded-xl hover:bg-muted/60 transition-all duration-200 active:scale-95 lg:hidden\"\n        aria-label=\"Open settings\"\n      >\n        <IconSettings size={18} className=\"text-muted\" />\n      </button>\n\n      {/* Theme toggle */}\n      <button\n        onClick={toggleTheme}\n        className=\"btn-touch p-2.5 rounded-xl hover:bg-muted/60 transition-all duration-200 active:scale-95\"\n        aria-label=\"Toggle theme\"\n      >\n        {theme === 'dark' ? (\n          <IconSun size={18} className=\"text-accent\" />\n        ) : (\n          <IconMoon size={18} className=\"text-accent\" />\n        )}\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderBrand.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/header/HeaderSearch.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\nimport { SearchInput } from '@/app/shared/components/SearchInput';\n\nexport function HeaderSearch(): JSX.Element {\n  const router = useRouter();\n  const [query, setQuery] = useState('');\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter' && query.trim()) {\n      router.push(`/search?query=${encodeURIComponent(query.trim())}`);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center w-1/3\">\n      <div className=\"w-full max-w-xs sm:max-w-sm lg:max-w-md\">\n        <SearchInput\n          value={query}\n          onChange={setQuery}\n          placeholder=\"Search verses, surahs...\"\n          onKeyDown={handleKeyDown}\n          variant=\"header\"\n          size=\"sm\"\n          className=\"w-full\"\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalBackdrop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/ModalContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/modal/useModalKeyboard.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from 'react';\n\ninterface UseModalKeyboardOptions {\n  isOpen: boolean;\n  onCancel: () => void;\n}\n\nexport const useModalKeyboard = ({ isOpen, onCancel }: UseModalKeyboardOptions) => {\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      cancelRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onCancel();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, onCancel]);\n\n  return { cancelRef };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/ResponsiveBackgroundImage.tsx","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":34,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":50,"endColumn":4},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { useResponsiveState } from '@/lib/responsive';\n\ninterface ResponsiveImageSources {\n  mobile?: string;\n  tablet?: string;\n  desktop?: string;\n  fallback: string;\n}\n\ninterface ResponsiveBackgroundImageProps {\n  src: string | ResponsiveImageSources;\n  children: React.ReactNode;\n  className?: string;\n  overlay?: boolean;\n  overlayOpacity?: number;\n}\n\n/**\n * Utility component for background images with responsive behavior\n */\nexport const ResponsiveBackgroundImage = ({\n  src,\n  children,\n  className = '',\n  overlay = false,\n  overlayOpacity = 0.5,\n}: ResponsiveBackgroundImageProps): React.JSX.Element => {\n  const { breakpoint } = useResponsiveState();\n\n  const pickBackgroundSource = (\n    s: string | ResponsiveImageSources,\n    bp: ReturnType<typeof useResponsiveState>['breakpoint']\n  ) => {\n    if (typeof s === 'string') return s;\n    switch (bp) {\n      case 'mobile':\n        return s.mobile || s.fallback;\n      case 'tablet':\n        return s.tablet || s.mobile || s.fallback;\n      case 'desktop':\n      case 'wide':\n        return s.desktop || s.tablet || s.fallback;\n      default:\n        return s.fallback;\n    }\n  };\n\n  const backgroundImage = pickBackgroundSource(src, breakpoint);\n\n  return (\n    <div\n      className={`relative bg-cover bg-center bg-no-repeat ${className}`}\n      style={{ backgroundImage: `url(${backgroundImage})` }}\n    >\n      {overlay && (\n        <div className=\"absolute inset-0 bg-surface-overlay\" style={{ opacity: overlayOpacity }} />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/ResponsiveImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/imageUtils.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":3,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":20,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":5},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ResponsiveImageSources, ResponsiveImageSizes } from './types';\n\nexport const pickImageSource = (\n  src: string | ResponsiveImageSources,\n  breakpoint: 'mobile' | 'tablet' | 'desktop' | 'wide'\n) => {\n  if (typeof src === 'string') return src;\n\n  switch (breakpoint) {\n    case 'mobile':\n      return src.mobile || src.fallback;\n    case 'tablet':\n      return src.tablet || src.mobile || src.fallback;\n    case 'desktop':\n    case 'wide':\n      return src.desktop || src.tablet || src.fallback;\n    default:\n      return src.fallback;\n  }\n};\n\nexport const buildSizes = (sizes?: ResponsiveImageSizes | string): string => {\n  if (!sizes) return '(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw';\n  if (typeof sizes === 'string') return sizes;\n\n  const sizeQueries: string[] = [];\n  if (sizes.mobile) sizeQueries.push(`(max-width: 767px) ${sizes.mobile}`);\n  if (sizes.tablet) sizeQueries.push(`(max-width: 1023px) ${sizes.tablet}`);\n  if (sizes.desktop) sizeQueries.push(`(min-width: 1024px) ${sizes.desktop}`);\n  sizeQueries.push(sizes.default);\n\n  return sizeQueries.join(', ');\n};\n\nexport const buildFallbackSvg = () =>\n  'data:image/svg+xml,' +\n  encodeURIComponent(\n    `<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\\n` +\n      `  <rect width=\"100%\" height=\"100%\" fill=\"rgb(var(--color-surface))\"/>\\n` +\n      `  <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\".3em\" fill=\"rgb(var(--color-muted))\" font-family=\"system-ui\" font-size=\"14\">\\n` +\n      `    Image\\n` +\n      `  </text>\\n` +\n      `</svg>`\n  );\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/responsive-image/useResponsiveImage.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":84},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useResponsiveState } from '@/lib/responsive';\n\nimport { buildFallbackSvg, buildSizes, pickImageSource } from './imageUtils';\n\nimport type { ResponsiveImageProps } from './types';\n\nexport const useResponsiveImage = ({\n  src,\n  sizes,\n  fallback,\n  loadingStrategy = 'auto',\n}: Pick<ResponsiveImageProps, 'src' | 'sizes' | 'fallback' | 'loadingStrategy'>) => {\n  const { variant, breakpoint } = useResponsiveState();\n\n  const resolveLoading = (\n    strategy: ResponsiveImageProps['loadingStrategy'],\n    v: ReturnType<typeof useResponsiveState>['variant']\n  ) => {\n    if (strategy === 'auto') return v === 'compact' ? 'eager' : 'lazy';\n    return strategy;\n  };\n\n  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    if (fallback) {\n      e.currentTarget.src = fallback;\n    } else {\n      e.currentTarget.src = buildFallbackSvg();\n    }\n  };\n\n  const optimalSource = pickImageSource(src, breakpoint);\n  const responsiveSizes = buildSizes(sizes);\n  const loading = resolveLoading(loadingStrategy, variant);\n\n  return {\n    optimalSource,\n    responsiveSizes,\n    loading,\n    priority: loading === 'eager',\n    onError: handleImageError,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/sidebar/SidebarOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/sidebar/useSidebarPositioning.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\ninterface SidebarPositioningOptions {\n  position: 'left' | 'right';\n  isOpen: boolean;\n  isHeaderHidden: boolean;\n}\n\nexport const useSidebarPositioning = ({\n  position,\n  isOpen,\n  isHeaderHidden,\n}: SidebarPositioningOptions) => {\n  const getPositionClasses = () => {\n    const baseClasses =\n      'fixed w-full sm:w-80 lg:w-[20.7rem] bg-background transition-all duration-300 ease-in-out';\n\n    if (position === 'left') {\n      return cn(\n        baseClasses,\n        'left-0 lg:left-16',\n        'shadow-modal',\n        isHeaderHidden ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]',\n        'z-50 lg:z-10',\n        isOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'\n      );\n    } else {\n      return cn(\n        baseClasses,\n        'right-0',\n        'shadow-modal',\n        isHeaderHidden ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]',\n        'z-30',\n        isOpen ? 'translate-x-0' : 'translate-x-full lg:translate-x-0'\n      );\n    }\n  };\n\n  return { getPositionClasses };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/SurahTabsView.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SurahTabsView' has too many lines (56). Maximum allowed is 50.","line":10,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":65,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from 'react';\n\nimport { TabContent } from '@/app/shared/components/surah-tabs/TabContent';\n\nimport type { SurahTabsProps } from '@/app/shared/components/surah-tabs/types';\nimport type { SurahTabsState } from '@/app/shared/components/surah-tabs/useSurahTabsState';\n\nimport { SidebarTabs } from '@/app/shared/components/surah-sidebar/components/SidebarTabs';\n\nexport const SurahTabsView = memo(function SurahTabsView({\n  tabs,\n  activeTab,\n  setActiveTab,\n  prepareForTabSwitch,\n  searchInput,\n  scrollRef,\n  handleScroll,\n  filteredChapters,\n  filteredJuzs,\n  filteredPages,\n  chapters,\n  selectedSurahId,\n  setSelectedSurahId,\n  selectedJuzId,\n  setSelectedJuzId,\n  selectedPageId,\n  setSelectedPageId,\n  rememberScroll,\n  isTafsirPath,\n}: SurahTabsProps & SurahTabsState) {\n  return (\n    <>\n      <div className=\"p-3 sm:p-4 border-b border-border md:border-b-0 md:p-3 md:pb-1\">\n        <SidebarTabs\n          tabs={tabs}\n          activeTab={activeTab}\n          setActiveTab={setActiveTab}\n          prepareForTabSwitch={prepareForTabSwitch}\n        />\n      </div>\n      {searchInput}\n      <div\n        ref={scrollRef}\n        onScroll={handleScroll}\n        className=\"flex-1 min-h-0 overflow-y-auto p-2 sm:p-3 touch-pan-y\"\n      >\n        <TabContent\n          activeTab={activeTab}\n          filteredChapters={filteredChapters}\n          filteredJuzs={filteredJuzs}\n          filteredPages={filteredPages}\n          chapters={chapters}\n          selectedSurahId={selectedSurahId}\n          setSelectedSurahId={setSelectedSurahId}\n          selectedJuzId={selectedJuzId}\n          setSelectedJuzId={setSelectedJuzId}\n          selectedPageId={selectedPageId}\n          setSelectedPageId={setSelectedPageId}\n          rememberScroll={rememberScroll}\n          isTafsirPath={isTafsirPath}\n        />\n      </div>\n    </>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/TabContent.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (53). Maximum allowed is 50.","line":26,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":80,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport type { JuzSummary, TabKey } from '@/app/shared/components/surah-tabs/types';\nimport type { Chapter } from '@/types';\n\nimport { Juz } from '@/app/shared/components/surah-sidebar/Juz';\nimport { Page } from '@/app/shared/components/surah-sidebar/Page';\nimport { Surah } from '@/app/shared/components/surah-sidebar/Surah';\n\ninterface TabContentProps {\n  activeTab: TabKey;\n  filteredChapters: Chapter[];\n  filteredJuzs: JuzSummary[];\n  filteredPages: number[];\n  chapters: Chapter[];\n  selectedSurahId: number | undefined;\n  setSelectedSurahId: (id: number | undefined) => void;\n  selectedJuzId: number | undefined;\n  setSelectedJuzId: (id: number | undefined) => void;\n  selectedPageId: number | undefined;\n  setSelectedPageId: (id: number | undefined) => void;\n  rememberScroll: (tab: TabKey) => void;\n  isTafsirPath: boolean;\n}\n\nexport const TabContent = ({\n  activeTab,\n  filteredChapters,\n  filteredJuzs,\n  filteredPages,\n  chapters,\n  selectedSurahId,\n  setSelectedSurahId,\n  selectedJuzId,\n  setSelectedJuzId,\n  selectedPageId,\n  setSelectedPageId,\n  rememberScroll,\n  isTafsirPath,\n}: TabContentProps): React.JSX.Element => {\n  if (activeTab === 'Surah') {\n    return (\n      <Surah\n        chapters={filteredChapters}\n        selectedSurahId={selectedSurahId}\n        setSelectedSurahId={setSelectedSurahId}\n        setSelectedPageId={setSelectedPageId}\n        setSelectedJuzId={setSelectedJuzId}\n        rememberScroll={() => rememberScroll('Surah')}\n        isTafsirPath={isTafsirPath}\n      />\n    );\n  }\n\n  if (activeTab === 'Juz') {\n    return (\n      <Juz\n        juzs={filteredJuzs}\n        chapters={chapters}\n        selectedJuzId={selectedJuzId}\n        setSelectedJuzId={setSelectedJuzId}\n        setSelectedPageId={setSelectedPageId}\n        setSelectedSurahId={setSelectedSurahId}\n        rememberScroll={() => rememberScroll('Juz')}\n      />\n    );\n  }\n\n  return (\n    <Page\n      pages={filteredPages}\n      chapters={chapters}\n      selectedPageId={selectedPageId}\n      setSelectedPageId={setSelectedPageId}\n      setSelectedJuzId={setSelectedJuzId}\n      setSelectedSurahId={setSelectedSurahId}\n      rememberScroll={() => rememberScroll('Page')}\n    />\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabConfig.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const useSurahTabConfig = () => {\n  const { t } = useTranslation();\n\n  const tabs = useMemo(\n    () => [\n      { key: 'Surah', label: t('surah_tab') },\n      { key: 'Juz', label: t('juz_tab') },\n      { key: 'Page', label: t('page_tab') },\n    ],\n    [t]\n  );\n\n  return { tabs };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabParams.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useParams, usePathname } from 'next/navigation';\n\nconst toNumberParam = (param: string | string[] | undefined): number | undefined => {\n  if (!param) return undefined;\n  const value = Array.isArray(param) ? param[0] : param;\n  const num = Number(value);\n  return Number.isNaN(num) ? undefined : num;\n};\n\nexport const useSurahTabParams = () => {\n  const { surahId, juzId, pageId } = useParams();\n  const pathname = usePathname();\n\n  const currentSurahId = toNumberParam(surahId);\n  const currentJuzId = toNumberParam(juzId);\n  const currentPageId = toNumberParam(pageId);\n  const isTafsirPath = pathname?.includes('/tafsir');\n\n  const getInitialTab = (): 'Surah' | 'Juz' | 'Page' => {\n    if (currentJuzId) return 'Juz';\n    if (currentPageId) return 'Page';\n    return 'Surah';\n  };\n\n  return {\n    currentSurahId,\n    currentJuzId,\n    currentPageId,\n    isTafsirPath,\n    getInitialTab,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabs.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useSurahTabs' has too many lines (54). Maximum allowed is 50.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":76,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { useSurahTabConfig } from './useSurahTabConfig';\nimport { useSurahTabParams } from './useSurahTabParams';\n\nimport type { Chapter } from '@/types';\n\nimport { useSelectionSync } from '@/app/shared/components/surah-sidebar/hooks/useSelectionSync';\nimport { useSidebarScroll } from '@/app/shared/components/surah-sidebar/useSidebarScroll';\n\ninterface UseSurahTabsParams {\n  chapters: Chapter[];\n  filteredChapters: Chapter[];\n  filteredJuzs: { number: number; name: string; surahRange: string }[];\n  filteredPages: number[];\n}\n\nexport function useSurahTabs({\n  chapters,\n  filteredChapters,\n  filteredJuzs,\n  filteredPages,\n}: UseSurahTabsParams) {\n  const { currentSurahId, currentJuzId, currentPageId, isTafsirPath, getInitialTab } =\n    useSurahTabParams();\n  const { tabs } = useSurahTabConfig();\n\n  const [activeTab, setActiveTab] = useState<'Surah' | 'Juz' | 'Page'>(getInitialTab);\n\n  const {\n    selectedSurahId,\n    setSelectedSurahId,\n    selectedJuzId,\n    setSelectedJuzId,\n    selectedPageId,\n    setSelectedPageId,\n  } = useSelectionSync({\n    currentSurahId,\n    currentJuzId,\n    currentPageId,\n    chapters,\n  });\n\n  const { scrollRef, handleScroll, prepareForTabSwitch, rememberScroll } = useSidebarScroll({\n    activeTab,\n    selectedSurahId,\n    selectedJuzId,\n    selectedPageId,\n  });\n\n  const tabContentProps = {\n    activeTab,\n    filteredChapters,\n    filteredJuzs,\n    filteredPages,\n    chapters,\n    selectedSurahId,\n    setSelectedSurahId,\n    selectedJuzId,\n    setSelectedJuzId,\n    selectedPageId,\n    setSelectedPageId,\n    rememberScroll,\n    isTafsirPath,\n  } as const;\n\n  return {\n    tabs,\n    activeTab,\n    setActiveTab,\n    scrollRef,\n    handleScroll,\n    prepareForTabSwitch,\n    tabContentProps,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/components/surah-tabs/useSurahTabsState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/shadows.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/design-system/card-tokens/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/image/generateResponsiveUrls.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface ResponsiveImageSources {\n  mobile?: string;\n  tablet?: string;\n  desktop?: string;\n  fallback: string;\n}\n\ninterface GenerateOptions {\n  widths: number[];\n  format?: string;\n  quality?: number;\n}\n\n/**\n * Utility for generating responsive image URLs (e.g., for different CDN sizes)\n */\nexport const generateResponsiveUrls = (\n  baseUrl: string,\n  options: GenerateOptions\n): ResponsiveImageSources => {\n  const { widths, format = 'webp', quality = 80 } = options;\n\n  // This is a generic implementation - adjust based on your CDN/image service\n  const generateUrl = (width: number) => {\n    return `${baseUrl}?w=${width}&f=${format}&q=${quality}`;\n  };\n\n  return {\n    mobile: generateUrl(widths[0] || 640),\n    tablet: generateUrl(widths[1] || 1024),\n    desktop: generateUrl(widths[2] || 1920),\n    fallback: baseUrl,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/image/useImagePreload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/selectionHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/selectionOperations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/multiSelection/useSelectionState.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\nexport const useSelectionState = <T>(\n  defaultSelected: T[],\n  onSelectionChange?: (selected: T[]) => void\n) => {\n  const [selected, setSelectedState] = useState<T[]>(defaultSelected);\n\n  const setSelected = useCallback(\n    (updater: T[] | ((current: T[]) => T[])) => {\n      if (typeof updater === 'function') {\n        setSelectedState((current) => {\n          const newItems = updater(current);\n          onSelectionChange?.(newItems);\n          return newItems;\n        });\n      } else {\n        setSelectedState(updater);\n        onSelectionChange?.(updater);\n      }\n    },\n    [onSelectionChange]\n  );\n\n  return { selected, setSelected };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/gestureCalculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/swipeDecision.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 11. Maximum allowed is 10.","line":4,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":32,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { SwipeMetrics } from './gestureCalculations';\nimport type { SwipeHandlers } from './types';\n\nexport const handleSwipeDecision = (\n  metrics: SwipeMetrics,\n  handlers: SwipeHandlers,\n  threshold: number,\n  velocity: number\n) => {\n  const { deltaX, deltaY, velocityX, velocityY } = metrics;\n  const absX = Math.abs(deltaX);\n  const absY = Math.abs(deltaY);\n\n  let direction: 'left' | 'right' | 'up' | 'down' | null = null;\n\n  if (absX > absY && absX > threshold && velocityX > velocity) {\n    direction = deltaX > 0 ? 'right' : 'left';\n  } else if (absY > absX && absY > threshold && velocityY > velocity) {\n    direction = deltaY > 0 ? 'down' : 'up';\n  }\n\n  const handlersMap: Record<'left' | 'right' | 'up' | 'down', (() => void) | undefined> = {\n    left: handlers.onSwipeLeft,\n    right: handlers.onSwipeRight,\n    up: handlers.onSwipeUp,\n    down: handlers.onSwipeDown,\n  };\n\n  if (direction) {\n    handlersMap[direction]?.();\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/swipeGestures/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useCoverAndTrack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useFilteredList.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":67,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\n\ninterface UseFilteredListOptions<T> {\n  searchFields?: (keyof T)[];\n  initialSearchTerm?: string;\n  caseSensitive?: boolean;\n}\n\ninterface UseFilteredListReturn<T> {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  filteredItems: T[];\n  clearSearch: () => void;\n  hasActiveFilter: boolean;\n}\n\n/**\n * Custom hook for managing filtered lists with search functionality\n * Provides consistent filtering behavior across components\n */\nexport function useFilteredList<T>(\n  items: T[],\n  options: UseFilteredListOptions<T> = {}\n): UseFilteredListReturn<T> {\n  const { searchFields = [], initialSearchTerm = '', caseSensitive = false } = options;\n\n  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);\n\n  const filteredItems = useMemo(() => {\n    if (!searchTerm.trim()) {\n      return items;\n    }\n\n    const searchValue = caseSensitive ? searchTerm.trim() : searchTerm.toLowerCase().trim();\n\n    return items.filter((item) => {\n      // If no search fields specified, try to search in common text fields\n      if (searchFields.length === 0) {\n        const itemValues = Object.values(item as Record<string, unknown>)\n          .filter((value) => typeof value === 'string')\n          .join(' ');\n\n        const searchTarget = caseSensitive ? itemValues : itemValues.toLowerCase();\n        return searchTarget.includes(searchValue);\n      }\n\n      // Search in specified fields\n      return searchFields.some((field) => {\n        const fieldValue = item[field];\n\n        if (typeof fieldValue === 'string') {\n          const searchTarget = caseSensitive ? fieldValue : fieldValue.toLowerCase();\n          return searchTarget.includes(searchValue);\n        }\n\n        if (typeof fieldValue === 'number') {\n          return fieldValue.toString().includes(searchValue);\n        }\n\n        return false;\n      });\n    });\n  }, [items, searchTerm, searchFields, caseSensitive]);\n\n  const clearSearch = () => setSearchTerm('');\n  const hasActiveFilter = searchTerm.trim() !== '';\n\n  return {\n    searchTerm,\n    setSearchTerm,\n    filteredItems,\n    clearSearch,\n    hasActiveFilter,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useModal.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\n\ninterface UseModalOptions {\n  defaultOpen?: boolean;\n  onOpenChange?: (isOpen: boolean) => void;\n  closeOnEscape?: boolean;\n}\n\ninterface UseModalReturn {\n  isOpen: boolean;\n  open: () => void;\n  close: () => void;\n  toggle: () => void;\n  setIsOpen: (isOpen: boolean) => void;\n}\n\n/**\n * Custom hook for managing modal/panel state\n * Provides consistent modal behavior across components\n */\nexport function useModal(options: UseModalOptions = {}): UseModalReturn {\n  const { defaultOpen = false, onOpenChange, closeOnEscape = true } = options;\n\n  const [isOpen, setIsOpenState] = useState(defaultOpen);\n\n  const setIsOpen = useCallback(\n    (newIsOpen: boolean) => {\n      setIsOpenState(newIsOpen);\n      onOpenChange?.(newIsOpen);\n    },\n    [onOpenChange]\n  );\n\n  const open = useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const close = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const toggle = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen, setIsOpen]);\n\n  // Handle escape key\n  useEffect(() => {\n    if (!closeOnEscape || !isOpen) return;\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        close();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isOpen, close, closeOnEscape]);\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    setIsOpen,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useMultiSelection.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":23,"column":18,"nodeType":"Identifier","endLine":23,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":27,"column":20,"nodeType":"Identifier","endLine":27,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":28,"column":18,"nodeType":"Identifier","endLine":28,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":32,"column":17,"nodeType":"Identifier","endLine":32,"endColumn":28},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":33,"column":21,"nodeType":"Identifier","endLine":33,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","line":37,"column":22,"nodeType":"Identifier","endLine":37,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback } from 'react';\n\nimport {\n  createClear,\n  createDeselect,\n  createIsSelected,\n  createSelect,\n  createSelectAll,\n  createToggle,\n} from './multiSelection/selectionHandlers';\nimport { useSelectionState } from './multiSelection/useSelectionState';\n\nimport type { UseMultiSelectionOptions, UseMultiSelectionReturn } from './multiSelection/types';\n\nexport function useMultiSelection<T>(\n  options: UseMultiSelectionOptions<T> = {}\n): UseMultiSelectionReturn<T> {\n  const { defaultSelected = [], maxSelection, onSelectionChange } = options;\n  const { selected, setSelected } = useSelectionState(defaultSelected, onSelectionChange);\n\n  const select = useCallback(createSelect<T>(setSelected, maxSelection), [\n    setSelected,\n    maxSelection,\n  ]);\n  const deselect = useCallback(createDeselect<T>(setSelected), [setSelected]);\n  const toggle = useCallback(createToggle<T>(setSelected, maxSelection), [\n    setSelected,\n    maxSelection,\n  ]);\n  const clear = useCallback(createClear<T>(setSelected), [setSelected]);\n  const selectAll = useCallback(createSelectAll<T>(setSelected, maxSelection), [\n    setSelected,\n    maxSelection,\n  ]);\n  const isSelected = useCallback(createIsSelected<T>(selected), [selected]);\n\n  const hasSelection = selected.length > 0;\n  const selectionCount = selected.length;\n\n  return {\n    selected,\n    select,\n    deselect,\n    toggle,\n    clear,\n    selectAll,\n    isSelected,\n    setSelected,\n    hasSelection,\n    selectionCount,\n  };\n}\n\nexport type { UseMultiSelectionOptions, UseMultiSelectionReturn } from './multiSelection/types';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useReaderClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSelectedNames.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSingleSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSurahListFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/hooks/useSwipeGestures.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":65,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRef, useCallback } from 'react';\n\nimport { computeMetrics, shouldPreventDefault } from './swipeGestures/gestureCalculations';\nimport { handleSwipeDecision } from './swipeGestures/swipeDecision';\n\nimport type { TouchPoint } from './swipeGestures/gestureCalculations';\nimport type { SwipeGesturesOptions } from './swipeGestures/types';\n\nexport const useSwipeGestures = (options: SwipeGesturesOptions) => {\n  const {\n    onSwipeLeft,\n    onSwipeRight,\n    onSwipeUp,\n    onSwipeDown,\n    threshold = 50,\n    velocity = 0.3,\n  } = options;\n\n  const touchStart = useRef<TouchPoint | null>(null);\n\n  const handleTouchStart = useCallback((event: React.TouchEvent) => {\n    const touch = event.touches[0];\n    touchStart.current = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n    };\n  }, []);\n\n  const handleTouchEnd = useCallback(\n    (event: React.TouchEvent) => {\n      if (!touchStart.current) return;\n\n      const touch = event.changedTouches[0];\n      const touchEnd: TouchPoint = { x: touch.clientX, y: touch.clientY, time: Date.now() };\n      const metrics = computeMetrics(touchEnd, touchStart.current);\n      handleSwipeDecision(\n        metrics,\n        { onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown },\n        threshold,\n        velocity\n      );\n      touchStart.current = null;\n    },\n    [onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown, threshold, velocity]\n  );\n\n  const handleTouchMove = useCallback((event: React.TouchEvent) => {\n    if (touchStart.current) {\n      const touch = event.touches[0];\n      const currentTouch: TouchPoint = { x: touch.clientX, y: touch.clientY, time: Date.now() };\n\n      if (shouldPreventDefault(currentTouch, touchStart.current)) {\n        event.preventDefault();\n      }\n    }\n  }, []);\n\n  return {\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd,\n    onTouchMove: handleTouchMove,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/AlertIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ArrowLeftIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BarsIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookReaderIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookmarkIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BookmarkOutlineIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/BrainIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/CheckIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronDownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronLeftIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ChevronRightIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ClockIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/CloseIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/EllipsisHIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/FolderIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/FontSettingIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/GridIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/GripVerticalIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/HomeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/IconProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/MicIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/MoonIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PauseIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PinIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PlayIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/PlusIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/RepeatIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ResetIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SearchIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/ShareIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SkipBackIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SkipForwardIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SlidersIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/SunIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/TranslationIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/VolumeIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/VolumeOffIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/icons/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/ModernLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuickSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuickSearchModal.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'QuickSearchModal' has too many lines (59). Maximum allowed is 50.","line":15,"column":38,"nodeType":"FunctionExpression","messageId":"exceed","endLine":75,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { IconSearch, IconX } from '@tabler/icons-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useRef, useEffect, memo } from 'react';\n\ninterface QuickSearchModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  query: string;\n  setQuery: (value: string) => void;\n  handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  children: React.ReactNode;\n}\n\nexport const QuickSearchModal = memo(function QuickSearchModal({\n  isOpen,\n  onClose,\n  query,\n  setQuery,\n  handleKeyDown,\n  children,\n}: QuickSearchModalProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      setTimeout(() => inputRef.current?.focus(), 100);\n    }\n  }, [isOpen]);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-50\"\n          />\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: -20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: -20 }}\n            transition={{ duration: 0.2 }}\n            className=\"fixed top-20 left-4 right-4 mx-auto max-w-2xl z-50\"\n          >\n            <div className=\"bg-background/95 backdrop-blur-xl border border-border/50 rounded-2xl shadow-2xl overflow-hidden\">\n              <div className=\"flex items-center p-4 border-b border-border/30\">\n                <IconSearch size={20} className=\"text-muted mr-3 flex-shrink-0\" />\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder=\"Search verses, surahs, topics...\"\n                  className=\"flex-1 bg-surface/0 outline-none text-foreground placeholder:text-muted text-lg\"\n                />\n                <button\n                  onClick={onClose}\n                  className=\"p-2 hover:bg-muted/50 rounded-lg transition-colors ml-2\"\n                >\n                  <IconX size={20} className=\"text-muted\" />\n                </button>\n              </div>\n              <div className=\"max-h-96 overflow-y-auto\">{children}</div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/QuranBottomSheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SearchSuggestions.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SearchSuggestions' has too many lines (58). Maximum allowed is 50.","line":12,"column":39,"nodeType":"FunctionExpression","messageId":"exceed","endLine":70,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { IconClock, IconTrendingUp } from '@tabler/icons-react';\nimport { memo } from 'react';\n\ninterface SearchSuggestionsProps {\n  query: string;\n  recentSearches: string[];\n  trendingSearches: string[];\n  onSearch: (query: string) => void;\n}\n\nexport const SearchSuggestions = memo(function SearchSuggestions({\n  query,\n  recentSearches,\n  trendingSearches,\n  onSearch,\n}: SearchSuggestionsProps) {\n  if (query.length === 0) {\n    return (\n      <div className=\"p-4 space-y-6\">\n        <div>\n          <div className=\"flex items-center gap-2 mb-3\">\n            <IconClock size={16} className=\"text-muted\" />\n            <h3 className=\"text-sm font-medium text-muted uppercase tracking-wide\">Recent</h3>\n          </div>\n          <div className=\"space-y-1\">\n            {recentSearches.map((search, index) => (\n              <button\n                key={index}\n                onClick={() => onSearch(search)}\n                className=\"w-full text-left p-3 hover:bg-muted/50 rounded-xl transition-colors group\"\n              >\n                <span className=\"text-foreground group-hover:text-primary transition-colors\">\n                  {search}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n        <div>\n          <div className=\"flex items-center gap-2 mb-3\">\n            <IconTrendingUp size={16} className=\"text-muted\" />\n            <h3 className=\"text-sm font-medium text-muted uppercase tracking-wide\">Trending</h3>\n          </div>\n          <div className=\"space-y-1\">\n            {trendingSearches.map((search, index) => (\n              <button\n                key={index}\n                onClick={() => onSearch(search)}\n                className=\"w-full text-left p-3 hover:bg-muted/50 rounded-xl transition-colors group\"\n              >\n                <span className=\"text-foreground group-hover:text-primary transition-colors\">\n                  {search}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"text-center text-muted py-8\">\n        Press Enter to search for &quot;{query}&quot;\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SwipeContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/SwipeIndicator.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":15,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { IconChevronLeft, IconChevronRight, IconArrowDown } from '@tabler/icons-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useState, useEffect } from 'react';\n\nimport { useBreakpoint } from '@/lib/responsive';\n\ninterface SwipeIndicatorProps {\n  show?: boolean;\n  autoHide?: boolean;\n  autoHideDelay?: number;\n}\n\nexport const SwipeIndicator = ({\n  show = true,\n  autoHide = true,\n  autoHideDelay = 5000,\n}: SwipeIndicatorProps): React.JSX.Element => {\n  const [isVisible, setIsVisible] = useState(show);\n\n  useEffect(() => {\n    if (autoHide && show) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n      }, autoHideDelay);\n\n      return () => clearTimeout(timer);\n    }\n  }, [autoHide, autoHideDelay, show]);\n\n  const breakpoint = useBreakpoint();\n  const isMobile = breakpoint === 'mobile' || breakpoint === 'tablet';\n\n  if (!isMobile) return null;\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: 20 }}\n          transition={{ duration: 0.3 }}\n          className=\"fixed left-4 right-4 z-30 bottom-nav-offset\"\n          onClick={() => setIsVisible(false)}\n        >\n          <div className=\"bg-surface-overlay/70 backdrop-blur-sm text-foreground rounded-2xl p-4 mx-auto max-w-sm\">\n            <div className=\"text-center mb-3\">\n              <p className=\"text-sm font-medium\">Navigation Gestures</p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 text-xs\">\n              {/* Horizontal swipes */}\n              <div className=\"flex items-center gap-2\">\n                <IconChevronLeft size={16} />\n                <span>Previous</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <IconChevronRight size={16} />\n                <span>Next</span>\n              </div>\n\n              {/* Vertical swipes */}\n              <div className=\"flex items-center gap-2 col-span-2 justify-center\">\n                <IconArrowDown size={16} />\n                <span>Swipe down for Quran selector</span>\n              </div>\n            </div>\n\n            <div className=\"mt-3 pt-3 border-t border-border/20 text-center\">\n              <p className=\"text-xs text-muted\">Tap anywhere to dismiss</p>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/NavigationItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/QuranBottomSheetHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/QuranTabBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/components/TabContent.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'TabContent' has too many lines (59). Maximum allowed is 50.","line":18,"column":32,"nodeType":"FunctionExpression","messageId":"exceed","endLine":78,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from 'react';\n\nimport { NavigationItem } from './NavigationItem';\n\nimport type { JuzSummary } from '@/app/shared/navigation/hooks/useQuranNavigation';\nimport type { Surah } from '@/types';\n\ninterface TabContentProps {\n  activeTab: 'surah' | 'juz' | 'page';\n  filteredSurahs: Surah[];\n  filteredJuzs: JuzSummary[];\n  filteredPages: number[];\n  onSurahClick: (surahId: number) => void;\n  onJuzClick: (juzNumber: number) => void;\n  onPageClick: (page: number) => void;\n}\n\nexport const TabContent = memo(function TabContent({\n  activeTab,\n  filteredSurahs,\n  filteredJuzs,\n  filteredPages,\n  onSurahClick,\n  onJuzClick,\n  onPageClick,\n}: TabContentProps): React.JSX.Element {\n  if (activeTab === 'surah') {\n    return (\n      <div className=\"p-4\">\n        <div className=\"grid gap-2\">\n          {filteredSurahs.map((surah) => (\n            <NavigationItem\n              key={surah.number}\n              number={surah.number}\n              title={surah.name}\n              subtitle={`${surah.verses} verses`}\n              arabicName={surah.arabicName}\n              onClick={() => onSurahClick(surah.number)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (activeTab === 'juz') {\n    return (\n      <div className=\"p-4\">\n        <div className=\"grid gap-2\">\n          {filteredJuzs.map((juz) => (\n            <NavigationItem\n              key={juz.number}\n              number={juz.number}\n              title={`Juz ${juz.number}`}\n              subtitle={juz.surahRange}\n              onClick={() => onJuzClick(juz.number)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"grid gap-2\">\n        {filteredPages.map((page) => (\n          <NavigationItem\n            key={page}\n            number={page}\n            title={`Page ${page}`}\n            onClick={() => onPageClick(page)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useBottomSheetHandlers.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRouter } from 'next/navigation';\nimport { useCallback } from 'react';\n\nexport function useBottomSheetHandlers(\n  onClose: () => void,\n  onSurahSelect: (surahId: number) => void\n) {\n  const router = useRouter();\n\n  const handleSurahClick = useCallback(\n    (surahId: number) => {\n      onSurahSelect(surahId);\n      onClose();\n    },\n    [onSurahSelect, onClose]\n  );\n\n  const handleJuzClick = useCallback(\n    (juzNumber: number) => {\n      router.push(`/juz/${juzNumber}`);\n      onClose();\n    },\n    [router, onClose]\n  );\n\n  const handlePageClick = useCallback(\n    (page: number) => {\n      router.push(`/page/${page}`);\n      onClose();\n    },\n    [router, onClose]\n  );\n\n  return { handleSurahClick, handleJuzClick, handlePageClick } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useQuickSearch.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter } from 'next/navigation';\nimport { useState, useCallback } from 'react';\n\nexport function useQuickSearch(onClose: () => void) {\n  const [query, setQuery] = useState('');\n  const [recentSearches] = useState([\n    'Al-Fatiha',\n    'Ayatul Kursi',\n    'Surah Rahman',\n    'Last 10 Surahs',\n  ]);\n  const [trendingSearches] = useState([\n    'Surah Yaseen',\n    'Surah Mulk',\n    'Surah Kahf',\n    'Dua collection',\n  ]);\n  const router = useRouter();\n\n  const handleSearch = useCallback(\n    (searchQuery: string) => {\n      if (searchQuery.trim()) {\n        router.push(`/search?query=${encodeURIComponent(searchQuery.trim())}`);\n        onClose();\n        setQuery('');\n      }\n    },\n    [router, onClose]\n  );\n\n  return {\n    query,\n    setQuery,\n    recentSearches,\n    trendingSearches,\n    handleSearch,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useQuranNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/navigation/hooks/useSwipeNavigation.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { usePathname, useRouter } from 'next/navigation';\nimport { useCallback } from 'react';\n\nimport { useSwipeGestures } from '@/app/shared/hooks/useSwipeGestures';\n\nconst MAIN_ROUTES = ['/home', '/surah', '/bookmarks'];\n\nexport function useSwipeNavigation() {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  const currentRouteIndex = MAIN_ROUTES.findIndex(\n    (route) => pathname.startsWith(route) || (route === '/home' && pathname === '/')\n  );\n\n  const navigateToRoute = useCallback(\n    (direction: 'left' | 'right') => {\n      if (currentRouteIndex === -1) return;\n\n      const newIndex =\n        direction === 'left'\n          ? (currentRouteIndex + 1) % MAIN_ROUTES.length\n          : (currentRouteIndex - 1 + MAIN_ROUTES.length) % MAIN_ROUTES.length;\n\n      router.push(MAIN_ROUTES[newIndex]);\n    },\n    [currentRouteIndex, router]\n  );\n\n  return useSwipeGestures({\n    onSwipeLeft: () => navigateToRoute('left'),\n    onSwipeRight: () => navigateToRoute('right'),\n    threshold: 75,\n    velocity: 0.4,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/QuranAudioPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/AudioProvider.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/PlaybackOptionsModal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/PlayerComponentsMobile.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/__tests__/UseSurahRepeat.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/IconBtn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/PlaybackOptionsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/PlaybackOptionsModalContent.tsx","messages":[{"ruleId":"max-lines","severity":1,"message":"File has too many lines (157). Maximum allowed is 150.","line":161,"column":1,"nodeType":null,"messageId":"exceed","endLine":169,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { SlidersIcon, MicIcon, RepeatIcon } from '@/app/shared/icons';\n\nimport { ReciterPanel } from './ReciterPanel';\nimport { RepeatPanel } from './RepeatPanel';\n\nimport type { RepeatOptions } from '@/app/shared/player/types';\n\ninterface ContentProps {\n  onClose: () => void;\n  activeTab: 'reciter' | 'repeat';\n  setActiveTab: (tab: 'reciter' | 'repeat') => void;\n  localReciter: string;\n  setLocalReciter: (id: string) => void;\n  localRepeat: RepeatOptions;\n  setLocalRepeat: (opts: RepeatOptions) => void;\n  rangeWarning: string | null;\n  setRangeWarning: (msg: string | null) => void;\n  commit: () => void;\n}\n\nconst ModalHeader = memo(function ModalHeader({ onClose }: { onClose: () => void }) {\n  return (\n    <div className=\"flex items-center justify-center gap-3 mb-4\">\n      <div className=\"h-10 w-10 rounded-xl grid place-items-center bg-accent/10 text-accent\">\n        <SlidersIcon />\n      </div>\n      <div className=\"font-semibold text-foreground\">Playback Options</div>\n      <button className=\"ml-auto text-muted hover:text-foreground\" onClick={onClose}>\n        ✕\n      </button>\n    </div>\n  );\n});\n\nconst Tabs = memo(function Tabs({\n  activeTab,\n  setActiveTab,\n}: Pick<ContentProps, 'activeTab' | 'setActiveTab'>) {\n  return (\n    <div className=\"mb-4 flex justify-center gap-2\">\n      <button\n        onClick={() => setActiveTab('reciter')}\n        className={`px-3 py-1.5 rounded-full text-sm ${\n          activeTab === 'reciter'\n            ? 'bg-accent/10 text-accent'\n            : 'bg-surface hover:bg-interactive-hover'\n        }`}\n      >\n        <span className=\"inline-flex items-center gap-2\">\n          <MicIcon className=\"h-4 w-4\" />\n          Reciter\n        </span>\n      </button>\n      <button\n        onClick={() => setActiveTab('repeat')}\n        className={`px-3 py-1.5 rounded-full text-sm ${\n          activeTab === 'repeat'\n            ? 'bg-accent/10 text-accent'\n            : 'bg-surface hover:bg-interactive-hover'\n        }`}\n      >\n        <span className=\"inline-flex items-center gap-2\">\n          <RepeatIcon className=\"h-4 w-4\" />\n          Verse Repeat\n        </span>\n      </button>\n    </div>\n  );\n});\n\nconst ModalFooter = memo(function ModalFooter({\n  onClose,\n  onApply,\n}: {\n  onClose: () => void;\n  onApply: () => void;\n}) {\n  return (\n    <div className=\"mt-5 flex items-center justify-between text-sm\">\n      <div className=\"text-muted\">Tips: Space • ←/→ seek • ↑/↓ volume</div>\n      <div className=\"flex gap-2\">\n        <button\n          className=\"px-4 py-2 rounded-xl bg-surface hover:bg-interactive-hover text-foreground\"\n          onClick={onClose}\n        >\n          Cancel\n        </button>\n        <button\n          className=\"px-4 py-2 rounded-xl bg-accent text-on-accent hover:opacity-90\"\n          onClick={onApply}\n        >\n          Apply\n        </button>\n      </div>\n    </div>\n  );\n});\n\nconst ModalContainer = memo(function ModalContainer({\n  onClose,\n  children,\n}: {\n  onClose: () => void;\n  children: React.ReactNode;\n}) {\n  return createPortal(\n    <div\n      className=\"fixed inset-0 z-[120] grid place-items-center bg-surface-overlay/60 p-4\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) onClose();\n      }}\n      onKeyDown={(e) => {\n        if (e.target === e.currentTarget && (e.key === 'Enter' || e.key === ' ')) onClose();\n      }}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {children}\n    </div>,\n    document.body\n  );\n});\n\nexport const PlaybackOptionsModalContent = memo(function PlaybackOptionsModalContent({\n  onClose,\n  activeTab,\n  setActiveTab,\n  localReciter,\n  setLocalReciter,\n  localRepeat,\n  setLocalRepeat,\n  rangeWarning,\n  setRangeWarning,\n  commit,\n}: ContentProps) {\n  return (\n    <ModalContainer onClose={onClose}>\n      <div\n        className=\"w-full max-w-3xl rounded-2xl border border-border bg-surface p-4 md:p-6 shadow-2xl\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        tabIndex={-1}\n      >\n        <ModalHeader onClose={onClose} />\n        <Tabs activeTab={activeTab} setActiveTab={setActiveTab} />\n\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          {activeTab === 'reciter' && (\n            <ReciterPanel localReciter={localReciter} setLocalReciter={setLocalReciter} />\n          )}\n          {activeTab === 'repeat' && (\n            <RepeatPanel\n              localRepeat={localRepeat}\n              setLocalRepeat={setLocalRepeat}\n              rangeWarning={rangeWarning}\n              setRangeWarning={setRangeWarning}\n            />\n          )}\n        </div>\n\n        <ModalFooter onClose={onClose} onApply={commit} />\n      </div>\n    </ModalContainer>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/PlayerOptions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/ReciterPanel.stories.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { ReciterPanel } from './ReciterPanel';\n\nimport type { Meta, StoryObj } from '@storybook/react';\n\nexport const meta: Meta<typeof ReciterPanel> = {\n  title: 'Player/ReciterPanel',\n  component: ReciterPanel,\n};\n\ntype Story = StoryObj<typeof ReciterPanel>;\n\nfunction ReciterPanelStory() {\n  const [reciter, setReciter] = useState('1');\n  return (\n    <div className=\"p-4 bg-surface\">\n      <ReciterPanel localReciter={reciter} setLocalReciter={setReciter} />\n    </div>\n  );\n}\n\nexport const Default: Story = {\n  render: () => <ReciterPanelStory />,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/ReciterPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/RepeatPanel.stories.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nimport { RepeatPanel } from './RepeatPanel';\n\nimport type { RepeatOptions } from '@/app/shared/player/types';\nimport type { Meta, StoryObj } from '@storybook/react';\n\nexport const meta: Meta<typeof RepeatPanel> = {\n  title: 'Player/RepeatPanel',\n  component: RepeatPanel,\n};\n\ntype Story = StoryObj<typeof RepeatPanel>;\n\nfunction RepeatPanelStory() {\n  const [repeat, setRepeat] = useState<RepeatOptions>({ mode: 'off' });\n  const [warning, setWarning] = useState<string | null>(null);\n  return (\n    <div className=\"p-4 bg-surface\">\n      <RepeatPanel\n        localRepeat={repeat}\n        setLocalRepeat={setRepeat}\n        rangeWarning={warning}\n        setRangeWarning={setWarning}\n      />\n    </div>\n  );\n}\n\nexport const Default: Story = {\n  render: () => <RepeatPanelStory />,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/RepeatPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'RepeatPanel' has too many lines (72). Maximum allowed is 50.","line":12,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":83,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport type { RepeatOptions } from '@/app/shared/player/types';\n\ninterface Props {\n  localRepeat: RepeatOptions;\n  setLocalRepeat: React.Dispatch<React.SetStateAction<RepeatOptions>>;\n  rangeWarning: string | null;\n  setRangeWarning: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nexport function RepeatPanel({\n  localRepeat,\n  setLocalRepeat,\n  rangeWarning,\n  setRangeWarning,\n}: Props): React.JSX.Element {\n  return (\n    <div className=\"md:col-span-2 grid md:grid-cols-2 gap-4\">\n      <div className=\"rounded-xl border border-border p-4\">\n        <div className=\"font-medium mb-3 text-foreground\">Mode</div>\n        <div className=\"flex items-center p-1 rounded-full bg-interactive border border-border\">\n          {(['off', 'single', 'range', 'surah'] as const).map((m) => (\n            <button\n              key={m}\n              onClick={() => setLocalRepeat({ ...localRepeat, mode: m })}\n              className={`flex-1 px-3 py-2 rounded-full text-sm font-semibold capitalize transition-colors ${\n                localRepeat.mode === m\n                  ? 'bg-surface shadow text-foreground'\n                  : 'text-muted hover:text-foreground hover:bg-surface/30'\n              }`}\n            >\n              {m}\n            </button>\n          ))}\n        </div>\n      </div>\n      <div className=\"rounded-xl border border-border p-4 grid grid-cols-2 gap-3\">\n        {rangeWarning && (\n          <div className=\"col-span-2 text-sm text-status-warning\">{rangeWarning}</div>\n        )}\n        <NumberField\n          label=\"Start\"\n          value={localRepeat.start ?? 1}\n          min={1}\n          onChange={(v) => {\n            setLocalRepeat({ ...localRepeat, start: v });\n            setRangeWarning(null);\n          }}\n        />\n        <NumberField\n          label=\"End\"\n          value={localRepeat.end ?? localRepeat.start ?? 1}\n          min={1}\n          onChange={(v) => {\n            setLocalRepeat({ ...localRepeat, end: v });\n            setRangeWarning(null);\n          }}\n        />\n        <NumberField\n          label=\"Play count\"\n          value={localRepeat.playCount ?? 1}\n          min={1}\n          onChange={(v) => setLocalRepeat({ ...localRepeat, playCount: v })}\n        />\n        <NumberField\n          label=\"Repeat each\"\n          value={localRepeat.repeatEach ?? 1}\n          min={1}\n          onChange={(v) => setLocalRepeat({ ...localRepeat, repeatEach: v })}\n        />\n        <div className=\"col-span-2\">\n          <NumberField\n            label=\"Delay (s)\"\n            value={localRepeat.delay ?? 0}\n            min={0}\n            onChange={(v) => setLocalRepeat({ ...localRepeat, delay: v })}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction NumberField({\n  label,\n  value,\n  onChange,\n  min = 0,\n}: {\n  label: string;\n  value: number;\n  onChange: (v: number) => void;\n  min?: number;\n}): React.JSX.Element {\n  return (\n    <label className=\"text-sm\">\n      <span className=\"block mb-1 text-muted\">{label}</span>\n      <input\n        type=\"number\"\n        value={Number.isFinite(value) ? value : 0}\n        min={min}\n        step={1}\n        onChange={(e) => {\n          const v = parseInt(e.target.value, 10);\n          onChange(Number.isNaN(v) ? (min ?? value) : v);\n        }}\n        className=\"w-full rounded-xl border border-border bg-surface px-3 py-2 focus:outline-none focus:ring-2 focus:ring-accent/35\"\n      />\n    </label>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/SpeedControl.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Popover from '@radix-ui/react-popover';\nimport React, { useRef, useState } from 'react';\n\nimport { useAudio } from '@/app/shared/player/context/AudioContext';\n\nfunction useSpeedPopover() {\n  const [open, setOpen] = useState(false);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const close = (): void => {\n    setOpen(false);\n    triggerRef.current?.focus();\n  };\n\n  return { open, setOpen, triggerRef, contentRef, close } as const;\n}\n\nfunction SpeedOptionButton({\n  speed,\n  active,\n  onSelect,\n}: {\n  speed: number;\n  active: boolean;\n  onSelect: (v: number) => void;\n}): React.JSX.Element {\n  return (\n    <button\n      onClick={() => onSelect(speed)}\n      className={`w-full text-center text-sm p-1.5 rounded-md ${\n        active ? 'bg-accent text-on-accent' : 'hover:bg-interactive-hover'\n      }`}\n    >\n      {speed}x\n    </button>\n  );\n}\n\nexport function SpeedControl(): React.JSX.Element {\n  const { playbackRate, setPlaybackRate } = useAudio();\n  const { open, setOpen, triggerRef, contentRef, close } = useSpeedPopover();\n  const speedOptions = [0.75, 1, 1.25, 1.5, 2];\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen}>\n      <Popover.Trigger asChild>\n        <button\n          ref={triggerRef}\n          onBlur={(e) => {\n            if (!contentRef.current?.contains(e.relatedTarget as Node)) {\n              setOpen(false);\n            }\n          }}\n          className=\"h-9 w-14 grid place-items-center rounded-full text-xs font-bold transition focus:outline-none focus:ring-2 text-foreground focus:ring-accent/35 hover:bg-interactive-hover\"\n        >\n          {playbackRate}x\n        </button>\n      </Popover.Trigger>\n      <Popover.Content\n        ref={contentRef}\n        side=\"top\"\n        align=\"center\"\n        sideOffset={8}\n        className=\"w-28 rounded-lg shadow-lg border p-1 bg-surface border-surface\"\n        onFocusOutside={() => setOpen(false)}\n        onEscapeKeyDown={() => setOpen(false)}\n        onInteractOutside={() => setOpen(false)}\n      >\n        {speedOptions.map((speed) => (\n          <SpeedOptionButton\n            key={speed}\n            speed={speed}\n            active={playbackRate === speed}\n            onSelect={(v) => {\n              setPlaybackRate(v);\n              close();\n            }}\n          />\n        ))}\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/Timeline.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Timeline' has too many lines (54). Maximum allowed is 50.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":69,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as Slider from '@radix-ui/react-slider';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport React from 'react';\n\nimport { responsiveClasses } from '@/lib/responsive';\n\ninterface Props {\n  current: number;\n  duration: number;\n  setSeek: (sec: number) => void;\n  interactable: boolean;\n  elapsed: string;\n  total: string;\n}\n\nexport function Timeline({\n  current,\n  duration,\n  setSeek,\n  interactable,\n  elapsed,\n  total,\n}: Props): React.JSX.Element {\n  return (\n    <div className=\"flex-1 flex items-center gap-3\">\n      <div className=\"flex-1\">\n        <Tooltip.Provider delayDuration={150}>\n          <Slider.Root\n            className={`relative w-full h-2.5 group flex items-center ${\n              !interactable ? 'opacity-60 pointer-events-none' : ''\n            }`}\n            value={[current]}\n            max={Math.max(1, duration || 0)}\n            step={0.1}\n            onValueChange={([v]) => setSeek(v)}\n            aria-label=\"Seek\"\n          >\n            <Slider.Track className=\"h-0.5 rounded-full relative w-full grow bg-surface group-hover:bg-interactive-hover\">\n              <Slider.Range className=\"h-full rounded-full absolute bg-accent\" />\n            </Slider.Track>\n            <Tooltip.Root>\n              <Tooltip.Trigger asChild>\n                <Slider.Thumb\n                  className=\"block h-3 w-3 rounded-full shadow-[0_1px_2px_rgba(2,6,23,0.15)] focus:outline-none focus:ring-2 focus:ring-offset-2 bg-background ring-accent focus:ring-accent/35 relative z-[120]\"\n                  aria-label=\"Position\"\n                />\n              </Tooltip.Trigger>\n              <Tooltip.Portal>\n                <Tooltip.Content\n                  sideOffset={8}\n                  className=\"rounded-md text-foreground text-xs px-2 py-1 shadow bg-surface z-[120]\"\n                >\n                  {elapsed}\n                  <Tooltip.Arrow className=\"fill-surface\" />\n                </Tooltip.Content>\n              </Tooltip.Portal>\n            </Tooltip.Root>\n          </Slider.Root>\n        </Tooltip.Provider>\n      </div>\n      <div\n        className={`flex justify-between ${responsiveClasses.timeDisplay} ${responsiveClasses.timeLabel}`}\n      >\n        <span aria-label=\"elapsed\">{elapsed}</span>\n        <span aria-label=\"duration\">{total}</span>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/TrackInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/TransportControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/components/VolumeControl.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/context/AudioContext.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (62). Maximum allowed is 50.","line":41,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":105,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { createContext, useContext, useMemo, useRef, useState } from 'react';\n\nimport { usePersistedAudioSettings } from '@/app/shared/player/hooks/usePersistedAudioSettings';\nimport { usePlayerVisibility } from '@/app/shared/player/hooks/usePlayerVisibility';\nimport { useRepeatState } from '@/app/shared/player/utils/repeatState';\nimport { Verse } from '@/types';\n\nimport type { Reciter, RepeatOptions } from '@/app/shared/player/types';\n\ninterface AudioContextType {\n  playingId: number | null;\n  setPlayingId: React.Dispatch<React.SetStateAction<number | null>>;\n  isPlaying: boolean;\n  setIsPlaying: React.Dispatch<React.SetStateAction<boolean>>;\n  loadingId: number | null;\n  setLoadingId: React.Dispatch<React.SetStateAction<number | null>>;\n  activeVerse: Verse | null;\n  setActiveVerse: React.Dispatch<React.SetStateAction<Verse | null>>;\n  audioRef: React.MutableRefObject<HTMLAudioElement | null>;\n  repeatOptions: RepeatOptions;\n  setRepeatOptions: React.Dispatch<React.SetStateAction<RepeatOptions>>;\n  reciter: Reciter;\n  setReciter: React.Dispatch<React.SetStateAction<Reciter>>;\n  volume: number;\n  setVolume: React.Dispatch<React.SetStateAction<number>>;\n  playbackRate: number;\n  setPlaybackRate: React.Dispatch<React.SetStateAction<number>>;\n  isPlayerVisible: boolean;\n  openPlayer: () => void;\n  closePlayer: () => void;\n}\n\nconst AudioContext = createContext<AudioContextType | undefined>(undefined);\n\n/**\n * Provides global audio playback state.\n * Wrap your application with this provider to share the currently\n * playing and loading audio identifiers across components.\n */\nexport const AudioProvider = ({ children }: { children: React.ReactNode }): React.JSX.Element => {\n  const [playingId, setPlayingId] = useState<number | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [loadingId, setLoadingId] = useState<number | null>(null);\n  const [activeVerse, setActiveVerse] = useState<Verse | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const { repeatOptions, setRepeatOptions } = useRepeatState();\n  const { reciter, setReciter, volume, setVolume, playbackRate, setPlaybackRate } =\n    usePersistedAudioSettings();\n\n  const { isPlayerVisible, openPlayer, closePlayer } = usePlayerVisibility({\n    audioRef,\n    setIsPlaying,\n    setPlayingId,\n    setActiveVerse,\n  });\n\n  const value = useMemo(\n    () => ({\n      playingId,\n      setPlayingId,\n      isPlaying,\n      setIsPlaying,\n      loadingId,\n      setLoadingId,\n      activeVerse,\n      setActiveVerse,\n      audioRef,\n      repeatOptions,\n      setRepeatOptions,\n      reciter,\n      setReciter,\n      volume,\n      setVolume,\n      playbackRate,\n      setPlaybackRate,\n      isPlayerVisible,\n      openPlayer,\n      closePlayer,\n    }),\n    [\n      playingId,\n      setPlayingId,\n      isPlaying,\n      setIsPlaying,\n      loadingId,\n      setLoadingId,\n      activeVerse,\n      setActiveVerse,\n      repeatOptions,\n      setRepeatOptions,\n      reciter,\n      setReciter,\n      volume,\n      setVolume,\n      playbackRate,\n      setPlaybackRate,\n      isPlayerVisible,\n      openPlayer,\n      closePlayer,\n    ]\n  );\n\n  return <AudioContext.Provider value={value}>{children}</AudioContext.Provider>;\n};\n\n/**\n * Hook for accessing audio playback state.\n * Use within components to read or update the current playing or\n * loading audio identifiers managed by `AudioProvider`.\n */\nexport const useAudio = (): AudioContextType => {\n  const ctx = useContext(AudioContext);\n  if (!ctx) throw new Error('useAudio must be used within AudioProvider');\n  return ctx;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/finalizeHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/finalizePlayback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/handleRangeRepeat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/handleSingleRepeat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/playbackCompletionHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/rangeRepeatHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/singleRepeatHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useAudioControllerCore.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":14,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAudio } from '@/app/shared/player/context/AudioContext';\n\nimport { useAudioControllerSetup } from './useAudioControllerSetup';\nimport { useTrackTiming } from './useTrackTiming';\n\nimport type { Track } from '@/app/shared/player/types';\n\ninterface Options {\n  track?: Track | null;\n  onPrev?: () => boolean;\n  onNext?: () => boolean;\n}\n\nexport function useAudioControllerCore({ track, onPrev, onNext }: Options) {\n  const {\n    isPlayerVisible,\n    closePlayer,\n    audioRef,\n    isPlaying,\n    setIsPlaying,\n    setPlayingId,\n    activeVerse,\n    volume,\n    setVolume,\n    playbackRate,\n    repeatOptions,\n  } = useAudio();\n  const timing = useTrackTiming({ track, volume, playbackRate, contextRef: audioRef });\n  const { controls, handleEnded } = useAudioControllerSetup({\n    timing,\n    isPlaying,\n    setIsPlaying,\n    setPlayingId,\n    activeVerse,\n    setVolume,\n    repeatOptions,\n    onNext,\n    onPrev,\n  });\n  return {\n    isPlayerVisible,\n    closePlayer,\n    audioRef,\n    timing,\n    controls,\n    handleEnded,\n    isPlaying,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useAudioControllerSetup.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { usePlaybackCompletion } from './usePlaybackCompletion';\nimport { usePlayerControls } from './usePlayerControls';\n\nimport type { useTrackTiming } from './useTrackTiming';\nimport type { RepeatOptions } from '@/app/shared/player/types';\nimport type { Verse } from '@/types';\nimport type { Dispatch, SetStateAction } from 'react';\n\ninterface Options {\n  timing: ReturnType<typeof useTrackTiming>;\n  isPlaying: boolean;\n  setIsPlaying: Dispatch<SetStateAction<boolean>>;\n  setPlayingId: Dispatch<SetStateAction<number | null>>;\n  activeVerse: Verse | null;\n  setVolume: Dispatch<SetStateAction<number>>;\n  repeatOptions: RepeatOptions;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n}\n\nexport function useAudioControllerSetup({\n  timing,\n  isPlaying,\n  setIsPlaying,\n  setPlayingId,\n  activeVerse,\n  setVolume,\n  repeatOptions,\n  onNext,\n  onPrev,\n}: Options) {\n  const controls = usePlayerControls({\n    interactable: timing.interactable,\n    isPlaying,\n    setIsPlaying,\n    setPlayingId,\n    activeVerse,\n    current: timing.current,\n    duration: timing.duration,\n    seek: timing.seek,\n    setVolume,\n    play: timing.play,\n    pause: timing.pause,\n  });\n\n  const handleEnded = usePlaybackCompletion({\n    audioRef: timing.audioRef,\n    repeatOptions,\n    activeVerse,\n    onNext,\n    onPrev,\n    seek: timing.seek,\n    play: timing.play,\n    pause: timing.pause,\n    setIsPlaying,\n    setPlayingId,\n  });\n\n  return { controls, handleEnded } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useAudioPlayer.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useAudioPlayer' has too many lines (70). Maximum allowed is 50.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":106,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useRef, useState, MutableRefObject } from 'react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\ntype Options = {\n  src?: string;\n  defaultDuration?: number;\n  onTimeUpdate?: (time: number) => void;\n  onLoadedMetadata?: (duration: number) => void;\n  onError?: (error: unknown) => void;\n};\n\ninterface AudioPlayerReturn {\n  audioRef: MutableRefObject<HTMLAudioElement | null>;\n  isPlaying: boolean;\n  play: () => void;\n  pause: () => void;\n  seek: (sec: number) => number;\n  setVolume: (vol: number) => void;\n  setPlaybackRate: (rate: number) => void;\n}\n\n/**\n * Controls an `HTMLAudioElement` and exposes playback helpers.\n *\n * @param options optional callbacks and src.\n * @returns helpers and state for audio playback.\n */\nexport function useAudioPlayer(options: Options = {}): AudioPlayerReturn {\n  const { src, defaultDuration, onTimeUpdate, onLoadedMetadata, onError } = options;\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const play = useCallback(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.play().catch((err) => {\n      if (err instanceof DOMException && err.name === 'AbortError') return;\n      if (onError) onError(err);\n      else logger.error(err);\n    });\n    setIsPlaying(true);\n  }, [onError]);\n\n  const pause = useCallback(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.pause();\n    setIsPlaying(false);\n  }, []);\n\n  const seek = useCallback(\n    (sec: number) => {\n      const a = audioRef.current;\n      if (!a) return 0;\n      const max = a.duration || defaultDuration || 0;\n      a.currentTime = Math.max(0, Math.min(max, sec));\n      const t = a.currentTime || 0;\n      onTimeUpdate?.(t);\n      return t;\n    },\n    [defaultDuration, onTimeUpdate]\n  );\n\n  const setVolume = useCallback((vol: number) => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.volume = vol;\n  }, []);\n\n  const setPlaybackRate = useCallback((rate: number): void => {\n    const a = audioRef.current;\n    if (!a) return;\n    a.playbackRate = rate;\n  }, []);\n\n  useEffect(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    if (isPlaying) {\n      a.play().catch((err) => {\n        if (err instanceof DOMException && err.name === 'AbortError') return;\n        if (onError) onError(err);\n        else logger.error(err);\n      });\n    } else {\n      a.pause();\n    }\n  }, [isPlaying, src, onError]);\n\n  useEffect(() => {\n    const a = audioRef.current;\n    if (!a) return;\n    const onTime = (): void => onTimeUpdate?.(a.currentTime || 0);\n    const onMeta = (): void => onLoadedMetadata?.(a.duration || defaultDuration || 0);\n    a.addEventListener('timeupdate', onTime);\n    a.addEventListener('loadedmetadata', onMeta);\n    onMeta();\n    return () => {\n      a.removeEventListener('timeupdate', onTime);\n      a.removeEventListener('loadedmetadata', onMeta);\n    };\n  }, [src, defaultDuration, onTimeUpdate, onLoadedMetadata]);\n\n  return { audioRef, isPlaying, play, pause, seek, setVolume, setPlaybackRate };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useCompletionHandlers.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":103,"column":5,"nodeType":"CallExpression","endLine":103,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'options'. Either include it or remove the dependency array.","line":103,"column":5,"nodeType":"CallExpression","endLine":103,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [options]","fix":{"range":[2498,2524],"text":"[options]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo, type DependencyList, type RefObject } from 'react';\n\nimport { Verse } from '@/types';\n\nimport { createCompletionHandlers, type CompletionHandlers } from './playbackCompletionHandlers';\n\nimport type { RepeatOptions } from '@/app/shared/player/types';\n\ninterface Controls {\n  audioRef: RefObject<HTMLAudioElement | null>;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  seek: (s: number) => void;\n  play: () => void;\n  pause: () => void;\n  setIsPlaying: (v: boolean) => void;\n  setPlayingId: (v: number | null) => void;\n}\n\ninterface Options {\n  repeatOptions: RepeatOptions;\n  activeVerse: Verse | null;\n  verseRepeatsLeft: number;\n  playRepeatsLeft: number;\n  controls: Controls;\n  setVerseRepeatsLeft: (n: number) => void;\n  setPlayRepeatsLeft: (n: number) => void;\n  handleSurahRepeat: () => void;\n  delayMs: number;\n}\n\ntype CreateHandlersArgs = Parameters<typeof createCompletionHandlers>[0];\n\nfunction buildCompletionArgs({\n  repeatOptions,\n  activeVerse,\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  controls,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n  handleSurahRepeat,\n  delayMs,\n}: Options): CreateHandlersArgs {\n  const { audioRef, onNext, onPrev, seek, play, pause, setIsPlaying, setPlayingId } = controls;\n  return {\n    start: repeatOptions.start ?? 1,\n    end: repeatOptions.end ?? repeatOptions.start ?? 1,\n    delay: delayMs,\n    currentAyah: activeVerse ? parseInt(activeVerse.verse_key.split(':')[1], 10) : null,\n    verseRepeatsLeft,\n    playRepeatsLeft,\n    repeatEach: repeatOptions.repeatEach ?? 1,\n    onNext,\n    onPrev,\n    seek,\n    play,\n    pause,\n    audioRef,\n    setVerseRepeatsLeft,\n    setPlayRepeatsLeft,\n    setIsPlaying,\n    setPlayingId,\n    handleSurahRepeat,\n  };\n}\n\nfunction buildDependencies({\n  repeatOptions,\n  activeVerse,\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  controls,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n  handleSurahRepeat,\n  delayMs,\n}: Options): DependencyList {\n  const { audioRef, onNext, onPrev, seek, play, pause, setIsPlaying, setPlayingId } = controls;\n  return [\n    repeatOptions,\n    activeVerse,\n    delayMs,\n    verseRepeatsLeft,\n    playRepeatsLeft,\n    audioRef,\n    onNext,\n    onPrev,\n    seek,\n    play,\n    pause,\n    setIsPlaying,\n    setPlayingId,\n    setVerseRepeatsLeft,\n    setPlayRepeatsLeft,\n    handleSurahRepeat,\n  ];\n}\n\nexport function useCompletionHandlers(options: Options): CompletionHandlers {\n  return useMemo(\n    () => createCompletionHandlers(buildCompletionArgs(options)),\n    buildDependencies(options)\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useControllerLayout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePersistedAudioSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlaybackCompletion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlaybackOptions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlaybackOptionsModal.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":5,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\n\nimport { usePlaybackOptions } from './usePlaybackOptions';\n\nexport function usePlaybackOptionsModal(open: boolean, onClose: () => void) {\n  const {\n    localReciter,\n    setLocalReciter,\n    localRepeat,\n    setLocalRepeat,\n    rangeWarning,\n    setRangeWarning,\n    commit,\n  } = usePlaybackOptions(onClose);\n\n  useEffect(() => {\n    if (!open) setRangeWarning(null);\n  }, [open, setRangeWarning]);\n\n  return {\n    localReciter,\n    setLocalReciter,\n    localRepeat,\n    setLocalRepeat,\n    rangeWarning,\n    setRangeWarning,\n    commit,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerControls.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerKeyboard.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, Dispatch, SetStateAction } from 'react';\n\ninterface Options {\n  current: number;\n  duration: number;\n  setSeek: (sec: number) => void;\n  togglePlay: () => void;\n  setVolume: Dispatch<SetStateAction<number>>;\n}\n\n/**\n * Registers keyboard shortcuts for the audio player.\n *\n * @param options current playback data and control handlers.\n */\nexport function usePlayerKeyboard({\n  current,\n  duration,\n  setSeek,\n  togglePlay,\n  setVolume,\n}: Options): void {\n  useEffect(() => {\n    const onKey = (e: KeyboardEvent) => {\n      if ((e.target as HTMLElement)?.closest('input, textarea, [role=slider]')) return;\n      if (e.code === 'Space') {\n        e.preventDefault();\n        togglePlay();\n      }\n      if (e.key === 'ArrowLeft') setSeek(Math.max(0, current - 5));\n      if (e.key === 'ArrowRight') setSeek(Math.min(duration || 0, current + 5));\n      if (e.key === 'ArrowUp') setVolume((v) => Math.min(1, round(v + 0.05)));\n      if (e.key === 'ArrowDown') setVolume((v) => Math.max(0, round(v - 0.05)));\n    };\n    window.addEventListener('keydown', onKey);\n    return () => window.removeEventListener('keydown', onKey);\n  }, [current, duration, setSeek, togglePlay, setVolume]);\n}\n\nfunction round(n: number): number {\n  return Math.round(n * 100) / 100;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerLayout.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":17,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":17,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { buildPlayerLayoutProps } from '@/app/shared/player/utils/buildPlayerLayoutProps';\n\nimport type { usePlayerControls } from './usePlayerControls';\nimport type { useTrackTiming } from './useTrackTiming';\nimport type { Dispatch, SetStateAction } from 'react';\n\ninterface Options {\n  timing: ReturnType<typeof useTrackTiming>;\n  isPlaying: boolean;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  closePlayer: () => void;\n  setMobileOptionsOpen: Dispatch<SetStateAction<boolean>>;\n  controls: ReturnType<typeof usePlayerControls>;\n}\n\nexport function usePlayerLayout(options: Options) {\n  return buildPlayerLayoutProps(options);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerOptionsState.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\n\nexport function usePlayerOptionsState() {\n  const [mobileOptionsOpen, setMobileOptionsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<'reciter' | 'repeat'>('reciter');\n\n  return {\n    mobileOptionsOpen,\n    setMobileOptionsOpen,\n    activeTab,\n    setActiveTab,\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/usePlayerVisibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useQuranAudioController.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useRepeatState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useSurahRepeat.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'handleSurahRepeat' has too many lines (55). Maximum allowed is 50.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":57,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nexport function handleSurahRepeat({\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  repeatEach,\n  delay,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n}: {\n  verseRepeatsLeft: number;\n  playRepeatsLeft: number;\n  repeatEach: number;\n  delay: number;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  seek: (s: number) => void;\n  play: () => void;\n  pause: () => void;\n  setIsPlaying: (v: boolean) => void;\n  setPlayingId: (v: number | null) => void;\n  setVerseRepeatsLeft: (n: number) => void;\n  setPlayRepeatsLeft: (n: number) => void;\n}): void {\n  if (verseRepeatsLeft > 1) {\n    setVerseRepeatsLeft(verseRepeatsLeft - 1);\n    seek(0);\n    play();\n    return;\n  }\n  setVerseRepeatsLeft(repeatEach);\n  const hasNext = onNext?.() ?? false;\n  if (hasNext) return;\n  if (playRepeatsLeft > 1) {\n    setPlayRepeatsLeft(playRepeatsLeft - 1);\n    setVerseRepeatsLeft(repeatEach);\n    setTimeout(() => {\n      let hasPrev = true;\n      while (hasPrev) {\n        hasPrev = onPrev?.() ?? false;\n      }\n    }, delay);\n    return;\n  }\n  setTimeout(() => {\n    pause();\n    setIsPlaying(false);\n    setPlayingId(null);\n  }, 0);\n}\n\n/**\n * Provides a memoized callback for handling surah repeat logic.\n *\n * @param params repeat state and audio controls.\n * @returns function to execute the repeat routine.\n */\nexport function useSurahRepeat({\n  verseRepeatsLeft,\n  playRepeatsLeft,\n  repeatEach,\n  delay,\n  onNext,\n  onPrev,\n  seek,\n  play,\n  pause,\n  setIsPlaying,\n  setPlayingId,\n  setVerseRepeatsLeft,\n  setPlayRepeatsLeft,\n}: Parameters<typeof handleSurahRepeat>[0]): () => void {\n  return useCallback(\n    () =>\n      handleSurahRepeat({\n        verseRepeatsLeft,\n        playRepeatsLeft,\n        repeatEach,\n        delay,\n        onNext,\n        onPrev,\n        seek,\n        play,\n        pause,\n        setIsPlaying,\n        setPlayingId,\n        setVerseRepeatsLeft,\n        setPlayRepeatsLeft,\n      }),\n    [\n      verseRepeatsLeft,\n      playRepeatsLeft,\n      repeatEach,\n      delay,\n      onNext,\n      onPrev,\n      seek,\n      play,\n      pause,\n      setIsPlaying,\n      setPlayingId,\n      setVerseRepeatsLeft,\n      setPlayRepeatsLeft,\n    ]\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/hooks/useTrackTiming.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/layouts/DesktopPlayerLayout.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'DesktopPlayerLayout' has too many lines (52). Maximum allowed is 50.","line":28,"column":47,"nodeType":"FunctionExpression","messageId":"exceed","endLine":82,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { PlayerOptions } from '@/app/shared/player/components/PlayerOptions';\nimport { Timeline } from '@/app/shared/player/components/Timeline';\nimport { TrackInfo } from '@/app/shared/player/components/TrackInfo';\nimport { TransportControls } from '@/app/shared/player/components/TransportControls';\nimport { Button } from '@/app/shared/ui/Button';\nimport { iconClasses } from '@/lib/responsive';\n\ninterface DesktopPlayerLayoutProps {\n  cover: string;\n  title: string;\n  artist: string;\n  current: number;\n  duration: number;\n  elapsed: string;\n  total: string;\n  interactable: boolean;\n  isPlaying: boolean;\n  togglePlay: () => void;\n  setSeek: (sec: number) => void;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  closePlayer: () => void;\n}\n\nexport const DesktopPlayerLayout = React.memo(function DesktopPlayerLayout({\n  cover,\n  title,\n  artist,\n  current,\n  duration,\n  elapsed,\n  total,\n  interactable,\n  isPlaying,\n  togglePlay,\n  setSeek,\n  onNext,\n  onPrev,\n  closePlayer,\n}: DesktopPlayerLayoutProps): React.JSX.Element {\n  return (\n    <>\n      {/* Left media block */}\n      <TrackInfo cover={cover} title={title} artist={artist} />\n\n      {/* Transport controls */}\n      <TransportControls\n        isPlaying={isPlaying}\n        interactable={interactable}\n        onPrev={onPrev}\n        onNext={onNext}\n        togglePlay={togglePlay}\n      />\n\n      {/* Timeline & Time Labels */}\n      <Timeline\n        current={current}\n        duration={duration}\n        setSeek={setSeek}\n        interactable={interactable}\n        elapsed={elapsed}\n        total={total}\n      />\n\n      {/* Utilities */}\n      <div className=\"flex items-center gap-2\">\n        <PlayerOptions />\n        <Button\n          variant=\"icon-round\"\n          size=\"icon-round\"\n          aria-label=\"Close player\"\n          onClick={closePlayer}\n        >\n          <CloseIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n        </Button>\n      </div>\n    </>\n  );\n});\n\nexport type { DesktopPlayerLayoutProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/layouts/MobilePlayerLayout.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'MobilePlayerLayout' has too many lines (81). Maximum allowed is 50.","line":29,"column":46,"nodeType":"FunctionExpression","messageId":"exceed","endLine":111,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Image from 'next/image';\nimport React from 'react';\n\nimport { CloseIcon, SlidersIcon } from '@/app/shared/icons';\nimport { SpeedControl } from '@/app/shared/player/components/SpeedControl';\nimport { Timeline } from '@/app/shared/player/components/Timeline';\nimport { TransportControls } from '@/app/shared/player/components/TransportControls';\nimport { Button } from '@/app/shared/ui/Button';\nimport { iconClasses } from '@/lib/responsive';\n\ninterface MobilePlayerLayoutProps {\n  cover: string;\n  title: string;\n  artist: string;\n  current: number;\n  duration: number;\n  elapsed: string;\n  total: string;\n  interactable: boolean;\n  isPlaying: boolean;\n  togglePlay: () => void;\n  setSeek: (sec: number) => void;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  setMobileOptionsOpen: () => void;\n  closePlayer: () => void;\n}\n\nexport const MobilePlayerLayout = React.memo(function MobilePlayerLayout({\n  cover,\n  title,\n  artist,\n  current,\n  duration,\n  elapsed,\n  total,\n  interactable,\n  isPlaying,\n  togglePlay,\n  setSeek,\n  onNext,\n  onPrev,\n  setMobileOptionsOpen,\n  closePlayer,\n}: MobilePlayerLayoutProps): React.JSX.Element {\n  return (\n    <>\n      {/* Top row uses 3-column grid to keep transport perfectly centered */}\n      <div className=\"grid grid-cols-[1fr_auto_1fr] items-center gap-2\">\n        <div className=\"flex items-center gap-2 min-w-0\">\n          <div className=\"hidden min-[400px]:block flex-shrink-0\">\n            <Image\n              src={cover}\n              alt=\"cover\"\n              width={32}\n              height={32}\n              className=\"h-8 w-8 rounded-full shadow-sm object-cover\"\n              onError={(e) => {\n                e.currentTarget.src =\n                  \"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='32' height='32'><rect width='100%' height='100%' rx='6' ry='6' fill='%23e5e7eb'/></svg>\";\n              }}\n            />\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"text-sm font-semibold tracking-[-0.01em] truncate text-foreground\">\n              {title}\n            </div>\n            <div className=\"text-xs -mt-0.5 truncate text-muted\">{artist}</div>\n          </div>\n        </div>\n        <TransportControls\n          /* keep controls visually centered */\n\n          isPlaying={isPlaying}\n          interactable={interactable}\n          onPrev={onPrev}\n          onNext={onNext}\n          togglePlay={togglePlay}\n        />\n        <div className=\"flex items-center gap-1 justify-self-end\">\n          <SpeedControl />\n          <Button\n            variant=\"icon-round\"\n            size=\"icon-round\"\n            className=\"shrink-0\"\n            aria-label=\"Options\"\n            onClick={setMobileOptionsOpen}\n          >\n            <SlidersIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n          </Button>\n          <Button\n            variant=\"icon-round\"\n            size=\"icon-round\"\n            aria-label=\"Close player\"\n            onClick={closePlayer}\n          >\n            <CloseIcon className={`${iconClasses.touch} ${iconClasses.stroke}`} />\n          </Button>\n        </div>\n      </div>\n      <Timeline\n        current={current}\n        duration={duration}\n        setSeek={setSeek}\n        interactable={interactable}\n        elapsed={elapsed}\n        total={total}\n      />\n    </>\n  );\n});\n\nexport type { MobilePlayerLayoutProps };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/__tests__/repeat.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/__tests__/timeline.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/buildPlayerLayoutProps.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { usePlayerControls } from '@/app/shared/player/hooks/usePlayerControls';\nimport type { useTrackTiming } from '@/app/shared/player/hooks/useTrackTiming';\nimport type { Dispatch, SetStateAction } from 'react';\n\ninterface Options {\n  timing: ReturnType<typeof useTrackTiming>;\n  isPlaying: boolean;\n  onNext?: () => boolean;\n  onPrev?: () => boolean;\n  closePlayer: () => void;\n  setMobileOptionsOpen: Dispatch<SetStateAction<boolean>>;\n  controls: ReturnType<typeof usePlayerControls>;\n}\n\nexport function buildPlayerLayoutProps({\n  timing,\n  isPlaying,\n  onNext,\n  onPrev,\n  closePlayer,\n  setMobileOptionsOpen,\n  controls,\n}: Options) {\n  return {\n    cover: timing.cover,\n    title: timing.title,\n    artist: timing.artist,\n    current: timing.current,\n    duration: timing.duration,\n    elapsed: timing.elapsed,\n    total: timing.total,\n    interactable: timing.interactable,\n    isPlaying,\n    togglePlay: controls.togglePlay,\n    setSeek: controls.setSeek,\n    onNext,\n    onPrev,\n    closePlayer,\n    setMobileOptionsOpen: () => setMobileOptionsOpen(true),\n  } as const;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/playbackOptionSections.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/repeat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/repeatState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/player/utils/timeline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceItem.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":68}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\n\ninterface ResourceItemProps<T extends Resource> {\n  item: T;\n  isSelected: boolean;\n  onToggle: (id: number) => void;\n  style?: React.CSSProperties;\n}\n\nexport const ResourceItem = <T extends Resource>({\n  item,\n  isSelected,\n  onToggle,\n  style,\n}: ResourceItemProps<T>) => {\n  const handleClick = () => {\n    onToggle(item.id);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      handleClick();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      role=\"button\"\n      tabIndex={0}\n      className={`flex items-center justify-between px-4 py-2.5 min-h-touch rounded-lg cursor-pointer transition-all duration-200 focus:outline-none focus-visible:outline-none outline-none border-0 focus:border-0 active:outline-none ${\n        isSelected\n          ? 'bg-accent/20 border border-accent/30'\n          : 'bg-surface border border-border hover:bg-interactive'\n      }`}\n      style={style}\n    >\n      <div className=\"flex-1 min-w-0 pr-3\">\n        <p\n          className={`font-medium text-sm leading-tight truncate ${\n            isSelected ? 'text-accent' : 'text-foreground'\n          }`}\n          title={item.name}\n        >\n          {item.name}\n        </p>\n      </div>\n      <div className=\"flex-shrink-0 w-6 h-6 flex items-center justify-center\">\n        {isSelected && <CheckIcon className=\"h-5 w-5 text-accent\" />}\n      </div>\n    </div>\n  );\n};\n\nconst CheckIcon = ({ className }: { className?: string }): React.JSX.Element => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={className}\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceList.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":31,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\n\nimport { ResourceItem } from './ResourceItem';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\n\ninterface ResourceListProps<T extends Resource> {\n  resources: T[];\n  rowHeight: number;\n  selectedIds: Set<number>;\n  onToggle: (id: number) => void;\n  height: number;\n}\n\nexport const ResourceList = <T extends Resource>({\n  resources,\n  rowHeight,\n  selectedIds,\n  onToggle,\n  height,\n}: ResourceListProps<T>) => {\n  const itemCount = resources.length;\n\n  const Row = ({ index, style }: ListChildComponentProps) => {\n    const item = resources[index];\n    return (\n      <div style={style}>\n        <div className=\"px-1 pb-2\">\n          <ResourceItem\n            key={item.id}\n            item={item}\n            isSelected={selectedIds.has(item.id)}\n            onToggle={onToggle}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <List\n      height={Math.min(height, itemCount * rowHeight)}\n      width=\"100%\"\n      itemCount={itemCount}\n      itemSize={rowHeight}\n    >\n      {Row}\n    </List>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/ResourceTabs.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":18,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":68,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\nimport { ChevronLeftIcon, ChevronRightIcon } from '@/app/shared/icons';\n\ninterface ResourceTabsProps {\n  languages: string[];\n  activeFilter: string;\n  onTabClick: (lang: string) => void;\n  tabsContainerRef: React.RefObject<HTMLDivElement | null>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n  className?: string;\n}\n\nexport const ResourceTabs = ({\n  languages,\n  activeFilter,\n  onTabClick,\n  tabsContainerRef,\n  canScrollLeft,\n  canScrollRight,\n  scrollTabsLeft,\n  scrollTabsRight,\n  className = '',\n}: ResourceTabsProps): React.JSX.Element => (\n  <div className={`flex items-center overflow-hidden ${className}`}>\n    <button\n      onClick={scrollTabsLeft}\n      disabled={!canScrollLeft}\n      className={`p-1 rounded-full mr-2 transition-colors ${\n        canScrollLeft\n          ? 'text-muted hover:text-foreground hover:bg-interactive-hover'\n          : 'text-muted cursor-not-allowed'\n      }`}\n    >\n      <ChevronLeftIcon size={20} />\n    </button>\n    <div ref={tabsContainerRef} className=\"flex items-center space-x-2 overflow-hidden flex-1\">\n      {languages.map((lang) => (\n        <button\n          key={lang}\n          onClick={() => onTabClick(lang)}\n          className={`flex-shrink-0 px-3 py-1 text-sm font-semibold border-b-2 transition-colors flex items-center justify-center ${\n            activeFilter === lang\n              ? 'border-accent text-accent'\n              : 'border-transparent text-muted hover:text-foreground hover:border-border'\n          }`}\n        >\n          {lang}\n        </button>\n      ))}\n    </div>\n    <button\n      onClick={scrollTabsRight}\n      disabled={!canScrollRight}\n      className={`p-1 rounded-full ml-2 transition-colors ${\n        canScrollRight\n          ? 'text-muted hover:text-foreground hover:bg-interactive-hover'\n          : 'text-muted cursor-not-allowed'\n      }`}\n    >\n      <ChevronRightIcon size={20} />\n    </button>\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/components/ResourcePanelHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/hooks/useListHeight.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ResizeObserver as ResizeObserverPolyfill } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\nexport const useListHeight = (isOpen: boolean) => {\n  const listContainerRef = useRef<HTMLDivElement>(null);\n  const [listHeight, setListHeight] = useState(0);\n\n  useEffect(() => {\n    const element = listContainerRef.current;\n    if (!element || !isOpen) return;\n\n    const updateHeight = () => {\n      const rect = element.getBoundingClientRect();\n      const fallback = window.innerHeight - rect.top;\n      setListHeight(rect.height || fallback);\n    };\n\n    updateHeight();\n\n    const ResizeObserverConstructor =\n      typeof ResizeObserver !== 'undefined' ? ResizeObserver : ResizeObserverPolyfill;\n\n    if (ResizeObserverConstructor) {\n      const observer = new ResizeObserverConstructor((entries) => {\n        for (const entry of entries) {\n          const rect = entry.target.getBoundingClientRect();\n          const fallback = window.innerHeight - rect.top;\n          setListHeight(entry.contentRect.height || fallback);\n        }\n      });\n      observer.observe(element);\n      return () => observer.disconnect();\n    }\n\n    window.addEventListener('resize', updateHeight);\n    return () => window.removeEventListener('resize', updateHeight);\n  }, [isOpen]);\n\n  return {\n    listContainerRef,\n    listHeight,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/resource-panel/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Juz.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { JuzNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getSurahByPage, JUZ_START_PAGES } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface JuzSummary {\n  number: number;\n  name: string;\n  surahRange: string;\n}\n\ninterface Props {\n  juzs: JuzSummary[];\n  chapters: Chapter[];\n  selectedJuzId: number | null;\n  setSelectedJuzId: (id: number) => void;\n  setSelectedPageId: (id: number) => void;\n  setSelectedSurahId: (id: number) => void;\n  rememberScroll: () => void;\n}\n\nexport const Juz = ({\n  juzs,\n  chapters,\n  selectedJuzId,\n  setSelectedJuzId,\n  setSelectedPageId,\n  setSelectedSurahId,\n  rememberScroll,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {juzs.map((juz) => {\n      const isActive = juz.number === selectedJuzId;\n      return (\n        <li key={juz.number}>\n          <JuzNavigationCard\n            href={`/juz/${juz.number}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: juz.number,\n              title: `Juz ${juz.number}`,\n              subtitle: juz.surahRange,\n            }}\n            onNavigate={() => {\n              setSelectedJuzId(juz.number);\n              const page = JUZ_START_PAGES[juz.number - 1];\n              setSelectedPageId(page);\n              const chap = getSurahByPage(page, chapters);\n              if (chap) setSelectedSurahId(chap.id);\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Page.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PageNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getJuzByPage, getSurahByPage } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Props {\n  pages: number[];\n  chapters: Chapter[];\n  selectedPageId: number | null;\n  setSelectedPageId: (id: number) => void;\n  setSelectedJuzId: (id: number) => void;\n  setSelectedSurahId: (id: number) => void;\n  rememberScroll: () => void;\n}\n\nexport const Page = ({\n  pages,\n  chapters,\n  selectedPageId,\n  setSelectedPageId,\n  setSelectedJuzId,\n  setSelectedSurahId,\n  rememberScroll,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {pages.map((p) => {\n      const isActive = p === selectedPageId;\n      return (\n        <li key={p}>\n          <PageNavigationCard\n            href={`/page/${p}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: p,\n              title: `Page ${p}`,\n            }}\n            onNavigate={() => {\n              setSelectedPageId(p);\n              setSelectedJuzId(getJuzByPage(p));\n              const chap = getSurahByPage(p, chapters);\n              if (chap) setSelectedSurahId(chap.id);\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/Surah.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SurahNavigationCard } from '@/app/shared/ui/cards/StandardNavigationCard';\nimport { getJuzByPage } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Props {\n  chapters: Chapter[];\n  selectedSurahId: number | null;\n  setSelectedSurahId: (id: number) => void;\n  setSelectedPageId: (id: number) => void;\n  setSelectedJuzId: (id: number) => void;\n  rememberScroll: () => void;\n  isTafsirPath: boolean;\n}\n\nexport const Surah = ({\n  chapters,\n  selectedSurahId,\n  setSelectedSurahId,\n  setSelectedPageId,\n  setSelectedJuzId,\n  rememberScroll,\n  isTafsirPath,\n}: Props) => (\n  <ul className=\"space-y-2\">\n    {chapters.map((chapter) => {\n      const isActive = chapter.id === selectedSurahId;\n      return (\n        <li key={chapter.id}>\n          <SurahNavigationCard\n            href={isTafsirPath ? `/tafsir/${chapter.id}/1` : `/surah/${chapter.id}`}\n            scroll={false}\n            data-active={isActive}\n            isActive={isActive}\n            content={{\n              id: chapter.id,\n              title: chapter.name_simple,\n              subtitle: `${chapter.revelation_place.charAt(0).toUpperCase() + chapter.revelation_place.slice(1)} • ${chapter.verses_count} verses`,\n              arabic: chapter.name_arabic,\n            }}\n            onNavigate={() => {\n              setSelectedSurahId(chapter.id);\n              const firstPage = chapter.pages?.[0] ?? 1;\n              setSelectedPageId(firstPage);\n              setSelectedJuzId(getJuzByPage(firstPage));\n              rememberScroll();\n            }}\n          />\n        </li>\n      );\n    })}\n  </ul>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/components/SidebarTabs.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":92,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\ninterface Tab {\n  key: 'Surah' | 'Juz' | 'Page';\n  label: string;\n}\n\ninterface Props {\n  tabs: Tab[];\n  activeTab: 'Surah' | 'Juz' | 'Page';\n  setActiveTab: (tab: 'Surah' | 'Juz' | 'Page') => void;\n  prepareForTabSwitch: (tab: 'Surah' | 'Juz' | 'Page') => void;\n}\n\nexport const SidebarTabs = ({ tabs, activeTab, setActiveTab, prepareForTabSwitch }: Props) => (\n  <div className=\"flex items-center p-1 rounded-full bg-interactive border border-border\">\n    {tabs.map(({ key, label }) => (\n      <button\n        key={key}\n        onClick={() => {\n          prepareForTabSwitch(key);\n          setActiveTab(key);\n        }}\n        className={`w-1/3 px-4 py-2 text-sm font-semibold rounded-full transition-colors ${\n          activeTab === key\n            ? 'bg-surface text-foreground shadow'\n            : 'text-muted hover:text-foreground hover:bg-surface/30'\n        }`}\n      >\n        {label}\n      </button>\n    ))}\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/hooks/useSelectionSync.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (53). Maximum allowed is 50.","line":14,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":69,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":19,"column":10,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\n\nimport { getJuzByPage, getSurahByPage, JUZ_START_PAGES } from '@/lib/utils/surah-navigation';\n\nimport type { Chapter } from '@/types';\n\ninterface Args {\n  currentSurahId?: number;\n  currentJuzId?: number;\n  currentPageId?: number;\n  chapters: Chapter[];\n}\n\nexport const useSelectionSync = ({\n  currentSurahId,\n  currentJuzId,\n  currentPageId,\n  chapters,\n}: Args) => {\n  const [selectedSurahId, setSelectedSurahId] = useState<number | null>(currentSurahId ?? null);\n  const [selectedJuzId, setSelectedJuzId] = useState<number | null>(currentJuzId ?? null);\n  const [selectedPageId, setSelectedPageId] = useState<number | null>(currentPageId ?? null);\n\n  useEffect(() => {\n    const handlers = [\n      {\n        condition: currentSurahId !== undefined,\n        action: () => {\n          setSelectedSurahId(currentSurahId!);\n          const chapter = chapters.find((c) => c.id === currentSurahId);\n          const page = chapter?.pages?.[0] ?? 1;\n          setSelectedPageId(page);\n          setSelectedJuzId(getJuzByPage(page));\n        },\n      },\n      {\n        condition: currentJuzId !== undefined,\n        action: () => {\n          setSelectedJuzId(currentJuzId!);\n          const page = JUZ_START_PAGES[currentJuzId! - 1];\n          setSelectedPageId(page);\n          const chapter = getSurahByPage(page, chapters);\n          if (chapter) setSelectedSurahId(chapter.id);\n        },\n      },\n      {\n        condition: currentPageId !== undefined,\n        action: () => {\n          setSelectedPageId(currentPageId!);\n          const page = currentPageId!;\n          setSelectedJuzId(getJuzByPage(page));\n          const chapter = getSurahByPage(page, chapters);\n          if (chapter) setSelectedSurahId(chapter.id);\n        },\n      },\n    ];\n\n    handlers.find((h) => h.condition)?.action();\n  }, [currentSurahId, currentJuzId, currentPageId, chapters]);\n\n  return {\n    selectedSurahId,\n    setSelectedSurahId,\n    selectedJuzId,\n    setSelectedJuzId,\n    selectedPageId,\n    setSelectedPageId,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/surah-sidebar/useSidebarScroll.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (62). Maximum allowed is 50.","line":16,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":13,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":76,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef } from 'react';\n\nimport { useSidebar } from '@/app/providers/SidebarContext';\nimport { useScrollCentering } from '@/lib/hooks/useScrollCentering';\nimport { useScrollPersistence } from '@/lib/hooks/useScrollPersistence';\n\ntype TabKey = 'Surah' | 'Juz' | 'Page';\n\ninterface Options {\n  activeTab: TabKey;\n  selectedSurahId: number | null;\n  selectedJuzId: number | null;\n  selectedPageId: number | null;\n}\n\nexport const useSidebarScroll = ({\n  activeTab,\n  selectedSurahId,\n  selectedJuzId,\n  selectedPageId,\n}: Options) => {\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const {\n    surahScrollTop,\n    setSurahScrollTop,\n    juzScrollTop,\n    setJuzScrollTop,\n    pageScrollTop,\n    setPageScrollTop,\n  } = useSidebar();\n\n  const {\n    handleScroll,\n    prepareForTabSwitch: persistencePrepare,\n    rememberScroll: persistRememberScroll,\n  } = useScrollPersistence<TabKey>({\n    scrollRef,\n    activeTab,\n    scrollTops: {\n      Surah: surahScrollTop,\n      Juz: juzScrollTop,\n      Page: pageScrollTop,\n    },\n    setScrollTops: {\n      Surah: setSurahScrollTop,\n      Juz: setJuzScrollTop,\n      Page: setPageScrollTop,\n    },\n    storageKeys: {\n      Surah: 'surahScrollTop',\n      Juz: 'juzScrollTop',\n      Page: 'pageScrollTop',\n    },\n  });\n\n  const { skipNextCentering, prepareForTabSwitch: centeringPrepare } = useScrollCentering<TabKey>({\n    scrollRef,\n    activeTab,\n    selectedIds: {\n      Surah: selectedSurahId,\n      Juz: selectedJuzId,\n      Page: selectedPageId,\n    },\n    scrollTops: {\n      Surah: surahScrollTop,\n      Juz: juzScrollTop,\n      Page: pageScrollTop,\n    },\n  });\n\n  const rememberScroll = (tab: TabKey) => {\n    persistRememberScroll(tab);\n    skipNextCentering(tab);\n  };\n\n  const prepareForTabSwitch = (nextTab: TabKey) => {\n    persistencePrepare();\n    centeringPrepare(nextTab);\n  };\n\n  return { scrollRef, handleScroll, prepareForTabSwitch, rememberScroll };\n};\n\nexport type { TabKey };\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/BaseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/GlassCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":40,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":101,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport React from 'react';\n\nimport { cn } from '@/lib/utils/cn';\n\nexport const GLASS_CARD_VARIANTS = {\n  surface: 'bg-surface-glass/60',\n  primary: 'bg-surface/60',\n  input: 'bg-input-background backdrop-blur-xl bg-surface-glass/60',\n} as const;\n\nexport const GLASS_CARD_SIZES = {\n  compact: 'p-3',\n  comfortable: 'p-4',\n  spacious: 'p-4 sm:p-5',\n  large: 'p-4 sm:p-6 md:p-8',\n} as const;\n\nexport const GLASS_CARD_RADIUS = {\n  lg: 'rounded-lg',\n  xl: 'rounded-xl',\n  '2xl': 'rounded-2xl',\n} as const;\n\nexport interface GlassCardProps {\n  children: React.ReactNode;\n  variant?: keyof typeof GLASS_CARD_VARIANTS;\n  size?: keyof typeof GLASS_CARD_SIZES;\n  radius?: keyof typeof GLASS_CARD_RADIUS;\n  className?: string;\n  href?: string;\n  onClick?: () => void;\n  asChild?: boolean;\n  animate?: boolean;\n}\n\nexport const GlassCard = React.forwardRef<HTMLDivElement | HTMLAnchorElement, GlassCardProps>(\n  (\n    {\n      children,\n      variant = 'surface',\n      size = 'comfortable',\n      radius = 'xl',\n      className,\n      href,\n      onClick,\n      animate = true,\n      ...props\n    },\n    ref\n  ) => {\n    const baseClasses = cn(\n      'backdrop-blur-xl shadow-lg hover:shadow-xl transition-all duration-300',\n      animate && 'content-visibility-auto animate-fade-in-up',\n      GLASS_CARD_VARIANTS[variant],\n      GLASS_CARD_SIZES[size],\n      GLASS_CARD_RADIUS[radius],\n      className\n    );\n\n    // If href is provided, render as Link\n    if (href) {\n      return (\n        <Link\n          ref={ref as React.ForwardedRef<HTMLAnchorElement>}\n          href={href}\n          className={cn('group', baseClasses)}\n          {...(props as React.AnchorHTMLAttributes<HTMLAnchorElement>)}\n        >\n          {children}\n        </Link>\n      );\n    }\n\n    // If onClick is provided, render as button\n    if (onClick) {\n      return (\n        <button\n          ref={ref as React.ForwardedRef<HTMLButtonElement>}\n          onClick={onClick}\n          className={cn('group text-left', baseClasses)}\n          {...(props as React.ButtonHTMLAttributes<HTMLButtonElement>)}\n        >\n          {children}\n        </button>\n      );\n    }\n\n    // Default: render as div\n    return (\n      <div\n        ref={ref as React.ForwardedRef<HTMLDivElement>}\n        className={cn('group', baseClasses)}\n        {...(props as React.HTMLAttributes<HTMLDivElement>)}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nGlassCard.displayName = 'GlassCard';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ListItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/NumberBadge.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from '@/lib/utils/cn';\n\ninterface NumberBadgeProps {\n  number: string | number;\n  isActive?: boolean;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst sizeClasses = {\n  sm: 'w-8 h-8 text-sm',\n  md: 'w-12 h-12 text-lg',\n  lg: 'w-16 h-16 text-xl',\n};\n\nexport const NumberBadge = ({\n  number,\n  isActive = false,\n  className,\n  size = 'md',\n}: NumberBadgeProps) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center rounded-xl font-bold transition-colors',\n        sizeClasses[size],\n        isActive\n          ? 'bg-number-badge text-accent'\n          : 'bg-number-badge text-accent group-hover:bg-number-badge-hover',\n        className\n      )}\n    >\n      {number}\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/Panel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'Panel' has too many lines (99). Maximum allowed is 50.","line":31,"column":27,"nodeType":"FunctionExpression","messageId":"exceed","endLine":138,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Function 'Panel' has a complexity of 25. Maximum allowed is 10.","line":31,"column":27,"nodeType":"FunctionExpression","messageId":"complex","endLine":138,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { memo } from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { cn } from '@/lib/utils/cn';\n\nimport { Button } from './Button';\n\nexport const PANEL_VARIANTS = {\n  sidebar: 'fixed top-0 bottom-0 right-0 w-80 bg-surface shadow-lg pt-safe pb-safe',\n  modal: 'fixed inset-4 bg-surface rounded-lg shadow-xl max-w-2xl max-h-96 mx-auto my-auto',\n  'modal-center': 'relative w-full max-w-md rounded-lg bg-surface shadow-xl',\n  'bottom-sheet':\n    'fixed bottom-0 left-0 right-0 bg-surface rounded-t-3xl shadow-2xl max-h-[90dvh] pb-safe',\n  overlay: 'fixed top-16 right-4 w-72 bg-surface rounded-lg shadow-lg border border-border',\n  fullscreen: 'fixed inset-0 bg-surface pt-safe pb-safe',\n} as const;\n\nexport interface PanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  variant?: keyof typeof PANEL_VARIANTS | string;\n  title?: string;\n  children: React.ReactNode;\n  className?: string;\n  showCloseButton?: boolean;\n  closeOnOverlayClick?: boolean;\n}\n\nexport const Panel = memo(function Panel({\n  isOpen,\n  onClose,\n  variant = 'sidebar',\n  title,\n  children,\n  className,\n  showCloseButton = true,\n  closeOnOverlayClick = true,\n}: PanelProps): React.JSX.Element {\n  if (!isOpen) return null;\n\n  const variantClass =\n    variant in PANEL_VARIANTS ? PANEL_VARIANTS[variant as keyof typeof PANEL_VARIANTS] : variant;\n\n  const showOverlay =\n    variant === 'sidebar' ||\n    variant === 'modal' ||\n    variant === 'modal-center' ||\n    variant === 'bottom-sheet' ||\n    variant === 'fullscreen';\n\n  // Modal center variant has different structure\n  if (variant === 'modal-center') {\n    return (\n      <div\n        className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-40 flex items-center justify-center\"\n        onClick={closeOnOverlayClick ? onClose : undefined}\n        onKeyDown={(e) => {\n          if (closeOnOverlayClick && (e.key === 'Escape' || e.key === 'Enter')) {\n            onClose();\n          }\n        }}\n        role=\"button\"\n        tabIndex={closeOnOverlayClick ? 0 : -1}\n        aria-label=\"Close panel\"\n      >\n        <div\n          className={cn('z-50 text-foreground p-6', variantClass, className)}\n          onPointerDown={(e) => e.stopPropagation()}\n          role=\"dialog\"\n          aria-modal=\"true\"\n        >\n          {/* Header */}\n          {(title || showCloseButton) && (\n            <header className=\"flex items-center justify-between mb-4\">\n              {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}\n              {showCloseButton && (\n                <Button variant=\"ghost\" size=\"icon\" onClick={onClose} aria-label=\"Close panel\">\n                  <CloseIcon size={18} />\n                </Button>\n              )}\n            </header>\n          )}\n\n          {/* Content */}\n          <div className=\"flex-1\">{children}</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Standard panel variants\n  return (\n    <>\n      {/* Overlay */}\n      {showOverlay && (\n        <div\n          className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-40\"\n          onClick={closeOnOverlayClick ? onClose : undefined}\n          onKeyDown={(e) => {\n            if (closeOnOverlayClick && (e.key === 'Escape' || e.key === 'Enter')) {\n              onClose();\n            }\n          }}\n          role=\"button\"\n          tabIndex={closeOnOverlayClick ? 0 : -1}\n          aria-label=\"Close panel\"\n        />\n      )}\n\n      {/* Panel */}\n      <div\n        className={cn(\n          'z-50 text-foreground transition-transform duration-300',\n          variantClass,\n          isOpen ? 'translate-x-0' : 'translate-x-full',\n          className\n        )}\n      >\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <header className=\"flex items-center justify-between p-4 border-b border-border\">\n            {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}\n            {showCloseButton && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onClose} aria-label=\"Close panel\">\n                <CloseIcon size={18} />\n              </Button>\n            )}\n          </header>\n        )}\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">{children}</div>\n      </div>\n    </>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ResourcePanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ResourcePanel' has too many lines (94). Maximum allowed is 50.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":129,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":57,"column":86,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":114,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":114,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\n\nimport { SearchInput } from '@/app/shared/components/SearchInput';\nimport { CheckIcon } from '@/app/shared/icons';\nimport { Spinner } from '@/app/shared/Spinner';\n\nimport { Panel } from './Panel';\n\nimport type { ResourceSelectionProps } from '@/types/components';\n\ninterface ResourceItem {\n  id: string | number;\n  name: string;\n  description?: string;\n  meta?: string;\n}\n\ninterface ResourcePanelProps<T extends ResourceItem> extends ResourceSelectionProps<T> {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  emptyStateMessage?: string;\n  searchPlaceholder?: string;\n  variant?: 'sidebar' | 'modal';\n  renderItem?: (item: T, isSelected: boolean, onSelect: () => void) => React.ReactNode;\n}\n\nexport function ResourcePanel<T extends ResourceItem>({\n  isOpen,\n  onClose,\n  title,\n  items,\n  selectedId,\n  onSelect,\n  loading = false,\n  emptyStateMessage = 'No items found',\n  searchPlaceholder = 'Search...',\n  variant = 'sidebar',\n  renderItem,\n}: ResourcePanelProps<T>) {\n  const [internalSearchTerm, setInternalSearchTerm] = useState('');\n\n  const filteredItems = useMemo(() => {\n    if (!internalSearchTerm.trim()) return items;\n\n    const searchLower = internalSearchTerm.toLowerCase().trim();\n    return items.filter(\n      (item) =>\n        item.name.toLowerCase().includes(searchLower) ||\n        item.description?.toLowerCase().includes(searchLower) ||\n        item.meta?.toLowerCase().includes(searchLower)\n    );\n  }, [items, internalSearchTerm]);\n\n  const defaultRenderItem = (item: T, isSelected: boolean, onSelectItem: () => void) => (\n    <button\n      key={item.id}\n      onClick={onSelectItem}\n      className={`w-full text-left p-3 rounded-lg transition-colors ${\n        isSelected\n          ? 'bg-accent/20 text-accent border border-accent/30'\n          : 'hover:bg-interactive/50 text-foreground'\n      }`}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-medium truncate\">{item.name}</h4>\n          {item.description && (\n            <p className=\"text-sm text-muted mt-1 line-clamp-2\">{item.description}</p>\n          )}\n          {item.meta && <p className=\"text-xs text-muted mt-1\">{item.meta}</p>}\n        </div>\n        {isSelected && <CheckIcon size={18} className=\"text-accent ml-2 flex-shrink-0\" />}\n      </div>\n    </button>\n  );\n\n  return (\n    <Panel\n      isOpen={isOpen}\n      onClose={onClose}\n      title={title}\n      variant={variant}\n      className=\"flex flex-col h-full\"\n    >\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        {/* Search */}\n        <div className=\"p-4 pb-2 border-b border-border\">\n          <SearchInput\n            value={internalSearchTerm}\n            onChange={setInternalSearchTerm}\n            placeholder={searchPlaceholder}\n            variant=\"panel\"\n            size=\"sm\"\n          />\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-4\">\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <Spinner className=\"h-6 w-6\" />\n            </div>\n          ) : filteredItems.length === 0 ? (\n            <div className=\"text-center py-8 text-muted\">\n              <p>{emptyStateMessage}</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {filteredItems.map((item) => {\n                const isSelected = item.id === selectedId;\n                const handleSelect = () => {\n                  onSelect(item.id);\n                  onClose();\n                };\n\n                return renderItem\n                  ? renderItem(item, isSelected, handleSelect)\n                  : defaultRenderItem(item, isSelected, handleSelect);\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </Panel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SearchField.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SearchField.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":89,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":91},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":60,"column":86,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":60,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":64,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { SearchInput } from '@/app/shared/components/SearchInput';\n\nimport type { SearchProps } from '@/types/components';\n\ninterface SearchFieldProps extends SearchProps {\n  variant?: 'main' | 'default' | 'glass' | 'header' | 'panel';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  label?: string;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\n/**\n * Generic search field component with optional label\n * Replaces simple search wrapper components throughout the app\n */\nexport const SearchField = ({\n  searchTerm,\n  setSearchTerm,\n  placeholder = 'Search...',\n  variant = 'default',\n  size = 'md',\n  className = '',\n  label,\n  onKeyDown,\n}: SearchFieldProps): React.JSX.Element => (\n  <div className={className}>\n    {label && (\n      <h2 className=\"text-sm font-semibold px-2 mb-3 text-muted uppercase tracking-wide\">\n        {label}\n      </h2>\n    )}\n    <SearchInput\n      value={searchTerm}\n      onChange={setSearchTerm}\n      placeholder={placeholder}\n      variant={variant}\n      size={size}\n      onKeyDown={onKeyDown}\n    />\n  </div>\n);\n\n// Predefined search fields for common use cases\nexport const FontSearchField = (props: Omit<SearchFieldProps, 'placeholder' | 'label'>) => (\n  <SearchField\n    {...props}\n    label=\"SEARCH FONTS\"\n    placeholder=\"Search for a font...\"\n    variant=\"panel\"\n    size=\"sm\"\n    className=\"px-2\"\n  />\n);\n\nexport const TranslationSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search by name or style...\" variant=\"panel\" />\n);\n\nexport const TafsirSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search tafsirs (exact match)...\" variant=\"panel\" />\n);\n\nexport const BookmarkSearchField = (props: Omit<SearchFieldProps, 'placeholder'>) => (\n  <SearchField {...props} placeholder=\"Search Bookmarks\" size=\"sm\" className=\"w-48\" />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SettingsPanel.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'SettingsPanel' has too many lines (72). Maximum allowed is 50.","line":39,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":111,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { memo } from 'react';\n\nimport { cn } from '@/lib/utils/cn';\n\nimport { Panel } from './Panel';\nimport {\n  SettingItem,\n  ToggleSetting,\n  SelectSetting,\n  RangeSetting,\n  type SettingItemProps,\n  type ToggleSettingProps,\n  type SelectSettingProps,\n  type RangeSettingProps,\n} from './settings';\n\nimport type { SettingsPanelProps } from '@/types/components';\n\ntype SettingsPanelItem =\n  | ({ type: 'toggle' } & ToggleSettingProps)\n  | ({ type: 'select' } & SelectSettingProps)\n  | ({ type: 'range' } & RangeSettingProps)\n  | ({ type: 'item' } & SettingItemProps)\n  | { type: 'custom'; element: React.ReactNode };\n\ninterface SettingsSection {\n  title?: string;\n  items: SettingsPanelItem[];\n}\n\ninterface SettingsPanelComponentProps extends SettingsPanelProps {\n  sections?: SettingsSection[];\n  actions?: React.ReactNode[];\n  children?: React.ReactNode;\n}\n\nexport const SettingsPanel = memo(function SettingsPanel({\n  isOpen,\n  onClose,\n  title = 'Settings',\n  sections = [],\n  actions = [],\n  className,\n  children,\n}: SettingsPanelComponentProps): React.JSX.Element {\n  return (\n    <Panel\n      isOpen={isOpen}\n      onClose={onClose}\n      title={title}\n      variant=\"sidebar\"\n      className={cn('flex flex-col h-full', className)}\n    >\n      <div className=\"flex-1 overflow-y-auto\">\n        {sections.map((section, index) => (\n          <div key={index} className=\"mb-6\">\n            {section.title && (\n              <h3 className=\"px-4 py-2 text-sm font-semibold text-muted uppercase tracking-wider\">\n                {section.title}\n              </h3>\n            )}\n            <div className=\"bg-surface/50 rounded-lg mx-4 mb-4\">\n              {section.items.map((item, itemIndex) => {\n                switch (item.type) {\n                  case 'toggle': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <ToggleSetting key={itemIndex} {...props} />;\n                  }\n                  case 'select': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <SelectSetting key={itemIndex} {...props} />;\n                  }\n                  case 'range': {\n                    const { type: _unusedType, ...props } = item;\n                    void _unusedType;\n                    return <RangeSetting key={itemIndex} {...props} />;\n                  }\n                  case 'item': {\n                    const { type: _unusedType, children: itemChildren, ...props } = item;\n                    void _unusedType;\n                    return (\n                      <SettingItem key={itemIndex} {...props}>\n                        {itemChildren}\n                      </SettingItem>\n                    );\n                  }\n                  case 'custom':\n                  default:\n                    return <div key={itemIndex}>{item.element}</div>;\n                }\n              })}\n            </div>\n          </div>\n        ))}\n        {children}\n      </div>\n\n      {actions.length > 0 && (\n        <div className=\"border-t border-border p-4 space-y-2\">\n          {actions.map((action, index) => (\n            <div key={index}>{action}</div>\n          ))}\n        </div>\n      )}\n    </Panel>\n  );\n});\n\nexport { SettingItem, ToggleSetting, SelectSetting, RangeSetting } from './settings';\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/SidebarCard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Link from 'next/link';\n\nimport { cn } from '@/lib/utils/cn';\n\ninterface SidebarCardProps {\n  href: string;\n  isActive?: boolean;\n  onClick?: () => void;\n  children: React.ReactNode;\n  className?: string;\n  scroll?: boolean;\n  'data-active'?: boolean;\n}\n\nexport const SidebarCard = ({\n  href,\n  isActive = false,\n  onClick,\n  children,\n  className,\n  scroll = false,\n  'data-active': dataActive,\n  ...props\n}: SidebarCardProps) => {\n  return (\n    <Link\n      href={href}\n      scroll={scroll}\n      data-active={dataActive}\n      onClick={onClick}\n      className={cn(\n        'group flex items-center p-4 gap-4 rounded-xl transition transform hover:scale-[1.02] h-[80px]',\n        isActive\n          ? 'bg-accent text-on-accent shadow-lg shadow-accent/30'\n          : 'bg-surface text-foreground shadow',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/TabToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ThemeSelector.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":13,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { SunIcon, MoonIcon } from '@/app/shared/icons';\n\ninterface ThemeSelectorProps {\n  className?: string;\n}\n\nexport const ThemeSelector = ({ className }: ThemeSelectorProps): React.JSX.Element => {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    const html = document.documentElement;\n    if (html.classList.contains('dark')) {\n      html.classList.remove('dark');\n      setTheme('light');\n    } else {\n      html.classList.add('dark');\n      setTheme('dark');\n    }\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className={`p-2 bg-button-secondary/40 rounded-full hover:bg-button-secondary-hover/60 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent ${className || ''}`}\n      aria-label=\"Toggle Theme\"\n    >\n      {theme === 'dark' ? (\n        <SunIcon className=\"w-5 h-5 text-accent\" />\n      ) : (\n        <MoonIcon className=\"w-5 h-5 text-accent\" />\n      )}\n    </button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/ThemeToggle.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (64). Maximum allowed is 50.","line":16,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":66,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\nimport { SunIcon, MoonIcon } from '@/app/shared/icons';\n\nimport { Button } from './Button';\n\ninterface ThemeToggleProps {\n  variant?: 'primary' | 'secondary' | 'ghost' | 'tabs' | string;\n  size?: 'sm' | 'md' | 'lg' | 'icon';\n  className?: string;\n}\n\nexport const ThemeToggle = ({\n  variant = 'ghost',\n  className,\n}: ThemeToggleProps): React.JSX.Element => {\n  const { setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<'light' | 'dark'>('light');\n\n  React.useEffect(() => {\n    const isDark = document.documentElement.classList.contains('dark');\n    setCurrentTheme(isDark ? 'dark' : 'light');\n  }, []);\n\n  const handleThemeChange = (theme: 'light' | 'dark') => {\n    setTheme(theme);\n    setCurrentTheme(theme);\n  };\n\n  // Tab-style variant\n  if (variant === 'tabs') {\n    return (\n      <div\n        className={`flex items-center p-1 rounded-full bg-interactive border border-border ${className || ''}`}\n      >\n        <button\n          onClick={() => handleThemeChange('light')}\n          className={`flex items-center justify-center px-3 py-2 rounded-full text-sm font-semibold transition-colors ${\n            currentTheme === 'light'\n              ? 'bg-surface shadow text-foreground'\n              : 'text-muted hover:text-foreground hover:bg-surface/50'\n          }`}\n          aria-label=\"Light theme\"\n        >\n          <SunIcon className=\"w-4 h-4\" />\n        </button>\n        <button\n          onClick={() => handleThemeChange('dark')}\n          className={`flex items-center justify-center px-3 py-2 rounded-full text-sm font-semibold transition-colors ${\n            currentTheme === 'dark'\n              ? 'bg-surface shadow text-foreground'\n              : 'text-muted hover:text-foreground hover:bg-surface/50'\n          }`}\n          aria-label=\"Dark theme\"\n        >\n          <MoonIcon className=\"w-4 h-4\" />\n        </button>\n      </div>\n    );\n  }\n\n  // Original button style for backward compatibility\n  const toggleTheme = () => {\n    const isDark = document.documentElement.classList.contains('dark');\n    setTheme(isDark ? 'light' : 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"icon-round\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className={`bg-button-secondary/40 hover:bg-button-secondary-hover/60 ${className || ''}`}\n      aria-label=\"Toggle Theme\"\n    >\n      {currentTheme === 'dark' ? (\n        <SunIcon className=\"w-5 h-5 text-accent\" />\n      ) : (\n        <MoonIcon className=\"w-5 h-5 text-accent\" />\n      )}\n    </Button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.utils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card.variants.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/renderers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/base-card/variant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkFolderCard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":29,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ChevronDownIcon } from '@/app/shared/icons';\nimport { BaseCard, BaseCardProps } from '@/app/shared/ui/BaseCard';\nimport { cn } from '@/lib/utils/cn';\n\nimport type { Folder } from '@/types/bookmark';\n\n/**\n * BookmarkFolderCard\n *\n * Specialized folder card for bookmark sidebar that maintains current design\n * while using the unified BaseCard system for consistent hover/animation behavior.\n */\n\ninterface BookmarkFolderCardProps extends Omit<BaseCardProps, 'children'> {\n  folder: Folder;\n  isExpanded?: boolean;\n  onToggleExpansion?: (folderId: string) => void;\n}\n\nexport const BookmarkFolderCard = ({\n  folder,\n  isExpanded = false,\n  onToggleExpansion,\n  className,\n  ...props\n}: BookmarkFolderCardProps): React.JSX.Element => {\n  const handleClick = () => {\n    onToggleExpansion?.(folder.id);\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\" // Use navigation variant for consistent hover behavior\n      animation=\"navigation\"\n      onClick={handleClick}\n      className={cn(\n        // Override with folder-specific styles while maintaining base structure\n        'p-3 rounded-lg border transition-all duration-200 cursor-pointer group h-auto',\n        'bg-surface border-border hover:border-accent/30 hover:bg-surface-hover hover:shadow-sm',\n        className as string\n      )}\n      {...props}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3 min-w-0\">\n          <div\n            className=\"w-8 h-8 rounded-lg flex items-center justify-center text-on-accent text-sm font-semibold\"\n            style={{\n              // Use folder color if provided, otherwise fall back to accent token\n              backgroundColor: folder.color || 'rgb(var(--color-accent))',\n            }}\n          >\n            {folder.name.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"font-semibold text-sm text-foreground truncate\">{folder.name}</div>\n            <div className=\"text-xs text-muted\">\n              {folder.bookmarks.length} verse{folder.bookmarks.length !== 1 ? 's' : ''}\n            </div>\n          </div>\n        </div>\n        <ChevronDownIcon\n          className={cn(\n            'w-4 h-4 text-muted transition-transform duration-200',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </div>\n    </BaseCard>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkNavigationCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":41,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":100,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\nimport { colors } from '@/app/shared/design-system/card-tokens';\nimport { BaseCard, BaseCardProps } from '@/app/shared/ui/BaseCard';\nimport { cn } from '@/lib/utils/cn';\n\n/**\n * BookmarkNavigationCard\n *\n * Specialized navigation card for bookmark sections (All Bookmarks, Pinned, etc.)\n * that maintains the current design while using the unified BaseCard system.\n */\n\n// Valid bookmark section identifiers\nexport type SectionId = 'bookmarks' | 'pinned' | 'last-read' | 'memorization';\n\nexport interface BookmarkNavigationContent {\n  id: SectionId;\n  icon: React.ComponentType<{ size?: number; className?: string }>;\n  label: string;\n  description: string;\n}\n\ninterface BookmarkNavigationCardProps extends Omit<BaseCardProps, 'children'> {\n  content: BookmarkNavigationContent;\n  onSectionChange?: (sectionId: SectionId) => void;\n}\n\n// Map section IDs to URLs for smooth navigation\nconst routes: Record<SectionId, string> = {\n  bookmarks: '/bookmarks',\n  pinned: '/bookmarks/pinned',\n  'last-read': '/bookmarks/last-read',\n  memorization: '/bookmarks/memorization',\n};\n\nconst getSectionHref = (sectionId: SectionId): string => routes[sectionId];\n\nexport const BookmarkNavigationCard = ({\n  content,\n  onSectionChange,\n  isActive = false,\n  className,\n  onClick,\n  ...props\n}: BookmarkNavigationCardProps): React.JSX.Element => {\n  const { id, icon: IconComponent, label, description } = content;\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\n    // Trigger section change before navigation for immediate feedback\n    onSectionChange?.(id);\n    if (onClick && typeof onClick === 'function') {\n      onClick(e);\n    }\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\"\n      animation=\"navigation\"\n      isActive={Boolean(isActive)}\n      href={getSectionHref(id)}\n      scroll={false}\n      className={cn('items-center', className as string)}\n      onClick={handleClick}\n      {...props}\n    >\n      {/* Icon Badge */}\n      <div\n        className={cn(\n          'w-8 h-8 rounded-lg flex items-center justify-center text-sm font-semibold shrink-0 transition-colors duration-200',\n          isActive\n            ? 'bg-on-accent/20 text-on-accent'\n            : `${colors.background.gradientBase} ${colors.text.accent} ${colors.background.gradientHover}`\n        )}\n      >\n        <IconComponent size={16} />\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 min-w-0 ml-3\">\n        <div\n          className={cn(\n            'font-semibold text-sm truncate transition-colors duration-200',\n            isActive ? 'text-on-accent' : 'text-foreground group-hover:text-accent'\n          )}\n        >\n          {label}\n        </div>\n        <div className=\"text-xs leading-tight truncate transition-colors duration-200\">\n          <span className={isActive ? colors.text.activeSecondary : 'text-muted'}>\n            {description}\n          </span>\n        </div>\n      </div>\n    </BaseCard>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/BookmarkVerseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/ContentBookmarkCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ContentBookmarkCard' has too many lines (51). Maximum allowed is 50.","line":31,"column":41,"nodeType":"FunctionExpression","messageId":"exceed","endLine":81,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { memo, useCallback } from 'react';\n\nimport { BaseCard, BaseCardProps } from '@/app/shared/ui/BaseCard';\n\nimport { Header } from './content-bookmark/Header';\nimport { VersePreview } from './content-bookmark/VersePreview';\ninterface BookmarkData {\n  verseKey?: string;\n  verseText?: string;\n  translation?: string;\n  surahName?: string;\n  createdAt: number;\n  verseId: string | number;\n  verseApiId?: number;\n}\ninterface ContentBookmarkCardProps extends Omit<BaseCardProps, 'children'> {\n  bookmark: BookmarkData;\n  isPlaying?: boolean;\n  isLoadingAudio?: boolean;\n  onPlayPause?: () => void;\n  isBookmarked?: boolean;\n  onBookmark?: () => void;\n  onNavigateToVerse?: () => void;\n  settings?: {\n    arabicFontFace?: string;\n    arabicFontSize?: number;\n    tajweed?: boolean;\n  };\n}\nexport const ContentBookmarkCard = memo(function ContentBookmarkCard({\n  bookmark,\n  isPlaying = false,\n  isLoadingAudio = false,\n  onPlayPause,\n  isBookmarked = true,\n  onBookmark,\n  onNavigateToVerse,\n  settings = {},\n  onClick,\n  ...props\n}: ContentBookmarkCardProps) {\n  const { verseKey, verseText, translation, surahName, createdAt } = bookmark;\n  const { arabicFontFace = 'font-amiri', arabicFontSize = 18, tajweed = false } = settings;\n  const handleCardClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement | HTMLAnchorElement>) => {\n      onNavigateToVerse?.();\n      onClick?.(e);\n    },\n    [onNavigateToVerse, onClick]\n  );\n  return (\n    <BaseCard\n      variant=\"bookmark\"\n      animation=\"bookmark\"\n      onClick={handleCardClick}\n      role=\"article\"\n      aria-label={`Bookmark for verse ${verseKey} from ${surahName}`}\n      {...props}\n    >\n      <Header\n        verseKey={verseKey}\n        surahName={surahName}\n        createdAt={createdAt}\n        isPlaying={isPlaying}\n        isLoadingAudio={isLoadingAudio}\n        isBookmarked={isBookmarked}\n        onPlayPause={onPlayPause}\n        onBookmark={onBookmark}\n        onNavigateToVerse={onNavigateToVerse}\n      />\n      <VersePreview\n        verseText={verseText}\n        translation={translation}\n        arabicFontFace={arabicFontFace}\n        arabicFontSize={arabicFontSize}\n        tajweed={tajweed}\n      />\n    </BaseCard>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/EnhancedFolderCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'EnhancedFolderCard' has too many lines (84). Maximum allowed is 50.","line":33,"column":46,"nodeType":"FunctionExpression","messageId":"exceed","endLine":121,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { motion } from 'framer-motion';\nimport React from 'react';\n\nimport { FolderContextMenu } from '@/app/(features)/bookmarks/components/FolderContextMenu';\nimport { FolderIcon } from '@/app/shared/icons';\nimport { BaseCard, BaseCardProps } from '@/app/shared/ui/BaseCard';\nimport { cn } from '@/lib/utils/cn';\n\n/**\n * EnhancedFolderCard\n *\n * Maintains the exact visual design of the current FolderCard\n * while using the unified BaseCard system underneath.\n */\n\ninterface FolderData {\n  name: string;\n  icon?: string;\n  color?: string;\n  bookmarks: Array<{ verseId: string; verseKey?: string }> | { length: number };\n}\n\ninterface EnhancedFolderCardProps extends Omit<BaseCardProps, 'children' | 'onClick'> {\n  folder: FolderData;\n  onEdit: () => void;\n  onDelete: () => void;\n  onRename: () => void;\n  onColorChange: () => void;\n  onClick?: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport const EnhancedFolderCard = React.memo(function EnhancedFolderCard({\n  folder,\n  onEdit,\n  onDelete,\n  onRename,\n  onColorChange,\n  onClick,\n  'aria-label': ariaLabel,\n  ...props\n}: EnhancedFolderCardProps): React.JSX.Element {\n  const bookmarkCount = Array.isArray(folder.bookmarks)\n    ? folder.bookmarks.length\n    : folder.bookmarks.length;\n\n  const defaultAriaLabel = `Open folder ${folder.name} with ${bookmarkCount} bookmarks`;\n\n  return (\n    <BaseCard\n      variant=\"folder\"\n      animation=\"folder\"\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement> | undefined}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={(ariaLabel || defaultAriaLabel) as string}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick?.(e as unknown as React.MouseEvent<HTMLElement>);\n        }\n      }}\n      className=\"relative\"\n      {...props}\n    >\n      <div className=\"flex items-start justify-between mb-4\">\n        {/* Icon and main content */}\n        <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n          <div className=\"flex-shrink-0 p-3 rounded-lg bg-gradient-to-br from-accent/10 to-accent/5 group-hover:from-accent/20 group-hover:to-accent/10 transition-colors duration-300\">\n            {folder.icon ? (\n              <span className={cn('text-2xl', folder.color || 'text-accent')} aria-hidden=\"true\">\n                {folder.icon}\n              </span>\n            ) : (\n              <FolderIcon\n                size={28}\n                className={cn(folder.color || 'text-accent')}\n                aria-hidden=\"true\"\n              />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-lg text-foreground truncate mb-1 group-hover:text-accent transition-colors duration-200\">\n              {folder.name}\n            </h3>\n            <p className=\"text-sm text-muted font-medium\">\n              {bookmarkCount} {bookmarkCount === 1 ? 'verse' : 'verses'}\n            </p>\n          </div>\n        </div>\n\n        {/* Context Menu */}\n        <div className=\"flex-shrink-0\">\n          <FolderContextMenu\n            onEdit={onEdit}\n            onDelete={onDelete}\n            onRename={onRename}\n            onColorChange={onColorChange}\n          />\n        </div>\n      </div>\n\n      {/* Progress bar */}\n      <div className=\"w-full h-1.5 bg-surface-hover rounded-full overflow-hidden\">\n        <motion.div\n          initial={{ width: 0 }}\n          animate={{ width: bookmarkCount > 0 ? '100%' : '25%' }}\n          transition={{ delay: 0.2, duration: 0.6, ease: 'easeOut' }}\n          className=\"h-full bg-gradient-to-r from-accent to-accent/80 rounded-full\"\n        />\n      </div>\n\n      {/* Last updated info */}\n      <div className=\"mt-3 flex items-center justify-between text-xs text-muted\">\n        <span>\n          {bookmarkCount > 0 ? `Last added ${new Date().toLocaleDateString()}` : 'Empty folder'}\n        </span>\n      </div>\n    </BaseCard>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/StandardNavigationCard.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":33,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":88,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 12. Maximum allowed is 10.","line":33,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":88,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\n\nimport { buildTextClasses } from '@/app/shared/design-system/card-tokens';\nimport { BaseCard, BaseCardProps } from '@/app/shared/ui/BaseCard';\nimport { NumberBadge } from '@/app/shared/ui/NumberBadge';\n\n/**\n * StandardNavigationCard\n *\n * A specialized navigation card that maintains the exact visual appearance\n * of current Surah/Juz/Page cards while providing layout flexibility.\n */\n\ninterface NavigationCardContent {\n  // Core navigation data\n  id: number;\n  title: string;\n  subtitle?: string;\n  arabic?: string;\n\n  // Display options\n  showBadge?: boolean;\n  showArabic?: boolean;\n  titleWeight?: 'bold' | 'semibold';\n}\n\ninterface StandardNavigationCardProps extends Omit<BaseCardProps, 'children'> {\n  content: NavigationCardContent;\n  onNavigate?: (id: number) => void;\n}\n\nexport const StandardNavigationCard = ({\n  content,\n  onNavigate,\n  isActive = false,\n  className = 'items-center ml-2',\n  ...props\n}: StandardNavigationCardProps): React.JSX.Element => {\n  const {\n    id,\n    title,\n    subtitle,\n    arabic,\n    showBadge = true,\n    showArabic = false,\n    titleWeight = 'semibold',\n  } = content;\n\n  const handleClick: React.MouseEventHandler<HTMLDivElement | HTMLAnchorElement> = () => {\n    onNavigate?.(id);\n  };\n\n  return (\n    <BaseCard\n      variant=\"navigation\"\n      animation=\"navigation\"\n      isActive={Boolean(isActive)}\n      className={className as string}\n      onClick={handleClick}\n      {...props}\n    >\n      {/* Number Badge */}\n      {showBadge && <NumberBadge number={id} isActive={Boolean(isActive)} />}\n\n      {/* Content Area */}\n      <div className={showArabic ? 'flex-grow min-w-0' : undefined}>\n        {/* Primary Title */}\n        <p\n          className={`\n          ${titleWeight === 'bold' ? 'font-bold' : 'font-semibold'}\n          ${buildTextClasses('primary', Boolean(isActive))}\n        `}\n        >\n          {title}\n        </p>\n\n        {/* Subtitle (if provided) */}\n        {subtitle && <p className={buildTextClasses('secondary', Boolean(isActive))}>{subtitle}</p>}\n      </div>\n\n      {/* Arabic Text (if enabled) */}\n      {showArabic && arabic && (\n        <p className={buildTextClasses('arabic', Boolean(isActive))}>{arabic}</p>\n      )}\n    </BaseCard>\n  );\n};\n\n/**\n * Convenience components for specific navigation types\n */\n\n// For Surah cards (complex layout with Arabic)\nexport const SurahNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: true,\n      titleWeight: 'bold',\n    }}\n  />\n);\n\n// For Juz cards (medium layout, no Arabic)\nexport const JuzNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: false,\n      titleWeight: 'semibold',\n    }}\n  />\n);\n\n// For Page cards (simple layout)\nexport const PageNavigationCard = (props: StandardNavigationCardProps): React.JSX.Element => (\n  <StandardNavigationCard\n    {...props}\n    content={{\n      ...props.content,\n      showArabic: false,\n      titleWeight: 'semibold',\n      subtitle: undefined, // Pages don't have subtitles\n    }}\n  />\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/__tests__/BookmarkNavigationCard.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_scroll' is assigned a value but never used.","line":17,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":90,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":33,"endColumn":92}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import userEvent from '@testing-library/user-event';\n\nimport { BookmarkNavigationCard } from '@/app/shared/ui/cards/BookmarkNavigationCard';\nimport { renderWithProviders, screen } from '@/app/testUtils/renderWithProviders';\n\nimport type { MockProps } from '@/tests/mocks';\n\njest.mock('next/link', () => {\n  return ({\n    children,\n    href,\n    onClick,\n    ...props\n  }: MockProps<\n    React.AnchorHTMLAttributes<HTMLAnchorElement> & { scroll?: boolean; href: string }\n  >) => {\n    const { scroll: _scroll, ...rest } = props;\n    return (\n      <a\n        href={href}\n        onClick={(e) => {\n          e.preventDefault();\n          onClick?.(e);\n        }}\n        {...rest}\n      >\n        {children}\n      </a>\n    );\n  };\n});\n\nconst DummyIcon = ({ size = 16, className = '' }: { size?: number; className?: string }) => (\n  <svg data-testid=\"icon\" width={size} height={size} className={className} />\n);\n\nbeforeAll(() => {\n  Object.defineProperty(window, 'matchMedia', {\n    writable: true,\n    value: jest.fn().mockImplementation((query) => ({\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: jest.fn(),\n      removeListener: jest.fn(),\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      dispatchEvent: jest.fn(),\n    })),\n  });\n});\n\ndescribe('BookmarkNavigationCard', () => {\n  const content = {\n    id: 'bookmarks',\n    icon: DummyIcon,\n    label: 'Bookmarks',\n    description: 'All bookmarks',\n  };\n\n  it('calls onSectionChange when clicked', async () => {\n    const handleSectionChange = jest.fn();\n    renderWithProviders(\n      <BookmarkNavigationCard content={content} onSectionChange={handleSectionChange} />\n    );\n\n    await userEvent.click(screen.getByText('Bookmarks'));\n    expect(handleSectionChange).toHaveBeenCalledWith('bookmarks');\n  });\n\n  it('applies active styling', () => {\n    const { container } = renderWithProviders(\n      <BookmarkNavigationCard content={content} isActive />\n    );\n\n    expect(container.firstChild).toHaveClass('bg-accent');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/__tests__/StandardNavigationCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/content-bookmark/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/content-bookmark/VersePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/cards/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/RangeSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/SelectSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/SettingItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/ToggleSetting.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/ui/settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/utils/time.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Arrow function has a complexity of 13. Maximum allowed is 10.","line":1,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":19,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const formatTimeAgo = (timestamp: number): string => {\n  const now = Date.now();\n  const diff = now - timestamp;\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const weeks = Math.floor(days / 7);\n  const months = Math.floor(days / 30);\n  const years = Math.floor(days / 365);\n\n  if (years > 0) return `${years} year${years === 1 ? '' : 's'} ago`;\n  if (months > 0) return `${months} month${months === 1 ? '' : 's'} ago`;\n  if (weeks > 0) return `${weeks} week${weeks === 1 ? '' : 's'} ago`;\n  if (days > 0) return `${days} day${days === 1 ? '' : 's'} ago`;\n  if (hours > 0) return `${hours} hour${hours === 1 ? '' : 's'} ago`;\n  if (minutes > 0) return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;\n  return 'Just now';\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/DesktopVerseActions.tsx","messages":[{"ruleId":"max-lines","severity":1,"message":"File has too many lines (168). Maximum allowed is 150.","line":161,"column":1,"nodeType":null,"messageId":"exceed","endLine":180,"endColumn":1}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useState } from 'react';\n\nimport { BookmarkModal } from '@/app/shared/components/BookmarkModal';\nimport {\n  PlayIcon,\n  PauseIcon,\n  BookmarkIcon,\n  BookmarkOutlineIcon,\n  ShareIcon,\n  BookReaderIcon,\n} from '@/app/shared/icons';\nimport { Spinner } from '@/app/shared/Spinner';\nimport { VerseActionsProps } from '@/app/shared/verse-actions/types';\nimport { defaultShare } from '@/app/shared/verse-actions/utils';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\ntype ActionHandler = () => void;\n\nconst PlayPauseButton = ({\n  isPlaying,\n  isLoadingAudio,\n  onPlayPause,\n}: {\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  onPlayPause: ActionHandler;\n}): React.JSX.Element => (\n  <button\n    aria-label={isPlaying ? 'Pause audio' : 'Play audio'}\n    onClick={onPlayPause}\n    title=\"Play/Pause\"\n    className={cn(\n      'p-1.5 rounded-full hover:bg-accent/10 transition',\n      isPlaying ? 'text-accent' : 'hover:text-accent',\n      touchClasses.focus\n    )}\n  >\n    {isLoadingAudio ? (\n      <Spinner className=\"h-4 w-4 text-accent\" />\n    ) : isPlaying ? (\n      <PauseIcon size={18} />\n    ) : (\n      <PlayIcon size={18} />\n    )}\n  </button>\n);\n\nconst TafsirLink = ({ verseKey }: { verseKey: string }): React.JSX.Element => (\n  <Link\n    href={`/tafsir/${verseKey.replace(':', '/')}`}\n    aria-label=\"View tafsir\"\n    title=\"Tafsir\"\n    className={cn(\n      'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n      touchClasses.focus\n    )}\n  >\n    <BookReaderIcon size={18} />\n  </Link>\n);\n\nconst NavigateToVerseLink = ({\n  onNavigateToVerse,\n}: {\n  onNavigateToVerse?: ActionHandler;\n}): React.JSX.Element | null => {\n  if (!onNavigateToVerse) return null;\n  return (\n    <Link\n      href=\"#\"\n      onClick={(e) => {\n        e.preventDefault();\n        onNavigateToVerse();\n      }}\n      aria-label=\"Go to verse\"\n      title=\"Go to verse\"\n      className={cn(\n        'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n        touchClasses.focus\n      )}\n    >\n      <BookReaderIcon size={18} />\n    </Link>\n  );\n};\n\nconst BookmarkButton = ({\n  isBookmarked,\n  showRemove,\n  onClick,\n}: {\n  isBookmarked: boolean;\n  showRemove: boolean;\n  onClick: ActionHandler;\n}): React.JSX.Element => (\n  <button\n    aria-label={showRemove ? 'Remove bookmark' : isBookmarked ? 'Remove bookmark' : 'Add bookmark'}\n    title={showRemove ? 'Remove bookmark' : 'Bookmark'}\n    onClick={onClick}\n    className={cn(\n      'p-1.5 rounded-full hover:bg-accent/10 transition',\n      isBookmarked || showRemove ? 'text-accent' : 'hover:text-accent',\n      touchClasses.focus\n    )}\n  >\n    {isBookmarked || showRemove ? <BookmarkIcon size={18} /> : <BookmarkOutlineIcon size={18} />}\n  </button>\n);\n\nconst ShareButton = ({ onShare }: { onShare: ActionHandler }): React.JSX.Element => (\n  <button\n    aria-label=\"Share\"\n    title=\"Share\"\n    onClick={onShare}\n    className={cn(\n      'p-1.5 rounded-full hover:bg-accent/10 hover:text-accent transition',\n      touchClasses.focus\n    )}\n  >\n    <ShareIcon size={18} />\n  </button>\n);\n\nexport const DesktopVerseActions = ({\n  verseKey,\n  verseId,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n  className = '',\n}: VerseActionsProps): React.JSX.Element => {\n  const [isBookmarkModalOpen, setIsBookmarkModalOpen] = useState(false);\n  const handleShare = onShare || defaultShare;\n  const handleBookmarkClick = (): void => {\n    if (showRemove && onBookmark) {\n      onBookmark();\n    } else {\n      setIsBookmarkModalOpen(true);\n    }\n  };\n\n  return (\n    <div className={cn('text-center space-y-2 flex-shrink-0', className)}>\n      <p className=\"font-semibold text-accent text-sm\">{verseKey}</p>\n      <div className=\"flex flex-col items-center space-y-1 text-muted\">\n        <PlayPauseButton\n          isPlaying={isPlaying}\n          isLoadingAudio={isLoadingAudio}\n          onPlayPause={onPlayPause}\n        />\n        <TafsirLink verseKey={verseKey} />\n        <NavigateToVerseLink onNavigateToVerse={onNavigateToVerse} />\n        <BookmarkButton\n          isBookmarked={Boolean(isBookmarked)}\n          showRemove={showRemove}\n          onClick={handleBookmarkClick}\n        />\n        <ShareButton onShare={handleShare} />\n      </div>\n\n      {/* BookmarkModal */}\n      <BookmarkModal\n        isOpen={isBookmarkModalOpen}\n        onClose={() => setIsBookmarkModalOpen(false)}\n        verseId={verseId || verseKey}\n        verseKey={verseKey}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/MobileBottomSheet.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'MobileBottomSheet' has too many lines (70). Maximum allowed is 50.","line":38,"column":39,"nodeType":"FunctionExpression","messageId":"exceed","endLine":108,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { memo } from 'react';\n\nimport { CloseIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { ActionList } from './components/ActionList';\nimport { useVerseActions } from './hooks/useVerseActions';\n\ninterface MobileBottomSheetProps {\n  isOpen: boolean;\n  onClose: () => void;\n  verseKey: string;\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  isBookmarked: boolean;\n  onPlayPause: () => void;\n  onBookmark: () => void;\n  onShare: () => void;\n  onNavigateToVerse?: () => void;\n  showRemove?: boolean;\n}\n\nconst backdropVariants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1 },\n};\n\nconst sheetVariants = {\n  hidden: { y: '100%', opacity: 0 },\n  visible: { y: 0, opacity: 1 },\n  exit: { y: '100%', opacity: 0 },\n};\n\nexport const MobileBottomSheet = memo(function MobileBottomSheet({\n  isOpen,\n  onClose,\n  verseKey,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n}: MobileBottomSheetProps): React.JSX.Element {\n  const actions = useVerseActions({\n    isPlaying,\n    isLoadingAudio,\n    isBookmarked,\n    showRemove,\n    verseKey,\n    onPlayPause,\n    onBookmark,\n    onShare,\n    onNavigateToVerse,\n    onClose,\n  });\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            variants={backdropVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            className=\"fixed inset-0 bg-surface-overlay/60 backdrop-blur-sm z-modal touch-none\"\n            onClick={onClose}\n          />\n          <motion.div\n            variants={sheetVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n            className=\"fixed bottom-0 left-0 right-0 bg-surface rounded-t-3xl shadow-2xl z-modal touch-pan-y pb-safe flex flex-col max-h-[90dvh]\"\n          >\n            <div className=\"flex justify-center pt-4 pb-2\">\n              <div className=\"w-10 h-1 bg-border rounded-full\" />\n            </div>\n            <div className=\"flex items-center justify-between px-6 py-4 border-b border-border\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Verse {verseKey}</h2>\n              <button\n                onClick={onClose}\n                className={cn(\n                  'p-2 rounded-full hover:bg-interactive transition-colors',\n                  touchClasses.target,\n                  touchClasses.gesture,\n                  touchClasses.focus\n                )}\n                aria-label=\"Close\"\n              >\n                <CloseIcon size={20} className=\"text-muted\" />\n              </button>\n            </div>\n            <ActionList actions={actions} onClose={onClose} />\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/MobileVerseActions.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (68). Maximum allowed is 50.","line":14,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":86,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":31,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\n\nimport { BookmarkModal } from '@/app/shared/components/BookmarkModal';\nimport { EllipsisHIcon } from '@/app/shared/icons';\nimport { touchClasses } from '@/lib/responsive';\nimport { cn } from '@/lib/utils/cn';\n\nimport { MobileBottomSheet } from './MobileBottomSheet';\nimport { VerseActionsProps } from './types';\nimport { defaultShare } from './utils';\n\nexport const MobileVerseActions = ({\n  verseKey,\n  verseId,\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  showRemove = false,\n  className = '',\n}: VerseActionsProps): React.JSX.Element => {\n  const [isBottomSheetOpen, setIsBottomSheetOpen] = useState(false);\n  const [isBookmarkModalOpen, setIsBookmarkModalOpen] = useState(false);\n  const handleShare = onShare || defaultShare;\n\n  const handleBookmarkClick = () => {\n    if (showRemove && onBookmark) {\n      onBookmark();\n    } else {\n      setIsBookmarkModalOpen(true);\n    }\n  };\n\n  return (\n    <>\n      <div className={cn('flex items-center justify-between', className)}>\n        {/* Verse number on the left */}\n        <div className=\"flex-shrink-0\">\n          <span className=\"font-semibold text-accent text-sm\">{verseKey}</span>\n        </div>\n\n        {/* Three-dot menu on the right */}\n        <button\n          onClick={() => setIsBottomSheetOpen(true)}\n          className={cn(\n            'p-1 rounded-full hover:bg-interactive transition-colors',\n            touchClasses.target,\n            touchClasses.gesture,\n            touchClasses.focus\n          )}\n          aria-label=\"Open verse actions menu\"\n        >\n          <EllipsisHIcon size={18} className=\"text-muted\" />\n        </button>\n      </div>\n\n      {/* Bottom Sheet */}\n      <MobileBottomSheet\n        isOpen={isBottomSheetOpen}\n        onClose={() => setIsBottomSheetOpen(false)}\n        verseKey={verseKey}\n        isPlaying={isPlaying}\n        isLoadingAudio={isLoadingAudio}\n        isBookmarked={isBookmarked}\n        onPlayPause={onPlayPause}\n        onBookmark={handleBookmarkClick}\n        onShare={handleShare}\n        onNavigateToVerse={onNavigateToVerse}\n        showRemove={showRemove}\n      />\n\n      {/* BookmarkModal */}\n      <BookmarkModal\n        isOpen={isBookmarkModalOpen}\n        onClose={() => setIsBookmarkModalOpen(false)}\n        verseId={verseId || verseKey}\n        verseKey={verseKey}\n      />\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/ResponsiveVerseActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/components/ActionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/hooks/useVerseActions.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useVerseActions' has too many lines (63). Maximum allowed is 50.","line":29,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":93,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ReactElement, createElement, useCallback } from 'react';\n\nimport {\n  PlayIcon,\n  PauseIcon,\n  BookmarkIcon,\n  BookmarkOutlineIcon,\n  ShareIcon,\n  BookReaderIcon,\n} from '@/app/shared/icons';\nimport { Spinner } from '@/app/shared/Spinner';\nimport { VerseActionItem } from '@/app/shared/verse-actions/types';\n\ninterface UseVerseActionsParams {\n  isPlaying: boolean;\n  isLoadingAudio: boolean;\n  isBookmarked: boolean;\n  showRemove: boolean;\n  verseKey: string;\n  onPlayPause: () => void;\n  onBookmark: () => void;\n  onShare: () => void;\n  onNavigateToVerse?: () => void;\n  onClose: () => void;\n}\n\nexport function useVerseActions({\n  isPlaying,\n  isLoadingAudio,\n  isBookmarked,\n  showRemove,\n  verseKey,\n  onPlayPause,\n  onBookmark,\n  onShare,\n  onNavigateToVerse,\n  onClose,\n}: UseVerseActionsParams): VerseActionItem[] {\n  const handleAction = useCallback(\n    (action: () => void) => {\n      action();\n      onClose();\n    },\n    [onClose]\n  );\n  const playPauseIcon: ReactElement = isLoadingAudio\n    ? createElement(Spinner, { className: 'h-5 w-5 text-accent' })\n    : isPlaying\n      ? createElement(PauseIcon, { size: 20 })\n      : createElement(PlayIcon, { size: 20 });\n\n  const bookmarkIcon: ReactElement =\n    isBookmarked || showRemove\n      ? createElement(BookmarkIcon, { size: 20 })\n      : createElement(BookmarkOutlineIcon, { size: 20 });\n\n  return [\n    {\n      label: isPlaying ? 'Pause Audio' : 'Play Audio',\n      icon: playPauseIcon,\n      onClick: () => handleAction(onPlayPause),\n      active: isPlaying,\n    },\n    {\n      label: 'View Tafsir',\n      icon: createElement(BookReaderIcon, { size: 20 }),\n      onClick: () => {},\n      href: `/tafsir/${verseKey.replace(':', '/')}`,\n    },\n    ...(onNavigateToVerse\n      ? [\n          {\n            label: 'Go to Verse',\n            icon: createElement(BookReaderIcon, { size: 20 }),\n            onClick: () => handleAction(onNavigateToVerse),\n          },\n        ]\n      : []),\n    {\n      label: showRemove ? 'Remove Bookmark' : isBookmarked ? 'Remove Bookmark' : 'Add Bookmark',\n      icon: bookmarkIcon,\n      onClick: () => handleAction(onBookmark),\n      active: isBookmarked || showRemove,\n    },\n    {\n      label: 'Share',\n      icon: createElement(ShareIcon, { size: 20 }),\n      onClick: () => handleAction(onShare),\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/shared/verse-actions/utils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":4,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ErrorHandler } from '@/src/infrastructure/errors';\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nexport const defaultShare = () => {\n  const url = typeof window !== 'undefined' ? window.location.href : '';\n  if (navigator.share) {\n    navigator.share({ title: 'Quran', url }).catch((err) => {\n      logger.warn('Share failed', undefined, err);\n      ErrorHandler.handleSync(err, { logError: false, reportError: false });\n    });\n  } else if (navigator.clipboard) {\n    navigator.clipboard.writeText(url).catch((err) => {\n      logger.warn('Share failed', undefined, err);\n      ErrorHandler.handleSync(err, { logError: false, reportError: false });\n    });\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/contextTestUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/assertions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/measures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/tester.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performance/tracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/performanceTestUtils.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/render.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, RenderOptions } from '@testing-library/react';\nimport { renderHook, RenderHookOptions } from '@testing-library/react';\nimport React from 'react';\n\nimport { createProviderWrapper, ContextProviderName } from './providers';\n\nexport function renderWithSpecificProviders(\n  ui: React.ReactElement,\n  providers: ContextProviderName[],\n  options?: Omit<RenderOptions, 'wrapper'>\n) {\n  const Wrapper = createProviderWrapper(providers, { provider: () => new Map() });\n  return render(ui, { wrapper: Wrapper, ...options });\n}\n\nexport function renderHookWithProviders<TProps, TResult>(\n  callback: (props: TProps) => TResult,\n  providers: ContextProviderName[],\n  options?: RenderHookOptions<TProps>\n) {\n  const Wrapper = createProviderWrapper(providers, { provider: () => new Map() });\n  return renderHook(callback, { wrapper: Wrapper, ...options });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/renderWithProviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/assertions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/app/testUtils/responsiveTestUtils/viewport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/app.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/audio.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/env/config.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":84,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":86,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":86,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\nconst envSchema = z.object({\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // API Configuration\n  NEXT_PUBLIC_API_URL: z.string().url().default('https://api.quran.com/api/v4'),\n  NEXT_PUBLIC_AUDIO_CDN_URL: z.string().url().default('https://verses.quran.com'),\n  NEXT_PUBLIC_IMAGE_CDN_URL: z.string().url().default('https://cdn.quran.com'),\n\n  // Cache Configuration\n  CACHE_TTL: z.string().default('3600').transform(Number),\n  ENABLE_OFFLINE_MODE: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n\n  // Logging Configuration\n  LOG_LEVEL: z.enum(['debug', 'info', 'warn', 'error']).default('info'),\n  ENABLE_CONSOLE_LOGGING: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n\n  // Performance Configuration\n  ENABLE_ANALYTICS: z\n    .string()\n    .default('false')\n    .transform((v) => v === 'true'),\n  API_TIMEOUT: z.string().default('10000').transform(Number),\n\n  // Feature Flags\n  ENABLE_TAFSIR: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_BOOKMARKS: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_SEARCH: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n  ENABLE_AUDIO: z\n    .string()\n    .default('true')\n    .transform((v) => v === 'true'),\n});\n\nexport type Config = z.infer<typeof envSchema>;\n\nlet config: Config;\n\ntry {\n  config = envSchema.parse(process.env);\n} catch (error) {\n  logger.error('❌ Invalid environment configuration:', undefined, error as Error);\n\n  // Provide fallback configuration in case of validation errors\n  config = {\n    NODE_ENV: 'development',\n    NEXT_PUBLIC_API_URL: 'https://api.quran.com/api/v4',\n    NEXT_PUBLIC_AUDIO_CDN_URL: 'https://verses.quran.com',\n    NEXT_PUBLIC_IMAGE_CDN_URL: 'https://cdn.quran.com',\n    CACHE_TTL: 3600,\n    ENABLE_OFFLINE_MODE: true,\n    LOG_LEVEL: 'info',\n    ENABLE_CONSOLE_LOGGING: true,\n    ENABLE_ANALYTICS: false,\n    API_TIMEOUT: 10000,\n    ENABLE_TAFSIR: true,\n    ENABLE_BOOKMARKS: true,\n    ENABLE_SEARCH: true,\n    ENABLE_AUDIO: true,\n  } as Config;\n}\n\nexport { config };\n\n// Helper functions for environment checks\nexport const isDevelopment = () => config.NODE_ENV === 'development';\nexport const isProduction = () => config.NODE_ENV === 'production';\nexport const isTest = () => config.NODE_ENV === 'test';\n\n// Feature flag helpers\nexport const isFeatureEnabled = (\n  feature: keyof Pick<\n    Config,\n    'ENABLE_TAFSIR' | 'ENABLE_BOOKMARKS' | 'ENABLE_SEARCH' | 'ENABLE_AUDIO' | 'ENABLE_ANALYTICS'\n  >\n): boolean => {\n  return config[feature];\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/features.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":125,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":125,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Application Configuration\n *\n * Centralised entry point that composes individual configuration segments and\n * validates them using Zod schemas.\n */\nimport { z } from 'zod';\n\nimport { apiConfig, apiSchema } from './api';\nimport { appConfig, appSchema } from './app';\nimport { audioConfig, audioSchema } from './audio';\nimport { cacheConfig, cacheSchema } from './cache';\nimport { featuresConfig, featuresSchema } from './features';\nimport { loggingConfig, loggingSchema } from './logging';\nimport { monitoringConfig, monitoringSchema } from './monitoring';\nimport { searchConfig, searchSchema } from './search';\nimport { securityConfig, securitySchema } from './security';\nimport { storageConfig, storageSchema } from './storage';\nimport { uiConfig, uiSchema } from './ui';\n\nconst configSchema = z.object({\n  app: appSchema,\n  api: apiSchema,\n  features: featuresSchema,\n  cache: cacheSchema,\n  storage: storageSchema,\n  audio: audioSchema,\n  ui: uiSchema,\n  search: searchSchema,\n  security: securitySchema,\n  monitoring: monitoringSchema,\n  logging: loggingSchema,\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nconst rawConfig = {\n  app: appConfig,\n  api: apiConfig,\n  features: featuresConfig,\n  cache: cacheConfig,\n  storage: storageConfig,\n  audio: audioConfig,\n  ui: uiConfig,\n  search: searchConfig,\n  security: securityConfig,\n  monitoring: monitoringConfig,\n  logging: loggingConfig,\n};\n\n/**\n * Validated and typed configuration.\n *\n * Throws an error if configuration validation fails.\n */\nexport const config: Config = (() => {\n  try {\n    return configSchema.parse(rawConfig);\n  } catch (error) {\n    let message = '❌ Configuration validation failed';\n\n    if (error instanceof z.ZodError) {\n      const details = error.errors\n        .map((err) => `  - ${err.path.join('.')}: ${err.message}`)\n        .join('\\n');\n      message += `\\n${details}`;\n    }\n\n    throw new Error(message);\n  }\n})();\n\n/** Environment helpers */\nexport const isDevelopment = config.app.environment === 'development';\nexport const isProduction = config.app.environment === 'production';\nexport const isTest = config.app.environment === 'test';\nexport const isStaging = config.app.environment === 'staging';\n\n/** Feature flags helper */\nexport const features = config.features;\n\n/**\n * Logging configuration helper\n */\nexport const shouldLog = (level: string): boolean => {\n  const levels = { debug: 0, info: 1, warn: 2, error: 3 } as const;\n  const currentLevel = levels[config.logging.level as keyof typeof levels] ?? 1;\n  const targetLevel = levels[level as keyof typeof levels] ?? 1;\n  return targetLevel >= currentLevel;\n};\n\n/**\n * Validate configuration at startup.\n *\n * Call this during application initialisation to ensure all required\n * configuration is present and valid.\n */\nexport function validateConfig(): string[] {\n  const warnings: string[] = [];\n\n  if (isProduction) {\n    if (!config.monitoring.sentry?.dsn && config.features.enableErrorTracking) {\n      warnings.push('⚠️  Error tracking is enabled but no Sentry DSN is configured');\n    }\n\n    if (!config.monitoring.analytics?.googleAnalyticsId && config.features.enableAnalytics) {\n      warnings.push('⚠️  Analytics is enabled but no Google Analytics ID is configured');\n    }\n  }\n\n  try {\n    new URL(config.api.quranBaseUrl);\n  } catch {\n    throw new Error('Invalid Quran API base URL');\n  }\n\n  return warnings;\n}\n\n/**\n * Get configuration subset for client-side usage.\n *\n * Only returns configuration that's safe to expose to the browser.\n */\nexport function getClientConfig() {\n  return {\n    app: {\n      name: config.app.name,\n      version: config.app.version,\n      environment: config.app.environment,\n    },\n    api: {\n      quranBaseUrl: config.api.quranBaseUrl,\n      timeout: config.api.timeout,\n    },\n    features: config.features,\n    ui: config.ui,\n    audio: config.audio,\n    search: config.search,\n    cache: {\n      ttl: config.cache.ttl,\n      enableIndexedDBCache: config.cache.enableIndexedDBCache,\n    },\n    storage: {\n      enableIndexedDB: config.storage.enableIndexedDB,\n      enableLocalStorage: config.storage.enableLocalStorage,\n    },\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/search.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/config/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/data/__tests__/juzData.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/jest.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/jest.setup.js","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":25,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":25,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":26,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport 'cross-fetch/polyfill';\nimport { jest } from '@jest/globals';\nimport nodeFetch from 'node-fetch';\n\n// Ensure fetch is available in the JSDOM environment\nif (typeof globalThis.fetch === 'undefined') {\n  if (typeof global.fetch === 'function') {\n    globalThis.fetch = (...args) => global.fetch(...args);\n  } else {\n    globalThis.fetch = (...args) => nodeFetch(...args);\n  }\n}\n\n// Minimal mock that satisfies Next's useIntersection requirements\nclass IntersectionObserverMock {\n  constructor(cb) {\n    this.cb = cb;\n  }\n  observe = (el) => {\n    if (this.cb) {\n      this.cb([{ isIntersecting: true, target: el }]);\n    }\n  };\n  unobserve = () => {};\n  disconnect = () => {};\n}\n\nObject.defineProperty(window, 'IntersectionObserver', {\n  writable: true,\n  configurable: true,\n  value: IntersectionObserverMock,\n});\nObject.defineProperty(global, 'IntersectionObserver', {\n  writable: true,\n  configurable: true,\n  value: IntersectionObserverMock,\n});\n\njest.mock('@/app/shared/components/adaptive-navigation', () => () => null);\njest.mock('@/lib/api/chapters', () => ({\n  getChapters: jest.fn().mockResolvedValue([\n    { id: 1, name_simple: 'Al-Fatihah', verses_count: 7 },\n    { id: 2, name_simple: 'Al-Baqarah', verses_count: 286 },\n  ]),\n}));\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus.hooks.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (115). Maximum allowed is 50.","line":13,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":138,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":28,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":28,"endColumn":56},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":32,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":35,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":41,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":41,"endColumn":56},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":42,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":49,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":58,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":58,"endColumn":89},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":71,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":71,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":72,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":72,"endColumn":43},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":75,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":75,"endColumn":46},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":83,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":83,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":84,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":84,"endColumn":43},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":85,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":85,"endColumn":60},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":85,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":85,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":94,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":94,"endColumn":51},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":95,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":97,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":96,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":96,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport {\n  useFocusTrap,\n  useFocusRestoration,\n  useAutoFocus,\n  useResponsiveFocus,\n  useRovingTabIndex,\n} from '@/lib/focus';\n\nimport { setupDom } from './focus/test-utils';\n\ndescribe('focus hooks', () => {\n  let container: HTMLElement;\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    ({ container, cleanup } = setupDom());\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('useFocusTrap', () => {\n    it('traps focus within container and wraps on Tab', () => {\n      const containerRef = { current: container };\n      renderHook(() => useFocusTrap(true, containerRef));\n      expect(document.activeElement?.id).toBe('btn1');\n      const lastEl = container.querySelector('#select1') as HTMLSelectElement;\n      lastEl.focus();\n      act(() => {\n        const tabEvent = new KeyboardEvent('keydown', { key: 'Tab', bubbles: true });\n        document.dispatchEvent(tabEvent);\n      });\n      expect(document.activeElement?.id).toBe('btn1');\n    });\n\n    it('handles Shift+Tab from first to last', () => {\n      const containerRef = { current: container };\n      renderHook(() => useFocusTrap(true, containerRef));\n      act(() => {\n        const shiftTab = new KeyboardEvent('keydown', {\n          key: 'Tab',\n          shiftKey: true,\n          bubbles: true,\n        });\n        document.dispatchEvent(shiftTab);\n      });\n      expect(document.activeElement?.id).toBe('select1');\n    });\n\n    it('restores previous focus when deactivated', () => {\n      const external = document.createElement('button');\n      document.body.appendChild(external);\n      external.focus();\n      const containerRef = { current: container };\n      const { rerender } = renderHook(({ active }) => useFocusTrap(active, containerRef), {\n        initialProps: { active: true },\n      });\n      rerender({ active: false });\n      expect(document.activeElement).toBe(external);\n      document.body.removeChild(external);\n    });\n  });\n\n  describe('useFocusRestoration', () => {\n    it('saves and restores focus by id', () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      target.focus();\n      const { result } = renderHook(() => useFocusRestoration());\n      act(() => result.current.saveFocus());\n      const other = container.querySelector('#btn1') as HTMLButtonElement;\n      other.focus();\n      act(() => result.current.restoreFocus());\n      expect(document.activeElement).toBe(target);\n    });\n\n    it('handles elements without id', () => {\n      const btn = document.createElement('button');\n      container.appendChild(btn);\n      btn.focus();\n      const { result } = renderHook(() => useFocusRestoration());\n      act(() => result.current.saveFocus());\n      expect(() => act(() => result.current.restoreFocus())).not.toThrow();\n      container.removeChild(btn);\n    });\n  });\n\n  describe('useAutoFocus', () => {\n    it('focuses element when condition is true', async () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      const ref = { current: target };\n      renderHook(() => useAutoFocus(true, ref, 10));\n      await act(async () => {\n        await new Promise((r) => setTimeout(r, 20));\n      });\n      expect(document.activeElement).toBe(target);\n    });\n\n    it('does not focus element when condition is false', async () => {\n      const target = container.querySelector('#btn2') as HTMLButtonElement;\n      const ref = { current: target };\n      renderHook(() => useAutoFocus(false, ref, 10));\n      await act(async () => {\n        await new Promise((r) => setTimeout(r, 20));\n      });\n      expect(document.activeElement).not.toBe(target);\n    });\n  });\n\n  describe('useResponsiveFocus', () => {\n    it('manages focus across breakpoint changes', () => {\n      const target = container.querySelector('#btn1') as HTMLButtonElement;\n      target.focus();\n      const { rerender } = renderHook(\n        ({ bp }: { bp: 'mobile' | 'tablet' | 'desktop' }) => useResponsiveFocus(bp, true),\n        { initialProps: { bp: 'mobile' } }\n      );\n      expect(() => rerender({ bp: 'desktop' })).not.toThrow();\n    });\n  });\n\n  describe('useRovingTabIndex', () => {\n    it('sets tabIndex and focuses active item', () => {\n      const button1 = container.querySelector('#btn1') as HTMLButtonElement;\n      const button2 = container.querySelector('#btn2') as HTMLButtonElement;\n      const input1 = container.querySelector('#input1') as HTMLInputElement;\n      const items = [{ current: button1 }, { current: button2 }, { current: input1 }];\n      const setActive = jest.fn();\n      renderHook(() => useRovingTabIndex(items, 0, setActive));\n      expect(button1.tabIndex).toBe(0);\n      expect(button2.tabIndex).toBe(-1);\n      expect(input1.tabIndex).toBe(-1);\n      expect(document.activeElement).toBe(button1);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus.utilities.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/focus/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/accessibility-performance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/cpu-battery.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (72). Maximum allowed is 50.","line":7,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":104,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":25,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":25,"endColumn":63},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":32,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":34,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":33,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":33,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useBreakpoint, useResponsiveState } from '@/lib/responsive';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\n\ndescribe('CPU and Battery Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('CPU Performance', () => {\n    it('should throttle expensive operations on mobile', async () => {\n      simulateDevice('iPhone SE');\n\n      const { result } = renderHook(() => useResponsiveState());\n\n      const startTime = performance.now();\n\n      for (let i = 0; i < 100; i++) {\n        matchMediaUtils.setViewportWidth(375 + (i % 10));\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 1));\n        });\n      }\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(2000);\n      expect(result.current.isMobile).toBe(false);\n    });\n\n    it('should debounce resize events efficiently', async () => {\n      let resizeCallCount = 0;\n\n      renderHook(() => {\n        resizeCallCount++;\n        return useBreakpoint();\n      });\n\n      const startTime = performance.now();\n\n      for (let i = 0; i < 20; i++) {\n        matchMediaUtils.setViewportWidth(375 + i * 10);\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 0));\n        });\n      }\n\n      const endTime = performance.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(1000);\n      expect(resizeCallCount).toBeLessThan(25);\n    });\n  });\n\n  describe('Battery Usage Optimization', () => {\n    it('should minimize unnecessary re-renders', async () => {\n      let renderCount = 0;\n\n      renderHook(() => {\n        renderCount++;\n        return useBreakpoint();\n      });\n\n      for (let i = 0; i < 10; i++) {\n        matchMediaUtils.setViewportWidth(375);\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 5));\n        });\n      }\n\n      expect(renderCount).toBeLessThanOrEqual(2);\n    });\n\n    it('should use passive event listeners where possible', () => {\n      const addEventListenerSpy = jest.spyOn(document, 'addEventListener');\n\n      renderHook(() => useBreakpoint());\n\n      const passiveListeners = addEventListenerSpy.mock.calls.filter(\n        (call) => call[2] && typeof call[2] === 'object' && call[2].passive\n      );\n\n      expect(passiveListeners.length).toBeGreaterThanOrEqual(0);\n\n      addEventListenerSpy.mockRestore();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/layout-shift.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/memory-network.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (99). Maximum allowed is 50.","line":7,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":135,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'matchMediaUtils' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":26,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":26,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":50,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":50,"endColumn":66},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":52,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":54,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":53,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":53,"endColumn":64},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":112,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":112,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useBreakpoint, useResponsiveState } from '@/lib/responsive';\n\nimport { setupMobilePerformanceTest, testPerformance } from './test-utils';\n\ndescribe('Memory and Network Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  describe('Memory Usage Optimization', () => {\n    it('should cleanup event listeners properly', () => {\n      const addEventListenerSpy = jest.spyOn(window, 'addEventListener');\n      const removeEventListenerSpy = jest.spyOn(window, 'removeEventListener');\n\n      const { unmount } = renderHook(() => useBreakpoint());\n\n      void addEventListenerSpy.mock.calls.length;\n\n      unmount();\n\n      const removeCalls = removeEventListenerSpy.mock.calls.length;\n\n      expect(removeCalls).toBeGreaterThan(0);\n\n      addEventListenerSpy.mockRestore();\n      removeEventListenerSpy.mockRestore();\n    });\n\n    it('should not create memory leaks during rapid re-renders', async () => {\n      interface PerformanceWithMemory extends Performance {\n        memory?: { usedJSHeapSize: number };\n      }\n      const performanceWithMemory = performance as PerformanceWithMemory;\n      const initialMemory = performanceWithMemory.memory\n        ? performanceWithMemory.memory.usedJSHeapSize\n        : 0;\n\n      for (let i = 0; i < 50; i++) {\n        const { unmount } = renderHook(() => useResponsiveState());\n\n        await act(async () => {\n          await new Promise((resolve) => setTimeout(resolve, 1));\n        });\n\n        unmount();\n      }\n\n      const globalWithGc = global as typeof globalThis & { gc?: () => void };\n      if (globalWithGc.gc) {\n        globalWithGc.gc();\n      }\n\n      const finalMemory = performanceWithMemory.memory\n        ? performanceWithMemory.memory.usedJSHeapSize\n        : 0;\n\n      if (performanceWithMemory.memory) {\n        const memoryGrowth = finalMemory - initialMemory;\n        expect(memoryGrowth).toBeLessThan(1024 * 1024);\n      }\n    });\n  });\n\n  describe('Network Performance', () => {\n    it('should optimize image loading for mobile connections', async () => {\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: '3g',\n          downlink: 1.5,\n          rtt: 200,\n        },\n        configurable: true,\n      });\n\n      const container = document.createElement('div');\n      container.innerHTML = `\n        <img src=\"/test-image-1.jpg\" alt=\"Test 1\" />\n        <img src=\"/test-image-2.jpg\" alt=\"Test 2\" />\n        <img src=\"/test-image-3.jpg\" alt=\"Test 3\" />\n      `;\n      document.body.appendChild(container);\n\n      const result = await testPerformance.testImageLoading(container);\n\n      expect(result.totalImages).toBe(3);\n\n      document.body.removeChild(container);\n    });\n\n    it('should preload critical resources efficiently', async () => {\n      const criticalResources = ['/critical-style.css', '/critical-script.js', '/hero-image.jpg'];\n\n      const startTime = performance.now();\n\n      const preloadPromises = criticalResources.map((resource) => {\n        return new Promise((resolve) => {\n          const link = document.createElement('link');\n          link.rel = 'preload';\n          link.href = resource;\n\n          const timeout = setTimeout(() => resolve(resource), 50);\n\n          link.onload = () => {\n            clearTimeout(timeout);\n            resolve(resource);\n          };\n          link.onerror = () => {\n            clearTimeout(timeout);\n            resolve(resource);\n          };\n\n          document.head.appendChild(link);\n        });\n      });\n\n      await Promise.all(preloadPromises);\n\n      const endTime = performance.now();\n      const preloadTime = endTime - startTime;\n\n      expect(preloadTime).toBeLessThan(500);\n    }, 10000);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/real-world.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (59). Maximum allowed is 50.","line":7,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useResponsiveState } from '@/lib/responsive';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\n\ndescribe('Real-World Performance Scenarios', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('should handle typical user interactions efficiently', async () => {\n    simulateDevice('iPhone 12 Pro');\n\n    const { result } = renderHook(() => useResponsiveState());\n\n    const startTime = performance.now();\n\n    const scenarios = [\n      () => matchMediaUtils.setViewportWidth(390),\n      () => matchMediaUtils.setViewportWidth(844),\n      () => matchMediaUtils.setViewportWidth(390),\n      () => matchMediaUtils.setViewportWidth(375),\n    ];\n\n    for (const scenario of scenarios) {\n      scenario();\n      await act(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 16));\n      });\n    }\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(100);\n    expect(result.current.isMobile).toBe(true);\n  });\n\n  it('should maintain performance during complex responsive layouts', async () => {\n    const container = document.createElement('div');\n    container.innerHTML = `\n      <div class=\"responsive-grid\">\n        ${Array.from({ length: 50 }, (_, i) => `<div class=\"grid-item\">Item ${i + 1}</div>`).join('')}\n      </div>\n    `;\n    document.body.appendChild(container);\n\n    const startTime = performance.now();\n\n    simulateDevice('iPhone SE');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    simulateDevice('iPad');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    simulateDevice('Desktop Small');\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(150);\n\n    document.body.removeChild(container);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/responsive-hooks.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (56). Maximum allowed is 50.","line":7,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":83,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useBreakpoint, useResponsiveState } from '@/lib/responsive';\n\nimport { setupMobilePerformanceTest, simulateDevice } from './test-utils';\n\ndescribe('Responsive Hook Performance', () => {\n  let matchMediaUtils: ReturnType<typeof setupMobilePerformanceTest>['matchMediaUtils'];\n  let cleanup: () => void;\n\n  beforeEach(() => {\n    const setup = setupMobilePerformanceTest();\n    matchMediaUtils = setup.matchMediaUtils;\n    cleanup = setup.cleanup;\n  });\n\n  afterEach(() => {\n    cleanup();\n  });\n\n  it('should initialize quickly on mobile devices', async () => {\n    simulateDevice('iPhone SE');\n    matchMediaUtils.setViewportWidth(375);\n\n    const startTime = performance.now();\n\n    const { result } = renderHook(() => useBreakpoint());\n\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const initTime = endTime - startTime;\n\n    expect(initTime).toBeLessThan(50);\n    expect(result.current).toBe('mobile');\n  });\n\n  it('should handle rapid viewport changes efficiently', async () => {\n    const { result } = renderHook(() => useBreakpoint());\n\n    const startTime = performance.now();\n\n    const widths = [375, 390, 414, 428, 375];\n\n    for (const width of widths) {\n      matchMediaUtils.setViewportWidth(width);\n\n      await act(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 1));\n      });\n    }\n\n    const endTime = performance.now();\n    const totalTime = endTime - startTime;\n\n    expect(totalTime).toBeLessThan(100);\n    expect(result.current).toBe('mobile');\n  });\n\n  it('should maintain performance with multiple responsive hooks', async () => {\n    const startTime = performance.now();\n\n    const { result: breakpoint } = renderHook(() => useBreakpoint());\n    const { result: responsiveState1 } = renderHook(() => useResponsiveState());\n    const { result: responsiveState2 } = renderHook(() => useResponsiveState());\n    const { result: responsiveState3 } = renderHook(() => useResponsiveState());\n\n    await act(async () => {\n      await new Promise((resolve) => setTimeout(resolve, 10));\n    });\n\n    const endTime = performance.now();\n    const initTime = endTime - startTime;\n\n    expect(initTime).toBeLessThan(100);\n\n    expect(breakpoint.current).toBe(responsiveState1.current.breakpoint);\n    expect(responsiveState1.current.breakpoint).toBe(responsiveState2.current.breakpoint);\n    expect(responsiveState2.current.breakpoint).toBe(responsiveState3.current.breakpoint);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/mobile-performance/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-focus.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/accessibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/breakpoints.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":30,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":91,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":35,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":79,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getOrientationByWidth } from './orientation';\n\nimport type { Orientation } from './orientation';\n\n/**\n * Device presets for responsive testing\n */\nexport const devicePresets = {\n  'iPhone SE': { width: 375, height: 667, orientation: 'portrait' },\n  'iPhone 12 Pro': { width: 390, height: 844, orientation: 'portrait' },\n  'iPhone 12 Pro Landscape': { width: 844, height: 390, orientation: 'landscape' },\n  iPad: { width: 768, height: 1024, orientation: 'portrait' },\n  'iPad Landscape': { width: 1024, height: 768, orientation: 'landscape' },\n  'Desktop Small': { width: 1024, height: 768, orientation: 'landscape' },\n  'Desktop Large': { width: 1440, height: 900, orientation: 'landscape' },\n  'Desktop 4K': { width: 3840, height: 2160, orientation: 'landscape' },\n} as const;\n\nexport type DevicePreset = keyof typeof devicePresets;\n\n/**\n * Mock window.matchMedia for responsive testing\n */\ninterface MatchMediaMock {\n  matchMediaMock: jest.Mock;\n  setViewportWidth: (width: number) => void;\n  cleanup: () => void;\n}\n\nexport const createMatchMediaMock = (): MatchMediaMock => {\n  let currentWidth = 1024; // Default desktop width\n\n  const listeners = new Map<string, Set<(e: MediaQueryListEvent) => void>>();\n\n  const evaluate = (query: string) => {\n    const minWidthMatch = query.match(/\\(min-width:\\s*(\\d+)px\\)/);\n    const orientationMatch = query.match(/\\(orientation:\\s*(landscape|portrait)\\)/);\n\n    if (minWidthMatch) {\n      const minWidth = parseInt(minWidthMatch[1], 10);\n      return currentWidth >= minWidth;\n    }\n    if (orientationMatch) {\n      const orientation = orientationMatch[1];\n      return getOrientationByWidth(currentWidth) === orientation;\n    }\n    return false;\n  };\n\n  const matchMediaMock = jest.fn((query: string) => {\n    const mockMediaQueryList = {\n      matches: evaluate(query),\n      media: query,\n      onchange: null as ((e: MediaQueryListEvent) => void) | null,\n      addEventListener: jest.fn((event: string, listener: (e: MediaQueryListEvent) => void) => {\n        if (event !== 'change') return;\n        const set = listeners.get(query) ?? new Set();\n        set.add(listener);\n        listeners.set(query, set);\n      }),\n      removeEventListener: jest.fn((event: string, listener: (e: MediaQueryListEvent) => void) => {\n        if (event !== 'change') return;\n        const set = listeners.get(query);\n        set?.delete(listener);\n      }),\n      dispatchEvent: jest.fn(),\n    };\n\n    return mockMediaQueryList;\n  });\n\n  const notify = () => {\n    listeners.forEach((set, query) => {\n      const matches = evaluate(query);\n      set.forEach((listener) => listener({ matches, media: query } as MediaQueryListEvent));\n    });\n  };\n\n  const setViewportWidth = (width: number) => {\n    currentWidth = width;\n    notify();\n  };\n\n  return {\n    matchMediaMock,\n    setViewportWidth,\n    cleanup: () => {\n      listeners.clear();\n    },\n  };\n};\n\n/**\n * Device simulation utilities\n */\ninterface SimulatedDevice {\n  width: number;\n  height: number;\n  orientation: Orientation;\n}\n\nexport const simulateDevice = (deviceOrWidth: DevicePreset | number): SimulatedDevice => {\n  const device =\n    typeof deviceOrWidth === 'number'\n      ? { width: deviceOrWidth, height: 800, orientation: 'landscape' as const }\n      : devicePresets[deviceOrWidth];\n\n  Object.defineProperty(window, 'innerWidth', {\n    writable: true,\n    configurable: true,\n    value: device.width,\n  });\n\n  Object.defineProperty(window, 'innerHeight', {\n    writable: true,\n    configurable: true,\n    value: device.height,\n  });\n\n  return device;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/orientation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive-test-utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive.orientation.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":7,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":69,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":11,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":11,"endColumn":31},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":37,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":37,"endColumn":59},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":62,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":64,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":63,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":63,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook } from '@testing-library/react';\n\nimport { useOrientation, getOrientationValue } from '@/lib/responsive';\n\nimport { testResponsiveHook } from './responsive/test-utils';\n\ndescribe('Responsive Orientation', () => {\n  describe('useOrientation', () => {\n    it('detects orientation correctly', async () => {\n      await testResponsiveHook(\n        () => useOrientation(),\n        [\n          {\n            device: 'iPhone 12 Pro',\n            expected: 'portrait',\n            description: 'Portrait device returns portrait',\n          },\n          {\n            device: 'iPhone 12 Pro Landscape',\n            expected: 'landscape',\n            description: 'Landscape device returns landscape',\n          },\n          {\n            device: 'Desktop Small',\n            expected: 'landscape',\n            description: 'Desktop returns landscape',\n          },\n        ]\n      );\n    });\n\n    it('handles SSR correctly', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      const { result } = renderHook(() => useOrientation());\n      expect(result.current).toBe('portrait');\n\n      globalWithWindow.window = originalWindow;\n    });\n  });\n\n  describe('getOrientationValue', () => {\n    it('returns orientation-specific value when available', () => {\n      const config = { landscape: 'wide' };\n      expect(getOrientationValue(config, 'default', 'landscape')).toBe('wide');\n    });\n\n    it('falls back to default when orientation value is missing', () => {\n      const config = { portrait: 'tall' };\n      expect(getOrientationValue(config, 'default', 'landscape')).toBe('default');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles missing window object', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      expect(() => {\n        renderHook(() => useOrientation());\n      }).not.toThrow();\n\n      globalWithWindow.window = originalWindow;\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive.width.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (96). Maximum allowed is 50.","line":13,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":120,"endColumn":2},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":27,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":27,"endColumn":30},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":50,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":50,"endColumn":58},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":57,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":57,"endColumn":58},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":58,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":61,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":69,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":69,"endColumn":96},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":108,"column":14,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":110,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":109,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":109,"endColumn":41},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":116,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":116,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport {\n  useBreakpoint,\n  useResponsiveValue,\n  getResponsiveValue,\n  getVariantForBreakpoint,\n  layoutPatterns,\n} from '@/lib/responsive';\n\nimport { testResponsiveHook, setupMatchMediaMock } from './responsive/test-utils';\n\ndescribe('Responsive Width', () => {\n  let matchMediaUtils: ReturnType<typeof setupMatchMediaMock>;\n\n  beforeEach(() => {\n    matchMediaUtils = setupMatchMediaMock();\n  });\n  afterEach(() => {\n    matchMediaUtils.cleanup();\n    jest.clearAllMocks();\n  });\n\n  describe('useBreakpoint', () => {\n    it('returns correct breakpoints for devices', async () => {\n      await testResponsiveHook(\n        () => useBreakpoint(),\n        [\n          { device: 'iPhone SE', expected: 'mobile', description: 'iPhone SE should be mobile' },\n          { device: 'iPad', expected: 'tablet', description: 'iPad should be tablet' },\n          {\n            device: 'Desktop Small',\n            expected: 'desktop',\n            description: 'Desktop Small should be desktop',\n          },\n          {\n            device: 'Desktop Large',\n            expected: 'wide',\n            description: 'Desktop Large should be wide',\n          },\n        ]\n      );\n    });\n\n    it('handles SSR correctly', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n\n      const { result } = renderHook(() => useBreakpoint());\n      expect(result.current).toBe('mobile');\n\n      globalWithWindow.window = originalWindow;\n    });\n\n    it('updates on resize', () => {\n      const { result } = renderHook(() => useBreakpoint());\n      act(() => {\n        matchMediaUtils.setViewportWidth(375);\n        matchMediaUtils.setViewportWidth(768);\n      });\n      expect(result.current).toBe('tablet');\n    });\n  });\n\n  describe('useResponsiveValue', () => {\n    it('returns values for breakpoints', async () => {\n      await testResponsiveHook(\n        () => useResponsiveValue({ mobile: 'compact', tablet: 'default', desktop: 'expanded' }),\n        [\n          { device: 'iPhone SE', expected: 'compact', description: 'Mobile uses compact value' },\n          { device: 'iPad', expected: 'default', description: 'Tablet uses default value' },\n          {\n            device: 'Desktop Small',\n            expected: 'expanded',\n            description: 'Desktop uses expanded value',\n          },\n        ]\n      );\n    });\n\n    it('falls back to mobile', () => {\n      const config = { mobile: 'fallback' };\n      expect(getResponsiveValue('tablet', config)).toBe('fallback');\n      expect(getResponsiveValue('desktop', config)).toBe('fallback');\n    });\n  });\n\n  describe('helpers', () => {\n    it('maps breakpoints to variants', () => {\n      expect(getVariantForBreakpoint('mobile')).toBe('compact');\n      expect(getVariantForBreakpoint('tablet')).toBe('default');\n      expect(getVariantForBreakpoint('desktop')).toBe('expanded');\n      expect(getVariantForBreakpoint('wide')).toBe('expanded');\n    });\n\n    it('includes pt-safe for mobile and tablet headers', () => {\n      expect(layoutPatterns.adaptiveHeader.mobile).toContain('pt-safe');\n      expect(layoutPatterns.adaptiveHeader.tablet).toContain('pt-safe');\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles missing window', () => {\n      const originalWindow = global.window;\n      const globalWithWindow = global as typeof globalThis & { window?: unknown };\n      delete globalWithWindow.window;\n      expect(() => {\n        renderHook(() => useBreakpoint());\n      }).not.toThrow();\n      globalWithWindow.window = originalWindow;\n    });\n\n    it('handles zero-width viewports', () => {\n      matchMediaUtils.setViewportWidth(0);\n      const { result } = renderHook(() => useBreakpoint());\n      expect(result.current).toBe('mobile');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/__tests__/responsive/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/apiMocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/chapters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/fetch-verses.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (52). Maximum allowed is 50.","line":6,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":61,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { API_BASE_URL } from '@/lib/api';\nimport { fetchVerses } from '@/lib/api/verses';\n\nimport type { RawVerse } from './apiMocks';\n\ndescribe('fetchVerses', () => {\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('constructs correct URL and normalizes verses', async () => {\n    const mockVerse: RawVerse = {\n      id: 1,\n      verse_key: '1:1',\n      text_uthmani: 'text',\n      words: [{ id: 1, text: 'foo', translation: { text: 'bar' } }],\n    };\n\n    global.fetch = jest.fn().mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve({ pagination: { total_pages: 2 }, verses: [mockVerse] }),\n    }) as jest.Mock;\n\n    const result = await fetchVerses({\n      type: 'by_chapter',\n      id: 1,\n      translationIds: 20,\n      page: 1,\n      perPage: 1,\n      wordLang: 'en',\n    });\n    expect(global.fetch).toHaveBeenCalledWith(\n      `${API_BASE_URL}/verses/by_chapter/1?language=en&words=true&word_translation_language=en&word_fields=text_uthmani&translations=20&fields=text_uthmani,audio&per_page=1&page=1`\n    );\n    expect(result).toEqual({\n      totalPages: 2,\n      verses: [\n        {\n          id: 1,\n          verse_key: '1:1',\n          text_uthmani: 'text',\n          words: [{ id: 1, uthmani: 'foo', en: 'bar' }],\n        },\n      ],\n    });\n  });\n\n  it('throws an error when the response is not ok', async () => {\n    global.fetch = jest.fn().mockResolvedValue({ ok: false, status: 500 }) as jest.Mock;\n    await expect(\n      fetchVerses({\n        type: 'by_chapter',\n        id: 1,\n        translationIds: 20,\n        page: 1,\n        perPage: 1,\n        wordLang: 'en',\n      })\n    ).rejects.toThrow('Failed to fetch verses: 500');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/get-juz.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/paginate-verses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/random-verse.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (65). Maximum allowed is 50.","line":9,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":91,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getSurahList } from '@/lib/api/chapters';\nimport { apiFetch } from '@/lib/api/client';\nimport { getRandomVerse, clearSurahListCache } from '@/lib/api/verses';\nimport { Verse } from '@/types';\n\njest.mock('@/lib/api/chapters');\njest.mock('@/lib/api/client');\n\ndescribe('getRandomVerse', () => {\n  afterEach(() => {\n    jest.resetAllMocks();\n    jest.restoreAllMocks();\n    clearSurahListCache();\n  });\n\n  const mockSurahs = [\n    { number: 1, name: 'Al-Fatihah', arabicName: 'الفاتحة', verses: 7, meaning: '' },\n    { number: 2, name: 'Al-Baqarah', arabicName: 'البقرة', verses: 286, meaning: '' },\n  ];\n\n  it('uses Math.random by default', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 5, verse_key: '2:72', text_uthmani: 'test' } as Verse,\n    });\n\n    const mathSpy = jest.spyOn(Math, 'random').mockReturnValueOnce(0.5).mockReturnValueOnce(0.25);\n\n    const verse = await getRandomVerse(20);\n\n    expect(mathSpy).toHaveBeenCalledTimes(2);\n    expect(apiFetch).toHaveBeenCalledWith(\n      'verses/by_key/2:72',\n      { translations: '20', fields: 'text_uthmani' },\n      'Failed to fetch random verse'\n    );\n    expect(verse).toMatchObject({ id: 5, verse_key: '2:72', text_uthmani: 'test' });\n  });\n\n  it('uses provided RNG when supplied', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    const rng = jest.fn().mockReturnValueOnce(0).mockReturnValueOnce(0);\n\n    const verse = await getRandomVerse(20, rng);\n\n    expect(rng).toHaveBeenCalledTimes(2);\n    expect(apiFetch).toHaveBeenCalledWith(\n      'verses/by_key/1:1',\n      { translations: '20', fields: 'text_uthmani' },\n      'Failed to fetch random verse'\n    );\n    expect(verse).toMatchObject({ id: 1, verse_key: '1:1', text_uthmani: 'alpha' });\n  });\n\n  it('caches surah list between calls', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    await getRandomVerse(20, () => 0);\n    await getRandomVerse(20, () => 0);\n\n    expect(getSurahList).toHaveBeenCalledTimes(1);\n  });\n\n  it('can clear cached surah list', async () => {\n    (getSurahList as jest.Mock).mockResolvedValue(mockSurahs);\n    (apiFetch as jest.Mock).mockResolvedValue({\n      verse: { id: 1, verse_key: '1:1', text_uthmani: 'alpha' } as Verse,\n    });\n\n    await getRandomVerse(20, () => 0);\n    clearSurahListCache();\n    await getRandomVerse(20, () => 0);\n\n    expect(getSurahList).toHaveBeenCalledTimes(2);\n  });\n\n  it('falls back to local verse on API error', async () => {\n    (getSurahList as jest.Mock).mockRejectedValue(new Error('fail'));\n\n    const verse = await getRandomVerse(20);\n\n    expect(verse).toMatchObject({ id: expect.any(Number), verse_key: expect.any(String) });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/search-verses.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/tafsir.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/translations.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/__tests__/verse-by-id.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/chapters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/fallback-verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/translations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/extras.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/fetchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/api/verses/normalize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/audio/__tests__/reciters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/audio/reciters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/focusable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/hooks.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { getFocusableElements } from './focusable';\n\ntype FocusHandlers = { saveFocus: () => void; restoreFocus: () => void };\n\nexport const useFocusTrap = (\n  isActive: boolean,\n  containerRef: React.RefObject<HTMLElement>\n): void => {\n  const prev = React.useRef<HTMLElement | null>(null);\n  React.useEffect(() => {\n    if (!isActive || !containerRef.current) return;\n    prev.current = document.activeElement as HTMLElement;\n    const focusables = getFocusableElements(containerRef.current);\n    if (!focusables.length) return;\n    focusables[0].focus();\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n      if (focusables.length === 1) {\n        e.preventDefault();\n        return;\n      }\n      const first = focusables[0];\n      const last = focusables[focusables.length - 1];\n      if (e.shiftKey && document.activeElement === first) {\n        e.preventDefault();\n        last.focus();\n      } else if (!e.shiftKey && document.activeElement === last) {\n        e.preventDefault();\n        first.focus();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isActive, containerRef]);\n  React.useEffect(() => {\n    if (!isActive && prev.current) {\n      prev.current.focus();\n      prev.current = null;\n    }\n  }, [isActive]);\n};\n\nexport const useFocusRestoration = (): FocusHandlers => {\n  const saved = React.useRef<string | null>(null);\n  const saveFocus = React.useCallback(() => {\n    const el = document.activeElement as HTMLElement;\n    if (el?.id) saved.current = el.id;\n  }, []);\n  const restoreFocus = React.useCallback(() => {\n    if (saved.current) {\n      document.getElementById(saved.current)?.focus();\n      saved.current = null;\n    }\n  }, []);\n  return { saveFocus, restoreFocus };\n};\n\nexport const useAutoFocus = (\n  shouldFocus: boolean,\n  ref: React.RefObject<HTMLElement>,\n  delay = 100\n): void => {\n  React.useEffect(() => {\n    if (!shouldFocus || !ref.current) return;\n    const t = setTimeout(() => ref.current?.focus(), delay);\n    return () => clearTimeout(t);\n  }, [shouldFocus, ref, delay]);\n};\n\nexport const useResponsiveFocus = (\n  breakpoint: 'mobile' | 'tablet' | 'desktop',\n  enabled = true\n): FocusHandlers => {\n  const focus = useFocusRestoration();\n  React.useEffect(() => {\n    if (!enabled) return;\n    focus.saveFocus();\n    const t = setTimeout(() => focus.restoreFocus(), 150);\n    return () => clearTimeout(t);\n  }, [breakpoint, focus, enabled]);\n  return enabled ? focus : { saveFocus() {}, restoreFocus() {} };\n};\n\nexport const useRovingTabIndex = (\n  items: React.RefObject<HTMLElement>[],\n  activeIndex: number,\n  onActiveIndexChange: (index: number) => void\n): void => {\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(e.key))\n        return;\n      e.preventDefault();\n      let idx = activeIndex;\n      switch (e.key) {\n        case 'ArrowUp':\n        case 'ArrowLeft':\n          idx = activeIndex > 0 ? activeIndex - 1 : items.length - 1;\n          break;\n        case 'ArrowDown':\n        case 'ArrowRight':\n          idx = activeIndex < items.length - 1 ? activeIndex + 1 : 0;\n          break;\n        case 'Home':\n          idx = 0;\n          break;\n        case 'End':\n          idx = items.length - 1;\n          break;\n      }\n      onActiveIndexChange(idx);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [activeIndex, items.length, onActiveIndexChange]);\n  React.useEffect(() => {\n    items.forEach((ref, i) => {\n      if (ref.current) {\n        ref.current.tabIndex = i === activeIndex ? 0 : -1;\n        if (i === activeIndex) ref.current.focus();\n      }\n    });\n  }, [activeIndex, items]);\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/focus/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useDraggableSelection.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useResourceSearch.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useScrollCentering.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (98). Maximum allowed is 50.","line":19,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":123,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\n\nimport { useScrollCentering } from '@/lib/hooks/useScrollCentering';\n\ntype Tab = 'Surah' | 'Juz' | 'Page';\n\nconst makeRect = (top: number, bottom: number): DOMRect => ({\n  top,\n  bottom,\n  left: 0,\n  right: 0,\n  width: 0,\n  height: bottom - top,\n  x: 0,\n  y: top,\n  toJSON: () => ({}),\n});\n\ndescribe('useScrollCentering', () => {\n  const scrollRef = { current: document.createElement('div') } as React.RefObject<HTMLDivElement>;\n\n  const createEls = () => {\n    const surahEl = document.createElement('div');\n    const juzEl = document.createElement('div');\n    surahEl.scrollIntoView = jest.fn();\n    juzEl.scrollIntoView = jest.fn();\n    scrollRef.current!.innerHTML = '';\n    scrollRef.current!.appendChild(surahEl);\n    scrollRef.current!.appendChild(juzEl);\n    return { surahEl, juzEl };\n  };\n\n  beforeEach(() => {\n    sessionStorage.clear();\n    jest.restoreAllMocks();\n    scrollRef.current!.innerHTML = '';\n  });\n\n  it('centers active element on initial render when outside view', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).toHaveBeenCalledWith({ block: 'center' });\n  });\n\n  it('does not recenter when element is already in view after scrolling', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(10, 20));\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 50, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).not.toHaveBeenCalled();\n  });\n\n  it('centers element after switching tabs', () => {\n    const { surahEl, juzEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(juzEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    const { result, rerender } = renderHook(\n      ({ activeTab }) =>\n        useScrollCentering<Tab>({\n          scrollRef,\n          activeTab,\n          selectedIds: { Surah: 1, Juz: 1, Page: null },\n          scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n        }),\n      { initialProps: { activeTab: 'Surah' as Tab } }\n    );\n    act(() => result.current.prepareForTabSwitch('Juz'));\n    delete surahEl.dataset.active;\n    juzEl.dataset.active = 'true';\n    rerender({ activeTab: 'Juz' });\n    expect(juzEl.scrollIntoView).toHaveBeenCalledWith({ block: 'center' });\n  });\n\n  it('skipNextCentering prevents centering and clears the session flag', () => {\n    const { surahEl } = createEls();\n    surahEl.dataset.active = 'true';\n    jest.spyOn(scrollRef.current!, 'getBoundingClientRect').mockReturnValue(makeRect(0, 100));\n    jest.spyOn(surahEl, 'getBoundingClientRect').mockReturnValue(makeRect(200, 250));\n    sessionStorage.setItem('skipCenterSurah', '1');\n    renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    expect(surahEl.scrollIntoView).not.toHaveBeenCalled();\n    expect(sessionStorage.getItem('skipCenterSurah')).toBeNull();\n  });\n\n  it('exposes skipNextCentering helper', () => {\n    const { result } = renderHook(() =>\n      useScrollCentering<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        selectedIds: { Surah: 1, Juz: null, Page: null },\n        scrollTops: { Surah: 0, Juz: 0, Page: 0 },\n      })\n    );\n    act(() => result.current.skipNextCentering('Surah'));\n    expect(sessionStorage.getItem('skipCenterSurah')).toBe('1');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useScrollPersistence.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (108). Maximum allowed is 50.","line":7,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":121,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { act, renderHook } from '@testing-library/react';\n\nimport { useScrollPersistence } from '@/lib/hooks/useScrollPersistence';\n\ntype Tab = 'Surah' | 'Juz' | 'Page';\n\ndescribe('useScrollPersistence', () => {\n  const scrollRef = { current: document.createElement('div') } as React.RefObject<HTMLDivElement>;\n  const scrollTops: Record<Tab, number> = { Surah: 0, Juz: 0, Page: 0 };\n  const setScrollTops: Record<Tab, jest.Mock> = {\n    Surah: jest.fn((top: number) => {\n      scrollTops.Surah = top;\n    }),\n    Juz: jest.fn((top: number) => {\n      scrollTops.Juz = top;\n    }),\n    Page: jest.fn((top: number) => {\n      scrollTops.Page = top;\n    }),\n  };\n  const storageKeys: Record<Tab, string> = {\n    Surah: 'surahScrollTop',\n    Juz: 'juzScrollTop',\n    Page: 'pageScrollTop',\n  };\n\n  beforeEach(() => {\n    sessionStorage.clear();\n    Object.values(setScrollTops).forEach((fn) => fn.mockClear());\n    scrollTops.Surah = 0;\n    scrollTops.Juz = 0;\n    scrollTops.Page = 0;\n  });\n\n  it('restores scroll position from sessionStorage', () => {\n    sessionStorage.setItem('surahScrollTop', '30');\n    renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    expect(scrollRef.current?.scrollTop).toBe(30);\n  });\n\n  it('defaults to state value when sessionStorage is empty', () => {\n    scrollTops.Surah = 40;\n    renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    expect(scrollRef.current?.scrollTop).toBe(40);\n  });\n\n  it('stores scroll on scroll event', () => {\n    const setSpy = jest.spyOn(sessionStorage, 'setItem');\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n\n    act(() => {\n      result.current.handleScroll({\n        currentTarget: { scrollTop: 42 },\n      } as React.UIEvent<HTMLDivElement>);\n    });\n    expect(setScrollTops.Surah).toHaveBeenCalledWith(42);\n    expect(setSpy).toHaveBeenCalledWith('surahScrollTop', '42');\n    setSpy.mockRestore();\n  });\n\n  it('prepares for tab switch', () => {\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    act(() => {\n      scrollRef.current!.scrollTop = 15;\n      result.current.prepareForTabSwitch();\n    });\n    expect(setScrollTops.Surah).toHaveBeenCalledWith(15);\n  });\n\n  it('remembers scroll for a tab', () => {\n    const setSpy = jest.spyOn(sessionStorage, 'setItem');\n    const { result } = renderHook(() =>\n      useScrollPersistence<Tab>({\n        scrollRef,\n        activeTab: 'Surah',\n        scrollTops,\n        setScrollTops,\n        storageKeys,\n      })\n    );\n    act(() => {\n      scrollRef.current!.scrollTop = 25;\n      result.current.rememberScroll('Page');\n    });\n    expect(setScrollTops.Page).toHaveBeenCalledWith(25);\n    expect(setSpy).toHaveBeenCalledWith('pageScrollTop', '25');\n    setSpy.mockRestore();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/__tests__/useSelectableResources.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (63). Maximum allowed is 50.","line":18,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":94,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\n\nimport { useSelectableResources } from '@/lib/hooks/useSelectableResources';\n\ninterface Item {\n  id: number;\n  name: string;\n  lang: string;\n}\n\nconst resources: Item[] = [\n  { id: 1, name: 'Eng A', lang: 'English' },\n  { id: 2, name: 'Eng B', lang: 'English' },\n  { id: 3, name: 'Arb A', lang: 'Arabic' },\n  { id: 4, name: 'Arb B', lang: 'Arabic' },\n];\n\ndescribe('useSelectableResources', () => {\n  it('groups resources by language and filters search results', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({ resources, selectionLimit: 3 })\n    );\n\n    expect(result.current.languages).toEqual(['All', 'Arabic', 'English']);\n\n    const groups = result.current.groupedResources;\n    expect(groups.English.map((r) => r.id)).toEqual([1, 2]);\n    expect(groups.Arabic.map((r) => r.id)).toEqual([3, 4]);\n\n    act(() => result.current.setSearchTerm('arb'));\n    expect(result.current.groupedResources.Arabic.map((r) => r.id)).toEqual([3, 4]);\n    expect(result.current.groupedResources.English).toBeUndefined();\n  });\n\n  it('enforces selectionLimit and reports toggle status', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({ resources, selectionLimit: 2 })\n    );\n\n    let changed = false;\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(1);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.selectedIds.has(1)).toBe(true);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(2);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.orderedSelection).toEqual([1, 2]);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(3);\n    });\n    expect(changed).toBe(false);\n    expect(result.current.selectedIds.size).toBe(2);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(1);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.selectedIds.has(1)).toBe(false);\n\n    act(() => {\n      changed = result.current.handleSelectionToggle(3);\n    });\n    expect(changed).toBe(true);\n    expect(result.current.orderedSelection).toEqual([2, 3]);\n  });\n\n  it('reorders selections via drag and drop', () => {\n    const { result } = renderHook(() =>\n      useSelectableResources<Item>({\n        resources,\n        selectionLimit: 3,\n        initialSelectedIds: [1, 2, 3],\n      })\n    );\n\n    const dragStartEvent = {\n      dataTransfer: { effectAllowed: '' },\n    } as unknown as React.DragEvent<HTMLDivElement>;\n    act(() => result.current.handleDragStart(dragStartEvent, 1));\n\n    const dropEvent = {\n      preventDefault: () => {},\n    } as unknown as React.DragEvent<HTMLDivElement>;\n    act(() => result.current.handleDrop(dropEvent, 3));\n\n    expect(result.current.orderedSelection).toEqual([2, 3, 1]);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useDraggableSelection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useResourceSearch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useScrollCentering.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (58). Maximum allowed is 50.","line":15,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { RefObject, useCallback, useEffect, useLayoutEffect, useRef } from 'react';\n\ninterface ScrollCenteringOptions<T extends string> {\n  scrollRef: RefObject<HTMLDivElement | null>;\n  activeTab: T;\n  selectedIds: Record<T, number | null>;\n  scrollTops: Record<T, number>;\n}\n\ninterface ScrollCenteringResult<T extends string> {\n  skipNextCentering: (tab: T) => void;\n  prepareForTabSwitch: (nextTab: T) => void;\n}\n\nexport const useScrollCentering = <T extends string>({\n  scrollRef,\n  activeTab,\n  selectedIds,\n  scrollTops,\n}: ScrollCenteringOptions<T>): ScrollCenteringResult<T> => {\n  const tabs = Object.keys(selectedIds) as T[];\n  const shouldCenterRef = useRef<Record<T, boolean>>(\n    tabs.reduce((acc, t) => ({ ...acc, [t]: true }), {} as Record<T, boolean>)\n  );\n\n  useLayoutEffect(() => {\n    tabs.forEach((tab) => {\n      if (sessionStorage.getItem(`skipCenter${tab}`) === '1') {\n        shouldCenterRef.current[tab] = false;\n        sessionStorage.removeItem(`skipCenter${tab}`);\n      }\n    });\n  }, [tabs]);\n\n  const prevIds = useRef<Record<T, number | null>>(\n    tabs.reduce((acc, t) => ({ ...acc, [t]: selectedIds[t] }), {} as Record<T, number | null>)\n  );\n\n  useEffect(() => {\n    tabs.forEach((tab) => {\n      const currentId = selectedIds[tab];\n      if (prevIds.current[tab] !== currentId) {\n        if (activeTab !== tab) {\n          shouldCenterRef.current[tab] = true;\n        }\n        prevIds.current[tab] = currentId;\n      }\n    });\n  }, [activeTab, selectedIds, tabs]);\n\n  useLayoutEffect(() => {\n    const container = scrollRef.current;\n    if (!container) return;\n    const activeEl = container.querySelector<HTMLElement>('[data-active=\"true\"]');\n    if (activeEl) {\n      const containerRect = container.getBoundingClientRect();\n      const activeRect = activeEl.getBoundingClientRect();\n      const isOutside =\n        activeRect.top < containerRect.top || activeRect.bottom > containerRect.bottom;\n      if (shouldCenterRef.current[activeTab] && (scrollTops[activeTab] === 0 || isOutside)) {\n        activeEl.scrollIntoView({ block: 'center' });\n      }\n    }\n    shouldCenterRef.current[activeTab] = false;\n  }, [activeTab, scrollRef, scrollTops, selectedIds]);\n\n  const skipNextCentering = useCallback((tab: T): void => {\n    sessionStorage.setItem(`skipCenter${tab}`, '1');\n  }, []);\n\n  const prepareForTabSwitch = useCallback(\n    (nextTab: T): void => {\n      shouldCenterRef.current[nextTab] = true;\n    },\n    [shouldCenterRef]\n  );\n\n  return { skipNextCentering, prepareForTabSwitch };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useScrollPersistence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/hooks/useSelectableResources.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":18,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":71,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState } from 'react';\n\nimport { useDraggableSelection } from './useDraggableSelection';\nimport { useResourceSearch } from './useResourceSearch';\n\ninterface Resource {\n  id: number;\n  name: string;\n  lang: string;\n}\ninterface SelectableOptions<T extends Resource> {\n  resources: T[];\n  selectionLimit: number;\n  initialSelectedIds?: number[];\n  languageSort?: (a: string, b: string) => number;\n}\n\nexport const useSelectableResources = <T extends Resource>({\n  resources,\n  selectionLimit,\n  initialSelectedIds = [],\n  languageSort,\n}: SelectableOptions<T>) => {\n  const [selectedIds, setSelectedIds] = useState(new Set(initialSelectedIds));\n  const drag = useDraggableSelection(initialSelectedIds);\n  const search = useResourceSearch<T>({ resources, languageSort });\n\n  const setSelections = useCallback(\n    (ids: number[]) => {\n      setSelectedIds(new Set(ids));\n      drag.setOrderedSelection(ids);\n    },\n    [drag]\n  );\n\n  const handleSelectionToggle = useCallback(\n    (id: number): boolean => {\n      const next = new Set(selectedIds);\n      let order = [...drag.orderedSelection];\n      let changed = false;\n      if (next.has(id)) {\n        next.delete(id);\n        order = order.filter((i) => i !== id);\n        changed = true;\n      } else if (next.size < selectionLimit) {\n        next.add(id);\n        order.push(id);\n        changed = true;\n      }\n      if (changed) {\n        setSelectedIds(next);\n        drag.setOrderedSelection(order);\n      }\n      return changed;\n    },\n    [drag, selectedIds, selectionLimit]\n  );\n\n  return {\n    ...search,\n    selectedIds,\n    orderedSelection: drag.orderedSelection,\n    handleSelectionToggle,\n    handleDragStart: drag.handleDragStart,\n    handleDragOver: drag.handleDragOver,\n    handleDrop: drag.handleDrop,\n    handleDragEnd: drag.handleDragEnd,\n    draggedId: drag.draggedId,\n    setSelections,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/breakpoints.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/container.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":64,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nexport type ContainerSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ContainerConfig<T> {\n  xs?: T;\n  sm?: T;\n  md?: T;\n  lg?: T;\n  xl?: T;\n}\n\nexport const containerClasses = {\n  container: '@container',\n  containerInline: '@container/inline',\n  containerSize: '@container/size',\n  xs: '@xs',\n  sm: '@sm',\n  md: '@md',\n  lg: '@lg',\n  xl: '@xl',\n  '320px': '@[320px]',\n  '384px': '@[384px]',\n  '640px': '@[640px]',\n  '768px': '@[768px]',\n  '1024px': '@[1024px]',\n  '1280px': '@[1280px]',\n} as const;\n\nexport const getContainerValue = <T>(config: ContainerConfig<T>, fallback: T): T => {\n  return fallback;\n};\n\ninterface UseContainerResult {\n  containerSize: ContainerSize;\n  isXs: boolean;\n  isSm: boolean;\n  isMd: boolean;\n  isLg: boolean;\n  isXl: boolean;\n  isSmUp: boolean;\n  isMdUp: boolean;\n  isLgUp: boolean;\n}\n\nexport const useContainer = (containerRef?: React.RefObject<HTMLElement>): UseContainerResult => {\n  const [containerSize, setContainerSize] = React.useState<ContainerSize>('sm');\n\n  React.useEffect(() => {\n    if (!containerRef?.current) return;\n\n    const breakpoints: Array<[number, ContainerSize]> = [\n      [1280, 'xl'],\n      [1024, 'lg'],\n      [768, 'md'],\n      [384, 'sm'],\n    ];\n\n    const getSizeFromWidth = (width: number): ContainerSize => {\n      const match = breakpoints.find(([min]) => width >= min);\n      return match ? match[1] : 'xs';\n    };\n\n    const updateContainerSize = () => {\n      if (!containerRef.current) return;\n      const { width } = containerRef.current.getBoundingClientRect();\n      setContainerSize(getSizeFromWidth(width));\n    };\n\n    updateContainerSize();\n\n    const resizeObserver = new ResizeObserver(updateContainerSize);\n    resizeObserver.observe(containerRef.current);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [containerRef]);\n\n  return {\n    containerSize,\n    isXs: containerSize === 'xs',\n    isSm: containerSize === 'sm',\n    isMd: containerSize === 'md',\n    isLg: containerSize === 'lg',\n    isXl: containerSize === 'xl',\n    isSmUp: ['sm', 'md', 'lg', 'xl'].includes(containerSize),\n    isMdUp: ['md', 'lg', 'xl'].includes(containerSize),\n    isLgUp: ['lg', 'xl'].includes(containerSize),\n  };\n};\n\nexport const getContainerClasses = (containerName?: string): string => {\n  return containerName ? `@container/${containerName}` : '@container';\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/orientation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/responsive/variants.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { useBreakpoint, type BreakpointKey } from './breakpoints';\n\nexport interface ResponsiveConfig<T> {\n  mobile: T;\n  tablet?: T;\n  desktop?: T;\n  wide?: T;\n}\n\nexport const getResponsiveValue = <T>(\n  breakpoint: BreakpointKey,\n  config: ResponsiveConfig<T>\n): T => {\n  return config[breakpoint] ?? config.tablet ?? config.mobile;\n};\n\nexport const useResponsiveValue = <T>(config: ResponsiveConfig<T>): T => {\n  const breakpoint = useBreakpoint();\n  return getResponsiveValue<T>(breakpoint, config);\n};\n\nexport type ComponentVariant = 'compact' | 'default' | 'expanded';\n\nexport const getVariantForBreakpoint = (breakpoint: BreakpointKey): ComponentVariant => {\n  switch (breakpoint) {\n    case 'mobile':\n      return 'compact';\n    case 'tablet':\n      return 'default';\n    case 'desktop':\n    case 'wide':\n      return 'expanded';\n    default:\n      return 'default';\n  }\n};\n\nexport const createResponsiveComponent = <P extends object>(\n  baseComponent: React.ComponentType<P>,\n  adaptations: { [K in ComponentVariant]?: Partial<P> }\n): React.ComponentType<P> => {\n  const ResponsiveComponent = (props: P) => {\n    const breakpoint = useBreakpoint();\n    const variant = getVariantForBreakpoint(breakpoint);\n    const adaptedProps = { ...props, ...adaptations[variant] };\n\n    return React.createElement(baseComponent, adaptedProps);\n  };\n  ResponsiveComponent.displayName = `Responsive(${baseComponent.displayName || baseComponent.name || 'Component'})`;\n  return ResponsiveComponent;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/styles/patterns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/__tests__/applyArabicFont.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/__tests__/tafsirCache.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":15,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":77,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  CACHE_TTL,\n  MAX_CACHE_SIZE,\n  clearTafsirCache,\n  getTafsirCached,\n} from '@/lib/tafsir/tafsirCache';\nimport { container } from '@/src/infrastructure/di/Container';\n\njest.mock('@/src/infrastructure/di/Container', () => ({\n  container: {\n    getTafsirRepository: jest.fn(),\n  },\n}));\n\ndescribe('getTafsirCached', () => {\n  const repository = { getTafsirByVerse: jest.fn() } as { getTafsirByVerse: jest.Mock };\n\n  beforeEach(() => {\n    clearTafsirCache();\n    repository.getTafsirByVerse.mockReset();\n    (container.getTafsirRepository as jest.Mock).mockReturnValue(repository);\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    clearTafsirCache();\n  });\n\n  it('returns cached value on repeated calls', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('tafsir');\n    const first = await getTafsirCached('1:1', 169);\n    const second = await getTafsirCached('1:1', 169);\n    expect(first).toBe('tafsir');\n    expect(second).toBe('tafsir');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(1);\n  });\n\n  it('expires cache entries based on TTL', async () => {\n    jest.useFakeTimers();\n    repository.getTafsirByVerse.mockResolvedValue('tafsir1');\n    jest.setSystemTime(0);\n    await getTafsirCached('1:1');\n    jest.setSystemTime(CACHE_TTL + 1);\n    repository.getTafsirByVerse.mockResolvedValue('tafsir2');\n    const result = await getTafsirCached('1:1');\n    expect(result).toBe('tafsir2');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(2);\n  });\n\n  it('evicts oldest entry when cache limit exceeded', async () => {\n    jest.useFakeTimers();\n    repository.getTafsirByVerse.mockImplementation((verseKey: string) =>\n      Promise.resolve(`tafsir-${verseKey}`)\n    );\n    for (let i = 0; i < MAX_CACHE_SIZE; i++) {\n      jest.setSystemTime(i);\n      await getTafsirCached(`${i}:1`);\n    }\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE);\n    jest.setSystemTime(MAX_CACHE_SIZE);\n    await getTafsirCached(`${MAX_CACHE_SIZE}:1`);\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE + 1);\n    jest.setSystemTime(MAX_CACHE_SIZE + 1);\n    await getTafsirCached('0:1');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(MAX_CACHE_SIZE + 2);\n  });\n\n  it('clears the cache', async () => {\n    repository.getTafsirByVerse.mockResolvedValue('first');\n    await getTafsirCached('1:1');\n    clearTafsirCache();\n    repository.getTafsirByVerse.mockResolvedValue('second');\n    const result = await getTafsirCached('1:1');\n    expect(result).toBe('second');\n    expect(repository.getTafsirByVerse).toHaveBeenCalledTimes(2);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/applyArabicFont.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/tafsir/tafsirCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/languageMappings.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/sanitizeHtml.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/sanitizeHtml.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/stripHtml.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/__tests__/tajweed.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/languageCodes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/sanitizeHtml.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/stripHtml.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/tajweed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/text/wordLanguages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/keyboard.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/setTheme.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/surah-navigation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/__tests__/verse.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/keyboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/safeLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/setTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/surah-navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lib/utils/verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/lighthouserc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/next-pwa.config.mjs","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":1,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":31,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default {\n  dest: 'public',\n  disable: process.env.NODE_ENV === 'development' || process.env.NEXT_DISABLE_PWA === 'true',\n  runtimeCaching: [\n    {\n      urlPattern:\n        /^https:\\/\\/api\\.quran\\.com\\/api\\/v4\\/(chapters|juzs|verses\\/by_(chapter|juz|page))/,\n      handler: 'NetworkFirst',\n      options: {\n        cacheName: 'api-cache',\n        expiration: {\n          maxEntries: 100,\n          maxAgeSeconds: 24 * 60 * 60,\n        },\n        cacheableResponse: { statuses: [0, 200] },\n      },\n    },\n    {\n      urlPattern: /^\\/fonts\\/.*\\.(?:woff2?|ttf|otf)$/,\n      handler: 'CacheFirst',\n      options: {\n        cacheName: 'font-cache',\n        expiration: {\n          maxEntries: 20,\n          maxAgeSeconds: 365 * 24 * 60 * 60,\n        },\n        cacheableResponse: { statuses: [0, 200] },\n      },\n    },\n  ],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/regen.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":2,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":2,"endColumn":14,"suggestions":[{"fix":{"range":[57,110],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default async function regen(): Promise<void> {\n  console.log('Regenerating AI development assets...');\n  // Placeholder: implement actual regeneration logic\n  // Example: run('npm run build');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/sync.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":2,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":2,"endColumn":14,"suggestions":[{"fix":{"range":[56,107],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default async function sync(): Promise<void> {\n  console.log('Syncing AI development resources...');\n  // Placeholder: implement actual sync logic\n  // Example: run('git pull');\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/ai-development-helper/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/architecture-compliance-check.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/reporter.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":4,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":4,"endColumn":14,"suggestions":[{"fix":{"range":[97,150],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":7,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":7,"endColumn":16,"suggestions":[{"fix":{"range":[186,217],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":9,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":9,"endColumn":18,"suggestions":[{"fix":{"range":[264,289],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":12,"endColumn":16,"suggestions":[{"fix":{"range":[301,317],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":16,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":16,"endColumn":16,"suggestions":[{"fix":{"range":[361,390],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":18,"column":7,"nodeType":"MemberExpression","messageId":"limited","endLine":18,"endColumn":18,"suggestions":[{"fix":{"range":[438,479],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"limited","endLine":21,"endColumn":16,"suggestions":[{"fix":{"range":[491,507],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":24,"endColumn":14,"suggestions":[{"fix":{"range":[515,610],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { RuleResult } from './rules';\n\nexport function report(result: RuleResult): void {\n  console.log('\\n📋 ARCHITECTURE COMPLIANCE REPORT\\n');\n\n  if (result.passed.length) {\n    console.log('✅ PASSED FILES:');\n    for (const file of result.passed) {\n      console.log(`  ${file}`);\n    }\n\n    console.log('');\n  }\n\n  if (result.violations.length) {\n    console.log('❌ VIOLATIONS:');\n    for (const v of result.violations) {\n      console.log(`  ${v.file}: ${v.message}`);\n    }\n\n    console.log('');\n  }\n\n  console.log(`Summary: ${result.passed.length} passed, ${result.violations.length} violations`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/rules.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/scripts/scanner.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/getTafsirCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/getTafsirFilters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/use-cases/GetTafsirContent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/application/use-cases/GetTafsirResources.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Bookmark.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (7). Maximum allowed is 4.","line":7,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BookmarkPosition } from '@/src/domain/value-objects/BookmarkPosition';\n\n/**\n * Bookmark domain entity representing a bookmarked verse\n */\nexport class Bookmark {\n  constructor(\n    public readonly id: string,\n    public readonly userId: string,\n    public readonly verseId: string,\n    public readonly position: BookmarkPosition,\n    public readonly createdAt: Date,\n    public readonly notes?: string,\n    public readonly tags: string[] = []\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (!this.id || this.id.trim() === '') {\n      throw new Error('Bookmark ID cannot be empty');\n    }\n\n    if (!this.userId || this.userId.trim() === '') {\n      throw new Error('User ID cannot be empty');\n    }\n\n    if (!this.verseId || this.verseId.trim() === '') {\n      throw new Error('Verse ID cannot be empty');\n    }\n\n    if (!this.createdAt) {\n      throw new Error('Created date is required');\n    }\n  }\n\n  /**\n   * Checks if bookmark belongs to a specific user\n   */\n  belongsToUser(userId: string): boolean {\n    return this.userId === userId;\n  }\n\n  /**\n   * Gets display text for the bookmark\n   */\n  getDisplayText(): string {\n    let text = this.position.getDisplayText();\n    if (this.notes && this.notes.trim().length > 0) {\n      text += ` - ${this.notes}`;\n    }\n    if (this.tags.length > 0) {\n      text += ` [${this.tags.join(', ')}]`;\n    }\n    return text;\n  }\n\n  /**\n   * Checks equality based on ID\n   */\n  equals(other: Bookmark): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    const hasNotes = Boolean(this.notes && this.notes.trim().length > 0);\n    const hasTags = this.tags.length > 0;\n    return {\n      id: this.id,\n      userId: this.userId,\n      verseId: this.verseId,\n      position: this.position.toPlainObject(),\n      createdAt: this.createdAt.toISOString(),\n      notes: this.notes,\n      tags: this.tags,\n      hasNotes,\n      hasTags,\n      displayText: this.getDisplayText(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Surah.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (8). Maximum allowed is 4.","line":24,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":24,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":87,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Revelation type enum\n */\nexport enum RevelationType {\n  MAKKI = 'makki',\n  MADANI = 'madani',\n}\n\nimport {\n  getEstimatedReadingTime,\n  getJuzNumbers,\n  getMemorizationDifficulty,\n  isLongSurah,\n  isMediumSurah,\n  isMufassalSurah,\n  isSevenLongSurah,\n  isShortSurah,\n} from './surahHelpers';\n\n/**\n * Surah domain entity representing a chapter of the Quran\n */\nexport class Surah {\n  constructor(\n    public readonly id: number,\n    public readonly name: string,\n    public readonly arabicName: string,\n    public readonly englishName: string,\n    public readonly englishTranslation: string,\n    public readonly numberOfAyahs: number,\n    public readonly revelationType: RevelationType,\n    public readonly revelationOrder?: number\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.id < 1 || this.id > 114) {\n      throw new Error('Invalid Surah ID: must be between 1 and 114');\n    }\n\n    if (!this.name || this.name.trim() === '') {\n      throw new Error('Surah name cannot be empty');\n    }\n\n    if (!this.arabicName || this.arabicName.trim() === '') {\n      throw new Error('Arabic name cannot be empty');\n    }\n\n    if (!this.englishName || this.englishName.trim() === '') {\n      throw new Error('English name cannot be empty');\n    }\n\n    if (this.numberOfAyahs < 1) {\n      throw new Error('Number of ayahs must be positive');\n    }\n  }\n\n  /** Checks if this Surah was revealed in Makkah */\n  isMakki(): boolean {\n    return this.revelationType === RevelationType.MAKKI;\n  }\n\n  /** Checks if this Surah was revealed in Madinah */\n  isMadani(): boolean {\n    return this.revelationType === RevelationType.MADANI;\n  }\n\n  /** Checks if this Surah can be read in prayer */\n  canBeReadInPrayer(): boolean {\n    return this.id !== 9; // At-Tawbah has no Bismillah\n  }\n\n  /** Checks if this Surah starts with Bismillah */\n  startWithBismillah(): boolean {\n    return this.id !== 9; // At-Tawbah\n  }\n\n  /** Checks equality based on ID */\n  equals(other: Surah): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      name: this.name,\n      arabicName: this.arabicName,\n      englishName: this.englishName,\n      englishTranslation: this.englishTranslation,\n      numberOfAyahs: this.numberOfAyahs,\n      revelationType: this.revelationType,\n      revelationOrder: this.revelationOrder,\n      isMakki: this.isMakki(),\n      isMadani: this.isMadani(),\n      canBeReadInPrayer: this.canBeReadInPrayer(),\n      startWithBismillah: this.startWithBismillah(),\n      memorizationDifficulty: getMemorizationDifficulty(this.numberOfAyahs),\n      estimatedReadingTime: getEstimatedReadingTime(this.numberOfAyahs),\n      isShortSurah: isShortSurah(this.numberOfAyahs),\n      isMediumSurah: isMediumSurah(this.numberOfAyahs),\n      isLongSurah: isLongSurah(this.numberOfAyahs),\n      isSevenLongSurah: isSevenLongSurah(this.id),\n      isMufassalSurah: isMufassalSurah(this.id),\n      juzNumbers: getJuzNumbers(this.id),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/Verse.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":95,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":95,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Translation } from '@/src/domain/value-objects/Translation';\n\nimport { getEstimatedReadingTime, getWordCount, isSajdahVerse } from './verseUtils';\n\n/**\n * Verse domain entity representing a single Quranic verse\n */\nexport interface VerseOptions {\n  id: string;\n  surahId: number;\n  ayahNumber: number;\n  arabicText: string;\n  uthmaniText: string;\n  translation?: Translation;\n}\n\nexport class Verse {\n  public readonly id: string;\n  public readonly surahId: number;\n  public readonly ayahNumber: number;\n  public readonly arabicText: string;\n  public readonly uthmaniText: string;\n  public readonly translation?: Translation;\n\n  constructor({ id, surahId, ayahNumber, arabicText, uthmaniText, translation }: VerseOptions) {\n    this.id = id;\n    this.surahId = surahId;\n    this.ayahNumber = ayahNumber;\n    this.arabicText = arabicText;\n    this.uthmaniText = uthmaniText;\n    this.translation = translation;\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (!this.id || this.id.trim() === '') {\n      throw new Error('Verse ID cannot be empty');\n    }\n\n    if (this.surahId < 1 || this.surahId > 114) {\n      throw new Error('Invalid Surah ID');\n    }\n\n    if (this.ayahNumber < 1) {\n      throw new Error('Invalid Ayah number');\n    }\n\n    if (!this.arabicText || this.arabicText.trim() === '') {\n      throw new Error('Arabic text cannot be empty');\n    }\n\n    if (!this.uthmaniText || this.uthmaniText.trim() === '') {\n      throw new Error('Uthmani text cannot be empty');\n    }\n  }\n\n  /**\n   * Returns the verse key in format \"surah:ayah\"\n   */\n  get verseKey(): string {\n    return `${this.surahId}:${this.ayahNumber}`;\n  }\n\n  /**\n   * Checks if this is the first verse of a Surah\n   */\n  isFirstVerse(): boolean {\n    return this.ayahNumber === 1;\n  }\n\n  /**\n   * Checks equality based on ID\n   */\n  equals(other: Verse): boolean {\n    return this.id === other.id;\n  }\n\n  /**\n   * Creates a new verse instance with translation\n   */\n  withTranslation(translation: Translation): Verse {\n    return new Verse({\n      id: this.id,\n      surahId: this.surahId,\n      ayahNumber: this.ayahNumber,\n      arabicText: this.arabicText,\n      uthmaniText: this.uthmaniText,\n      translation,\n    });\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      surahId: this.surahId,\n      ayahNumber: this.ayahNumber,\n      verseKey: this.verseKey,\n      arabicText: this.arabicText,\n      uthmaniText: this.uthmaniText,\n      translation: this.translation?.toPlainObject(),\n      wordCount: getWordCount(this.arabicText),\n      estimatedReadingTime: getEstimatedReadingTime(this.arabicText),\n      isFirstVerse: this.isFirstVerse(),\n      isSajdahVerse: isSajdahVerse(this.surahId, this.ayahNumber),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/bookmarkHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/surahHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/entities/verseUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/errors/DomainErrors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/IBookmarkRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/ITafsirRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/repositories/IVerseRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkImportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkMutationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/services/BookmarkService.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Async method 'bookmarkVerse' has too many parameters (5). Maximum allowed is 4.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":26,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { v4 as uuidv4 } from 'uuid';\n\nimport { Bookmark, Verse } from '@/src/domain/entities';\nimport {\n  BookmarkAlreadyExistsError,\n  VerseNotFoundError,\n  BookmarkNotFoundError,\n  UnauthorizedBookmarkError,\n} from '@/src/domain/errors/DomainErrors';\nimport { IBookmarkRepository } from '@/src/domain/repositories/IBookmarkRepository';\nimport { IVerseRepository } from '@/src/domain/repositories/IVerseRepository';\nimport { BookmarkPosition } from '@/src/domain/value-objects/BookmarkPosition';\n\n/**\n * Domain service for bookmark operations\n */\nexport class BookmarkService {\n  constructor(\n    private bookmarkRepository: IBookmarkRepository,\n    private verseRepository: IVerseRepository\n  ) {}\n\n  /**\n   * Creates a bookmark for a verse\n   */\n  async bookmarkVerse(\n    userId: string,\n    surahId: number,\n    ayahNumber: number,\n    notes?: string,\n    tags: string[] = []\n  ): Promise<Bookmark> {\n    // Verify verse exists\n    const verse = await this.verseRepository.findBySurahAndAyah(surahId, ayahNumber);\n    if (!verse) {\n      throw new VerseNotFoundError(`${surahId}:${ayahNumber}`);\n    }\n\n    // Check if bookmark already exists\n    const position = new BookmarkPosition(surahId, ayahNumber, new Date());\n    const exists = await this.bookmarkRepository.existsAtPosition(userId, position);\n    if (exists) {\n      throw new BookmarkAlreadyExistsError(userId, surahId, ayahNumber);\n    }\n\n    // Create new bookmark\n    const bookmark = new Bookmark(uuidv4(), userId, verse.id, position, new Date(), notes, tags);\n\n    await this.bookmarkRepository.save(bookmark);\n    return bookmark;\n  }\n\n  /**\n   * Removes a bookmark\n   */\n  async removeBookmark(userId: string, bookmarkId: string): Promise<void> {\n    const bookmark = await this.bookmarkRepository.findById(bookmarkId);\n    if (!bookmark) {\n      throw new BookmarkNotFoundError(bookmarkId);\n    }\n\n    if (!bookmark.belongsToUser(userId)) {\n      throw new UnauthorizedBookmarkError('Cannot remove bookmark belonging to another user');\n    }\n\n    await this.bookmarkRepository.remove(bookmarkId);\n  }\n\n  /**\n   * Checks if a verse is bookmarked by user\n   */\n  async isVerseBookmarked(userId: string, surahId: number, ayahNumber: number): Promise<boolean> {\n    const position = new BookmarkPosition(surahId, ayahNumber, new Date());\n    return await this.bookmarkRepository.existsAtPosition(userId, position);\n  }\n\n  /**\n   * Gets bookmarks with their corresponding verses\n   */\n  async getBookmarksWithVerses(\n    userId: string,\n    limit?: number\n  ): Promise<Array<{ bookmark: Bookmark; verse: Verse }>> {\n    const bookmarks = await this.bookmarkRepository.findByUser(userId);\n    const limitedBookmarks = limit ? bookmarks.slice(0, limit) : bookmarks;\n\n    const result: Array<{ bookmark: Bookmark; verse: Verse }> = [];\n\n    for (const bookmark of limitedBookmarks) {\n      const verse = await this.verseRepository.findById(bookmark.verseId);\n      if (!verse) {\n        throw new VerseNotFoundError(bookmark.verseId);\n      }\n      result.push({ bookmark, verse });\n    }\n\n    return result;\n  }\n\n  /**\n   * Organizes bookmarks by Surah\n   */\n  async organizeBookmarksBySurah(userId: string): Promise<Map<number, Bookmark[]>> {\n    const bookmarks = await this.bookmarkRepository.findByUser(userId);\n    const organized = new Map<number, Bookmark[]>();\n\n    bookmarks.forEach((bookmark) => {\n      const surahId = bookmark.position.surahId;\n      if (!organized.has(surahId)) {\n        organized.set(surahId, []);\n      }\n      organized.get(surahId)!.push(bookmark);\n    });\n\n    // Sort bookmarks within each Surah by ayah number\n    organized.forEach((surahBookmarks) => {\n      surahBookmarks.sort((a, b) => a.position.ayahNumber - b.position.ayahNumber);\n    });\n\n    return organized;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/BookmarkPosition.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as comparison from './bookmarkPosition/comparison';\nimport * as navigation from './bookmarkPosition/navigation';\n\nexport class BookmarkPosition {\n  constructor(\n    public readonly surahId: number,\n    public readonly ayahNumber: number,\n    public readonly timestamp: Date\n  ) {\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.surahId < 1 || this.surahId > 114) {\n      throw new Error('Invalid Surah ID: must be between 1 and 114');\n    }\n    if (this.ayahNumber < 1) {\n      throw new Error('Ayah number must be positive');\n    }\n    if (!this.timestamp) {\n      throw new Error('Timestamp is required');\n    }\n  }\n\n  get verseKey(): string {\n    return `${this.surahId}:${this.ayahNumber}`;\n  }\n\n  toString(): string {\n    return this.verseKey;\n  }\n\n  isFirstVerse(): boolean {\n    return this.ayahNumber === 1;\n  }\n\n  isInSurah(surahId: number): boolean {\n    return this.surahId === surahId;\n  }\n\n  getNextVerse(maxAyahInSurah: number): BookmarkPosition | null {\n    return navigation.getNextVerse<BookmarkPosition>(this, maxAyahInSurah, BookmarkPosition);\n  }\n\n  getPreviousVerse(): BookmarkPosition | null {\n    return navigation.getPreviousVerse<BookmarkPosition>(this, BookmarkPosition);\n  }\n\n  compareTo(other: BookmarkPosition): number {\n    return comparison.compareTo(this, other);\n  }\n\n  isBefore(other: BookmarkPosition): boolean {\n    return comparison.isBefore(this, other);\n  }\n\n  isAfter(other: BookmarkPosition): boolean {\n    return comparison.isAfter(this, other);\n  }\n\n  isInSameSurah(other: BookmarkPosition): boolean {\n    return comparison.isInSameSurah(this, other);\n  }\n\n  getDistanceFrom(other: BookmarkPosition): number | null {\n    return comparison.getDistanceFrom(this, other);\n  }\n\n  isWithinRange(other: BookmarkPosition, maxDistance: number): boolean {\n    return comparison.isWithinRange(this, other, maxDistance);\n  }\n\n  getDisplayText(): string {\n    return `Surah ${this.surahId}, Verse ${this.ayahNumber}`;\n  }\n\n  equals(other: BookmarkPosition): boolean {\n    return this.surahId === other.surahId && this.ayahNumber === other.ayahNumber;\n  }\n\n  withNewTimestamp(): BookmarkPosition {\n    return new BookmarkPosition(this.surahId, this.ayahNumber, new Date());\n  }\n\n  toPlainObject() {\n    return {\n      surahId: this.surahId,\n      ayahNumber: this.ayahNumber,\n      verseKey: this.verseKey,\n      timestamp: this.timestamp.toISOString(),\n      isFirstVerse: this.isFirstVerse(),\n      displayText: this.getDisplayText(),\n    };\n  }\n\n  static fromVerseKey(verseKey: string): BookmarkPosition {\n    const parts = verseKey.split(':');\n    if (parts.length !== 2) {\n      throw new Error('Invalid verse key format. Expected \"surah:ayah\"');\n    }\n    const surahId = parseInt(parts[0], 10);\n    const ayahNumber = parseInt(parts[1], 10);\n    if (isNaN(surahId) || isNaN(ayahNumber) || parts[0].trim() === '' || parts[1].trim() === '') {\n      throw new Error('Invalid verse key: surah and ayah must be numbers');\n    }\n    return new BookmarkPosition(surahId, ayahNumber, new Date());\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/StoredBookmark.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'isStoredBookmark' has a complexity of 11. Maximum allowed is 10.","line":20,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":34,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface StoredBookmarkPosition {\n  surahId: number;\n  ayahNumber: number;\n  verseKey: string;\n  timestamp: string;\n  isFirstVerse: boolean;\n  displayText: string;\n}\n\nexport interface StoredBookmark {\n  id: string;\n  userId: string;\n  verseId: string;\n  position: StoredBookmarkPosition;\n  createdAt: string;\n  notes?: string | undefined;\n  tags: string[];\n}\n\nexport function isStoredBookmark(value: unknown): value is StoredBookmark {\n  if (typeof value !== 'object' || value === null) return false;\n  const b = value as StoredBookmark;\n  return (\n    typeof b.id === 'string' &&\n    typeof b.userId === 'string' &&\n    typeof b.verseId === 'string' &&\n    typeof b.createdAt === 'string' &&\n    typeof b.position === 'object' &&\n    b.position !== null &&\n    typeof b.position.surahId === 'number' &&\n    typeof b.position.ayahNumber === 'number' &&\n    typeof b.position.timestamp === 'string'\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/Translation.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":100,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":100,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Translation value object for verse translations\n */\nexport interface TranslationOptions {\n  id: number;\n  resourceId: number;\n  text: string;\n  languageCode?: string;\n}\n\nexport class Translation {\n  public readonly id: number;\n  public readonly resourceId: number;\n  public readonly text: string;\n  public readonly languageCode: string;\n\n  constructor({ id, resourceId, text, languageCode = 'en' }: TranslationOptions) {\n    this.id = id;\n    this.resourceId = resourceId;\n    this.text = text;\n    this.languageCode = languageCode;\n    this.validateInputs();\n  }\n\n  private validateInputs(): void {\n    if (this.id < 0) {\n      throw new Error('Translation ID must be non-negative');\n    }\n\n    if (this.resourceId < 0) {\n      throw new Error('Resource ID must be non-negative');\n    }\n\n    if (!this.text || this.text.trim() === '') {\n      throw new Error('Translation text cannot be empty');\n    }\n\n    if (!this.languageCode || this.languageCode.trim() === '') {\n      throw new Error('Language code cannot be empty');\n    }\n  }\n\n  /**\n   * Gets the word count of the translation text\n   */\n  getWordCount(): number {\n    return this.text.split(/\\s+/).filter((word) => word.trim().length > 0).length;\n  }\n\n  /**\n   * Gets the character count including spaces\n   */\n  getCharacterCount(): number {\n    return this.text.length;\n  }\n\n  /**\n   * Checks if this is an English translation\n   */\n  isEnglish(): boolean {\n    return this.languageCode.toLowerCase().startsWith('en');\n  }\n\n  /**\n   * Checks if the translation contains a specific text (case-insensitive)\n   */\n  contains(searchText: string): boolean {\n    if (!searchText) return true;\n    return this.text.toLowerCase().includes(searchText.toLowerCase());\n  }\n\n  /**\n   * Gets a preview of the translation with word limit\n   */\n  getPreview(wordLimit: number = 10): string {\n    const words = this.text.split(/\\s+/);\n    if (words.length <= wordLimit) {\n      return this.text;\n    }\n    return words.slice(0, wordLimit).join(' ') + '...';\n  }\n\n  /**\n   * Checks if this is a long translation (more than 50 words)\n   */\n  isLong(): boolean {\n    return this.getWordCount() > 50;\n  }\n\n  /**\n   * Checks equality based on ID and resource ID\n   */\n  equals(other: Translation): boolean {\n    return this.id === other.id && this.resourceId === other.resourceId;\n  }\n\n  /**\n   * Converts to plain object for serialization\n   */\n  toPlainObject() {\n    return {\n      id: this.id,\n      resourceId: this.resourceId,\n      text: this.text,\n      languageCode: this.languageCode,\n      wordCount: this.getWordCount(),\n      characterCount: this.getCharacterCount(),\n      isEnglish: this.isEnglish(),\n      isLong: this.isLong(),\n      preview: this.getPreview(),\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/bookmarkPosition/comparison.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/domain/value-objects/bookmarkPosition/navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/Container.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/decorators/injection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/di/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ApplicationError.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (6). Maximum allowed is 4.","line":11,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":11,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Base Application Error\n *\n * All custom application errors should extend from this base class.\n * Provides consistent error structure and metadata.\n */\nexport class ApplicationError extends Error {\n  public readonly timestamp: Date;\n  public readonly stackTrace?: string;\n\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly statusCode: number = 500,\n    public readonly isOperational: boolean = true,\n    public readonly context?: Record<string, unknown>,\n    public readonly cause?: Error\n  ) {\n    super(message);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = this.constructor.name;\n    this.timestamp = new Date();\n    this.stackTrace = this.stack;\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      statusCode: this.statusCode,\n      isOperational: this.isOperational,\n      timestamp: this.timestamp.toISOString(),\n      context: this.context,\n      cause: this.cause?.message,\n      stack: this.stackTrace,\n    };\n  }\n\n  getUserMessage(): string {\n    return this.message;\n  }\n}\n\nexport default ApplicationError;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/ErrorHandlerConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/errorNotifications.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/factory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/guards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/http.ts","messages":[{"ruleId":"max-params","severity":1,"message":"Constructor has too many parameters (5). Maximum allowed is 4.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"exceed","endLine":26,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ApplicationError } from '@/src/infrastructure/errors/ApplicationError';\n\nexport class NotFoundError extends ApplicationError {\n  constructor(resource: string, context?: Record<string, unknown>, cause?: Error) {\n    const message = `${resource} not found`;\n    super(message, 'NOT_FOUND', 404, true, { resource, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    const resource = this.context?.resource || 'Resource';\n    return `${resource} could not be found.`;\n  }\n}\n\nexport class ConflictError extends ApplicationError {\n  constructor(message: string, context?: Record<string, unknown>, cause?: Error) {\n    super(message, 'CONFLICT_ERROR', 409, true, context, cause);\n  }\n\n  getUserMessage(): string {\n    return 'This action conflicts with existing data.';\n  }\n}\n\nexport class ApiError extends ApplicationError {\n  constructor(\n    message: string,\n    public readonly endpoint: string,\n    statusCode: number = 500,\n    context?: Record<string, unknown>,\n    cause?: Error\n  ) {\n    super(message, 'API_ERROR', statusCode, true, { endpoint, ...context }, cause);\n  }\n\n  getUserMessage(): string {\n    if (this.statusCode >= 400 && this.statusCode < 500) {\n      return 'There was an issue with your request. Please try again.';\n    }\n    return 'The service is temporarily unavailable. Please try again later.';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/misc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/network.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/errors/types/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.transports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/Logger.utils.ts","messages":[{"ruleId":"complexity","severity":1,"message":"Function 'getSource' has a complexity of 11. Maximum allowed is 10.","line":28,"column":8,"nodeType":"FunctionDeclaration","messageId":"complex","endLine":45,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { config } from '@/config';\n\nimport { RemoteTransport } from './RemoteTransport';\nimport { LogLevel } from './types';\n\nimport type { Logger } from './Logger';\n\nexport function parseLogLevel(level: string): LogLevel {\n  const levelMap: Record<string, LogLevel> = {\n    debug: LogLevel.DEBUG,\n    info: LogLevel.INFO,\n    warn: LogLevel.WARN,\n    error: LogLevel.ERROR,\n  };\n  return levelMap[level.toLowerCase()] ?? LogLevel.INFO;\n}\n\nexport function setupDefaultTransports(logger: Logger): void {\n  if (!config.logging.enableRemote) return;\n  // Add remote transport if endpoint is configured\n  const endpoint = process.env.LOG_ENDPOINT;\n  const apiKey = process.env.LOG_API_KEY;\n  if (endpoint) {\n    logger.addTransport(new RemoteTransport(endpoint, { apiKey }));\n  }\n}\n\nexport function getSource(): string | undefined {\n  const inBrowser = typeof window !== 'undefined' && typeof window.Error !== 'undefined';\n  if (!inBrowser) return undefined;\n  try {\n    const stack = new Error().stack;\n    if (!stack) return undefined;\n    const lines = stack.split('\\n');\n    // Find the first line that's not from this logger\n    for (let i = 3; i < lines.length; i++) {\n      const line = lines[i];\n      const isFromLogger = line?.includes('Logger.ts') || line?.includes('console.');\n      if (line && !isFromLogger) return line.trim();\n    }\n  } catch {\n    // Ignore errors in source detection\n  }\n  return undefined;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/MemoryTransport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/PerformanceLogger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/RemoteTransport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/ConsoleErrorTracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/ErrorTrackerService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/RemoteErrorTracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/SentryErrorTracker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/error-tracker/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/monitoring/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/BookmarkRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/TafsirRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/VerseRepository.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/__tests__/queries.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/advancedUserQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/bookmarkMapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/bookmarkValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/coreQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/folderQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/bookmark/userQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/tafsirApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/tafsirCache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/bulkSurahQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/verseSegmentQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verse/verseSpecialQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseBulkQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseMapper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseNavigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/infrastructure/repositories/verseSingleQueries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useLoggedCallback.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":14,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":5}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nimport { logger } from '@/src/infrastructure/monitoring/Logger';\n\ninterface Options<R> {\n  defaultValue?: R;\n  rethrow?: boolean;\n}\n\nexport const useLoggedCallback = <A extends unknown[], R>(\n  fn: (...args: A) => Promise<R>,\n  message: string,\n  options: Options<R> = {}\n) => {\n  const { defaultValue, rethrow } = options;\n  return useCallback(\n    async (...args: A): Promise<R> => {\n      try {\n        return await fn(...args);\n      } catch (err) {\n        logger.error(message, undefined, err as Error);\n        if (rethrow) throw err;\n        return defaultValue as R;\n      }\n    },\n    [fn, message, defaultValue, rethrow]\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirById.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":67,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetTafsirResourcesUseCase } from '@/src/application/use-cases/GetTafsirResources';\nimport { Tafsir } from '@/src/domain/entities/Tafsir';\n\nimport { useLoggedCallback } from './useLoggedCallback';\n\nexport const useTafsirById = (useCase: GetTafsirResourcesUseCase) =>\n  useLoggedCallback((id: number) => useCase.getById(id), 'Error getting tafsir by ID', {\n    defaultValue: null as Tafsir | null,\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirContent.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetTafsirResourcesUseCase } from '@/src/application/use-cases/GetTafsirResources';\n\nimport { useLoggedCallback } from './useLoggedCallback';\n\nexport const useTafsirContent = (useCase: GetTafsirResourcesUseCase) =>\n  useLoggedCallback(\n    (verseKey: string, tafsirId: number) => useCase.getTafsirContent(verseKey, tafsirId),\n    'Error getting tafsir content',\n    { rethrow: true }\n  );\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirPanel.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (55). Maximum allowed is 50.","line":47,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":111,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useTheme } from '@/app/providers/ThemeContext';\n\nimport { useTafsir } from './useTafsir';\nimport { useTafsirSelection } from './useTafsirSelection';\nimport { useTafsirTabsScroll } from './useTafsirTabsScroll';\n\nimport type { Theme } from '@/app/providers/ThemeContext';\nimport type { TafsirResource } from '@/types';\nimport type { Dispatch, SetStateAction, RefObject, DragEvent } from 'react';\n\nexport interface UseTafsirPanelReturn {\n  theme: Theme;\n  tafsirs: TafsirResource[];\n  loading: boolean;\n  error: string | null;\n  isFromCache: boolean;\n\n  searchTerm: string;\n  setSearchTerm: Dispatch<SetStateAction<string>>;\n  languages: string[];\n  groupedTafsirs: Record<string, TafsirResource[]>;\n  activeFilter: string;\n  setActiveFilter: Dispatch<SetStateAction<string>>;\n\n  selectedIds: Set<number>;\n  orderedSelection: number[];\n  handleSelectionToggle: (id: number) => boolean;\n  showLimitWarning: boolean;\n\n  handleDragStart: (e: DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: DragEvent<HTMLDivElement>, targetId: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n\n  handleReset: () => void;\n\n  tabsContainerRef: RefObject<HTMLDivElement>;\n  canScrollLeft: boolean;\n  canScrollRight: boolean;\n  scrollTabsLeft: () => void;\n  scrollTabsRight: () => void;\n}\n\nexport const useTafsirPanel = (isOpen: boolean): UseTafsirPanelReturn => {\n  const { theme } = useTheme();\n\n  const { tafsirs: domainTafsirs, loading: apiLoading, error: apiError, isFromCache } = useTafsir();\n\n  const {\n    tafsirs,\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n  } = useTafsirSelection(domainTafsirs);\n\n  const { tabsContainerRef, canScrollLeft, canScrollRight, scrollTabsLeft, scrollTabsRight } =\n    useTafsirTabsScroll(languages);\n\n  const loading = isOpen && apiLoading;\n  const error = apiError;\n\n  return {\n    theme,\n    tafsirs,\n    loading,\n    error,\n    isFromCache,\n\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n\n    handleReset,\n\n    tabsContainerRef,\n    canScrollLeft,\n    canScrollRight,\n    scrollTabsLeft,\n    scrollTabsRight,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirSearch.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GetTafsirResourcesUseCase } from '@/src/application/use-cases/GetTafsirResources';\nimport { Tafsir } from '@/src/domain/entities/Tafsir';\n\nimport { useLoggedCallback } from './useLoggedCallback';\n\nexport const useTafsirSearch = (useCase: GetTafsirResourcesUseCase) =>\n  useLoggedCallback((searchTerm: string) => useCase.search(searchTerm), 'Error searching tafsirs', {\n    defaultValue: [] as Tafsir[],\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirSelection.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (89). Maximum allowed is 50.","line":32,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":132,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":46,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { useSelectableResources } from '@/lib/hooks/useSelectableResources';\nimport { Tafsir } from '@/src/domain/entities/Tafsir';\nimport { TafsirResource } from '@/types';\n\nconst MAX_SELECTIONS = 3;\n\ninterface UseTafsirSelectionReturn {\n  tafsirs: TafsirResource[];\n  searchTerm: string;\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;\n  languages: string[];\n  groupedTafsirs: Record<string, TafsirResource[]>;\n  activeFilter: string;\n  setActiveFilter: React.Dispatch<React.SetStateAction<string>>;\n  selectedIds: Set<number>;\n  orderedSelection: number[];\n  handleSelectionToggle: (id: number) => boolean;\n  showLimitWarning: boolean;\n  handleDragStart: (e: React.DragEvent<HTMLDivElement>, id: number) => void;\n  handleDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  handleDrop: (e: React.DragEvent<HTMLDivElement>, targetId: number) => void;\n  handleDragEnd: () => void;\n  draggedId: number | null;\n  handleReset: () => void;\n}\n\nexport const useTafsirSelection = (domainTafsirs: Tafsir[]): UseTafsirSelectionReturn => {\n  const { settings, setTafsirIds } = useSettings();\n  const [showLimitWarning, setShowLimitWarning] = useState(false);\n\n  const tafsirs = useMemo<TafsirResource[]>(() => {\n    return domainTafsirs.map((t) => ({\n      id: t.id,\n      name: t.displayName,\n      lang: t.formattedLanguage,\n    }));\n  }, [domainTafsirs]);\n\n  const languageSort = useCallback(\n    (a: string, b: string) => {\n      const getDomainTafsir = (lang: string) =>\n        domainTafsirs.find((t) => t.formattedLanguage === lang);\n\n      const tafsirA = getDomainTafsir(a);\n      const tafsirB = getDomainTafsir(b);\n\n      if (!tafsirA || !tafsirB) return a.localeCompare(b);\n\n      const priorityA = tafsirA.getLanguagePriority();\n      const priorityB = tafsirB.getLanguagePriority();\n\n      if (priorityA !== priorityB) return priorityA - priorityB;\n      return a.localeCompare(b);\n    },\n    [domainTafsirs]\n  );\n\n  const {\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedResources,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle: baseHandleSelectionToggle,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    setSelections,\n  } = useSelectableResources<TafsirResource>({\n    resources: tafsirs,\n    selectionLimit: MAX_SELECTIONS,\n    initialSelectedIds: settings.tafsirIds || [],\n    languageSort,\n  });\n\n  const groupedTafsirs = groupedResources;\n\n  const handleSelectionToggle = useCallback(\n    (id: number): boolean => {\n      const changed = baseHandleSelectionToggle(id);\n      if (!changed) {\n        setShowLimitWarning(true);\n        return false;\n      }\n      setShowLimitWarning(false);\n      return true;\n    },\n    [baseHandleSelectionToggle]\n  );\n\n  const handleReset = useCallback(() => {\n    const englishTafsir = tafsirs.find((t) => t.lang.toLowerCase() === 'english');\n    if (englishTafsir) {\n      setSelections([englishTafsir.id]);\n      setShowLimitWarning(false);\n    }\n  }, [tafsirs, setSelections]);\n\n  useEffect(() => {\n    setTafsirIds([...orderedSelection]);\n  }, [orderedSelection, setTafsirIds]);\n\n  return {\n    tafsirs,\n    searchTerm,\n    setSearchTerm,\n    languages,\n    groupedTafsirs,\n    activeFilter,\n    setActiveFilter,\n    selectedIds,\n    orderedSelection,\n    handleSelectionToggle,\n    showLimitWarning,\n    handleDragStart,\n    handleDragOver,\n    handleDrop,\n    handleDragEnd,\n    draggedId,\n    handleReset,\n  } as const;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/src/presentation/hooks/useTafsirTabsScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tailwind.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ARCHITECTURE_COMPLIANT_TEST.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is defined but never used.","line":51,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @fileoverview Architecture-Compliant Test Template for Week 6\n * @description Complete test template following established architecture patterns\n * @template Replace: ExampleComponent, useExampleData, example\n * @location app/(features)/[feature]/__tests__/\n *\n * Required imports for architecture-compliant testing:\n */\n\nimport { createPerformanceTestSuite } from '@/app/testUtils/performanceTestUtils';\n\nimport {\n  clearTestEnvironment,\n  resetTestEnvironment,\n  runComponentTests,\n  runHookTests,\n  runIntegrationTest,\n  setupTestEnvironment,\n} from './architecture/test-utils';\n\nimport { ExampleComponent } from '@/ExampleComponent';\nimport { useExampleData } from '@/hooks/useExampleData';\n\n/**\n * Mock data following domain patterns\n */\nconst mockExampleData = {\n  id: '1',\n  verse_key: '1:1',\n  title: 'Test Title',\n  description: 'Test description',\n  content: 'Test content',\n  translations: [\n    { id: 131, text: 'Test translation', language: 'en' },\n  ],\n  words: [\n    { id: 1, text: 'Test', position: 1 },\n  ],\n};\n\n/**\n * Mock external dependencies\n */\njest.mock('@/lib/api/client', () => ({\n  fetchExampleData: jest.fn(),\n  fetchExampleTranslations: jest.fn(),\n}));\n\njest.mock('@/lib/utils/cn', () => ({\n  transformData: jest.fn((data) => data),\n  applySettings: jest.fn((text, settings) => text),\n}));\n\njest.mock('@/lib/text/sanitizeHtml', () => ({\n  sanitizeHtml: jest.fn((html) => html),\n}));\n\n// Mock i18n for consistent testing\njest.mock('react-i18next', () => ({\n  useTranslation: () => ({\n    t: (key: string, options?: Record<string, unknown>) => options?.defaultValue || key,\n  }),\n}));\n\n// Setup responsive testing environment\nbeforeAll(setupTestEnvironment);\n\nconst defaultProps = {\n  id: '1',\n  data: mockExampleData,\n  onAction: jest.fn(),\n  className: '',\n};\n\ndescribe('ExampleComponent - Architecture Compliance', () => {\n  beforeEach(resetTestEnvironment);\n  afterEach(clearTestEnvironment);\n\n  runComponentTests({\n    Component: ExampleComponent,\n    defaultProps,\n    mockData: mockExampleData,\n  });\n});\n\ndescribe('useExampleData Hook - Architecture Compliance', () => {\n  const mockFetch = global.fetch as jest.Mock;\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({\n        data: [mockExampleData],\n        hasNextPage: false,\n      }),\n    });\n  });\n\n  runHookTests({\n    useHook: useExampleData,\n    mockData: mockExampleData,\n  });\n});\n\n// Generate performance test suite\ncreatePerformanceTestSuite('ExampleComponent', ExampleComponent, defaultProps);\nrunIntegrationTest({\n  Component: ExampleComponent,\n  defaultProps,\n  mockData: mockExampleData,\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/component/index.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'ComponentName' has too many lines (92). Maximum allowed is 50.","line":19,"column":35,"nodeType":"FunctionExpression","messageId":"exceed","endLine":124,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'localState' is assigned a value but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setLocalState' is assigned a value but never used.","line":25,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":57,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MANDATORY Architecture-Compliant Component Template\n *\n * Usage: Copy this template and replace ComponentName with your component name.\n */\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useBookmarks, useSettings, useAudio } from '@/templates/ai-compliant/shared/contexts';\n\nimport type { ComponentData, ComponentAction } from '@/types';\n\ninterface ComponentNameProps {\n  id: string;\n  data: ComponentData;\n  onAction?: ComponentAction;\n  className?: string;\n}\n\nexport const ComponentName = memo(function ComponentName({\n  id,\n  data,\n  onAction,\n  className,\n}: ComponentNameProps) {\n  const [localState, setLocalState] = useState('');\n\n  const { settings } = useSettings();\n  const { currentTrack, isPlaying } = useAudio();\n  const { bookmarkedVerses, toggleBookmark } = useBookmarks();\n\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const processedData = useMemo(\n    () => transformData(data, settings),\n    [data, settings],\n  );\n\n  const isCurrentlyPlaying = useMemo(\n    () => currentTrack === id && isPlaying,\n    [currentTrack, id, isPlaying],\n  );\n\n  const handleAction = useCallback(\n    (actionType: string) => onAction?.(id, actionType),\n    [id, onAction],\n  );\n\n  const handleClick = useCallback(() => {\n    handleAction('click');\n  }, [handleAction]);\n\n  const handleToggleBookmark = useCallback(() => {\n    toggleBookmark(id);\n  }, [id, toggleBookmark]);\n\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (\n        event.key === 'Enter' &&\n        componentRef.current?.contains(document.activeElement)\n      ) {\n        handleClick();\n      }\n    };\n\n    document.addEventListener('keypress', handleKeyPress);\n    return () => document.removeEventListener('keypress', handleKeyPress);\n  }, [handleClick]);\n\n  return (\n    <div\n      ref={componentRef}\n      className={`space-y-4 p-4 md:space-y-6 md:p-6 ${className || ''}`.trim()}\n      data-testid={`component-${id}`}\n    >\n      <div className=\"space-y-4 md:space-y-0 md:flex md:items-center md:gap-6\">\n        <div className=\"flex justify-between md:w-16 md:flex-col md:pt-1\">\n          <button\n            className=\"h-11 px-4 bg-accent text-accent-foreground rounded-md\"\n            onClick={handleClick}\n            aria-label={`Action for ${data.name || id}`}\n          >\n            Action\n          </button>\n\n          <button\n            className=\"h-11 px-4 bg-secondary text-secondary-foreground rounded-md\"\n            onClick={handleToggleBookmark}\n            aria-label={`Toggle bookmark for ${data.name || id}`}\n          >\n            {bookmarkedVerses.has(id) ? '★' : '☆'}\n          </button>\n        </div>\n\n        <div className=\"space-y-4 md:flex-grow\">\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              {data.title}\n            </h3>\n            {data.subtitle && (\n              <p className=\"text-sm text-muted-foreground\">{data.subtitle}</p>\n            )}\n          </div>\n\n          {processedData.items.map((item) => (\n            <div\n              key={item.id}\n              className=\"min-h-11 p-3 bg-card text-card-foreground rounded-md border border-border\"\n            >\n              {item.content}\n            </div>\n          ))}\n\n          {isCurrentlyPlaying && (\n            <div className=\"flex items-center space-x-2 text-accent\">\n              <div className=\"h-4 w-4 bg-accent rounded-full animate-pulse\" />\n              <span className=\"text-sm font-medium\">Playing</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport { ComponentName };\nexport default ComponentName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/hook/helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { HookData, HookOptions } from '@/types';\n\nexport function getCachedData(key: string): HookData | null {\n  try {\n    const cached = localStorage.getItem(key);\n    return cached ? (JSON.parse(cached) as HookData) : null;\n  } catch {\n    return null;\n  }\n}\n\nexport function setCachedData(key: string, data: HookData): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(data));\n  } catch {\n    // Ignore storage errors\n  }\n}\n\nexport function clearCachedData(key: string): void {\n  try {\n    localStorage.removeItem(key);\n  } catch {\n    // Ignore storage errors\n  }\n}\n\nexport function transformHookData(\n  data: HookData,\n  settings: Record<string, unknown>,\n): HookData {\n  return data;\n}\n\nexport function apiCall(\n  id: string,\n  options: HookOptions | undefined,\n  config: { signal: AbortSignal },\n): Promise<HookData> {\n  return fetch(`/api/data/${id}`,\n    { signal: config.signal, ...options?.fetchOptions }).then((res) => res.json());\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/hook/index.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Function 'useHookName' has too many lines (98). Maximum allowed is 50.","line":26,"column":8,"nodeType":"FunctionDeclaration","messageId":"exceed","endLine":143,"endColumn":2},{"ruleId":"complexity","severity":1,"message":"Async arrow function has a complexity of 13. Maximum allowed is 10.","line":57,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"complex","endLine":91,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MANDATORY Architecture-Compliant Hook Template\n *\n * Usage: Copy this template and replace useHookName with your hook name.\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useSettings } from '@/templates/ai-compliant/shared/contexts';\n\nimport {\n  apiCall,\n  clearCachedData,\n  getCachedData,\n  setCachedData,\n  transformHookData,\n} from './helpers';\n\nimport type { HookData, HookOptions, HookResult } from '@/types';\n\ninterface UseHookNameParams {\n  id: string;\n  options?: HookOptions;\n  initialData?: HookData;\n}\n\nexport function useHookName({\n  id,\n  options,\n  initialData,\n}: UseHookNameParams): HookResult {\n  const [data, setData] = useState<HookData | null>(initialData || null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(!initialData);\n\n  const { settings } = useSettings();\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const retryCountRef = useRef(0);\n  const maxRetries = options?.maxRetries ?? 3;\n\n  const processedData = useMemo(\n    () => (data ? transformHookData(data, settings) : null),\n    [data, settings],\n  );\n\n  const isRetryable = useMemo(\n    () => !!error && retryCountRef.current < maxRetries,\n    [error, maxRetries],\n  );\n\n  const cacheKey = useMemo(\n    () => (options?.cache ? `hook-${id}-${JSON.stringify(options)}` : null),\n    [id, options],\n  );\n\n  const fetchData = useCallback(\n    async (retryCount = 0) => {\n      if (!id) return;\n\n      setIsLoading(true);\n      setError(null);\n      retryCountRef.current = retryCount;\n\n      try {\n        abortControllerRef.current?.abort();\n        abortControllerRef.current = new AbortController();\n\n        if (cacheKey && retryCount === 0) {\n          const cached = getCachedData(cacheKey);\n          if (cached && !options?.forceRefresh) {\n            setData(cached);\n            setIsLoading(false);\n            return;\n          }\n        }\n\n        const result = await apiCall(id, options, {\n          signal: abortControllerRef.current.signal,\n        });\n\n        setData(result);\n\n        if (cacheKey) setCachedData(cacheKey, result);\n      } catch (err) {\n        if (err.name !== 'AbortError') {\n          setError(err instanceof Error ? err.message : 'Unknown error');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [id, options, cacheKey],\n  );\n\n  const refetch = useCallback(() => {\n    retryCountRef.current = 0;\n    fetchData(0);\n  }, [fetchData]);\n\n  const retry = useCallback(() => {\n    if (isRetryable) fetchData(retryCountRef.current + 1);\n  }, [fetchData, isRetryable]);\n\n  const reset = useCallback(() => {\n    setData(initialData || null);\n    setError(null);\n    setIsLoading(false);\n    retryCountRef.current = 0;\n    if (cacheKey) clearCachedData(cacheKey);\n  }, [initialData, cacheKey]);\n\n  const updateData = useCallback(\n    (updater: (prev: HookData | null) => HookData | null) => {\n      setData(updater);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    fetchData(0);\n  }, [fetchData]);\n\n  useEffect(() => () => abortControllerRef.current?.abort(), []);\n\n  useEffect(() => {\n    if (data && settings && options?.refreshOnSettingsChange) {\n      refetch();\n    }\n  }, [settings, data, options?.refreshOnSettingsChange, refetch]);\n\n  return {\n    data: processedData,\n    rawData: data,\n    isLoading,\n    error,\n    isRetryable,\n    retryCount: retryCountRef.current,\n    refetch,\n    retry,\n    reset,\n    updateData,\n  } as const;\n}\n\nexport { useHookName };\nexport default useHookName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/page/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/page/skeletons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/shared/contexts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/shared/test-wrapper.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AudioProvider, BookmarkProvider, SettingsProvider } from './contexts';\n\nimport type { ReactNode } from 'react';\n\n\nexport const TestWrapper = ({ children }: { children: ReactNode }) => (\n  <SettingsProvider>\n    <AudioProvider>\n      <BookmarkProvider>{children}</BookmarkProvider>\n    </AudioProvider>\n  </SettingsProvider>\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/ai-compliant/test/index.test.tsx","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (52). Maximum allowed is 50.","line":37,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":99,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MANDATORY Architecture-Compliant Test Template\n *\n * Usage: Copy this template and replace ComponentName with your component name.\n */\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { validateResponsiveDesign } from '@/app/testUtils/responsiveTestUtils';\nimport { TestWrapper } from '@/templates/ai-compliant/shared/test-wrapper';\n\nimport type { ComponentNameProps } from '@/templates/ai-compliant/ComponentName';\n\nimport { ComponentName } from '@/templates/ai-compliant/ComponentName';\n\n\njest.mock('@/lib/api/client', () => ({\n  fetchData: jest.fn(),\n}));\n\nconst mockData = {\n  id: 'test-id',\n  title: 'Test Component',\n  subtitle: 'Test subtitle',\n  items: [\n    { id: 'item-1', content: 'Test item 1' },\n    { id: 'item-2', content: 'Test item 2' },\n  ],\n};\n\nconst defaultProps: ComponentNameProps = {\n  id: 'test-component',\n  data: mockData,\n  onAction: jest.fn(),\n};\n\ndescribe('ComponentName', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders and memoizes', () => {\n    const { rerender } = render(<ComponentName {...defaultProps} />, {\n      wrapper: TestWrapper,\n    });\n\n    const component = screen.getByTestId('component-test-component');\n    expect(component).toBeInTheDocument();\n\n    const renderCount = jest.fn();\n    const MemoTest = () => {\n      renderCount();\n      return <ComponentName {...defaultProps} />;\n    };\n\n    rerender(<MemoTest />);\n    rerender(<MemoTest />);\n    expect(renderCount).toHaveBeenCalledTimes(1);\n  });\n\n  it('respects responsive design', () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n    const container = screen.getByTestId('component-test-component');\n\n    validateResponsiveDesign(container, {\n      mobileClasses: ['space-y-4', 'p-4'],\n      desktopClasses: ['md:space-y-6', 'md:p-6'],\n    });\n  });\n\n  it('integrates with providers', () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n    expect(screen.getByTestId('component-test-component')).toBeInTheDocument();\n  });\n\n  it('supports keyboard activation', () => {\n    const mockOnAction = jest.fn();\n    render(\n      <ComponentName {...defaultProps} onAction={mockOnAction} />,\n      { wrapper: TestWrapper },\n    );\n\n    const component = screen.getByTestId('component-test-component');\n    component.focus();\n    fireEvent.keyPress(component, { key: 'Enter', code: 'Enter' });\n    expect(mockOnAction).toHaveBeenCalledWith('test-component', 'click');\n  });\n\n  it('is accessible', async () => {\n    render(<ComponentName {...defaultProps} />, { wrapper: TestWrapper });\n\n    const user = userEvent.setup();\n    const buttons = screen.getAllByRole('button');\n    for (const button of buttons) {\n      await user.tab();\n      expect(button).toHaveClass('focus:outline-none');\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/components.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/hooks.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":16,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":61},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":52,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":71,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":71,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { waitFor, act } from '@testing-library/react';\n\nimport { renderHookWithProviders } from '@/app/testUtils/contextTestUtils';\n\ninterface HookResult<TData> {\n  data: TData[];\n  isLoading: boolean;\n  refetch: () => Promise<void>;\n}\n\ninterface HookSectionParams<TProps, TData> {\n  useHook: (props: TProps) => HookResult<TData>;\n  mockData: TData;\n}\n\nexport function hookContextIntegrationSection<TProps, TData>({\n  useHook,\n  mockData\n}: HookSectionParams<TProps, TData>) {\n  describe('🔄 Context Integration', () => {\n    it('provides data from context', async () => {\n      const { result } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.data).toEqual([mockData]);\n      });\n    });\n  });\n}\n\nexport function hookPerformanceSection<TProps, TData>({\n  useHook\n}: HookSectionParams<TProps, TData>) {\n  describe('⚡ Performance', () => {\n    it('returns stable references', async () => {\n      const { result, rerender } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n      const first = result.current.refetch;\n      rerender();\n      expect(result.current.refetch).toBe(first);\n    });\n  });\n}\n\nexport function hookCleanupSection<TProps, TData>({\n  useHook\n}: HookSectionParams<TProps, TData>) {\n  describe('🧹 Cleanup', () => {\n    it('cancels requests on unmount', () => {\n      const mockAbort = jest.fn();\n      (globalThis as { AbortController: jest.Mock }).AbortController = jest\n        .fn()\n        .mockImplementation(() => ({ abort: mockAbort, signal: {} }));\n      const { unmount } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      unmount();\n      expect(mockAbort).toHaveBeenCalled();\n    });\n  });\n}\n\nexport function hookDataFetchingSection<TProps, TData>({\n  useHook,\n  mockData\n}: HookSectionParams<TProps, TData>) {\n  describe('🔄 Data Fetching', () => {\n    it('supports refetching', async () => {\n      const { result } = renderHookWithProviders(\n        () => useHook({ id: '1' }),\n        ['Settings']\n      );\n      await waitFor(() => {\n        expect(result.current.data).toBeTruthy();\n      });\n      await act(async () => {\n        await result.current.refetch();\n      });\n      expect(result.current.data).toBeTruthy();\n      expect(result.current.data).toEqual([mockData]);\n    });\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/sections/routing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/test-sections/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/templates/architecture/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/accessibility.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/component-architecture.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/context-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/integration.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/performance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/responsive-design.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/architecture/utils.ts","messages":[{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (4). Maximum allowed is 3.","line":27,"column":9,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":33,"endColumn":10},{"ruleId":"max-depth","severity":1,"message":"Blocks are nested too deeply (5). Maximum allowed is 3.","line":29,"column":11,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":32,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Page, expect } from '@playwright/test';\n\n/**\n * Test mobile-first responsive design for a selector across breakpoints.\n */\nexport async function testResponsiveDesign(page: Page, elementSelector: string): Promise<void> {\n  const breakpoints = [\n    { name: 'Mobile', width: 375, height: 812 },\n    { name: 'Tablet', width: 768, height: 1024 },\n    { name: 'Desktop', width: 1024, height: 768 },\n    { name: 'Large Desktop', width: 1280, height: 1024 },\n  ];\n\n  for (const breakpoint of breakpoints) {\n    await page.setViewportSize({ width: breakpoint.width, height: breakpoint.height });\n\n    const element = page.locator(elementSelector);\n    await expect(element).toBeVisible();\n\n    // Test touch-friendly interactions on mobile\n    if (breakpoint.width <= 768) {\n      const touchElements = page.locator('[role=\"button\"], button');\n      const count = await touchElements.count();\n\n      for (let i = 0; i < Math.min(count, 3); i++) {\n        const touchEl = touchElements.nth(i);\n        if (await touchEl.isVisible()) {\n          const box = await touchEl.boundingBox();\n          if (box) {\n            // WCAG 2.1 AA: minimum 44px touch target\n            expect(Math.min(box.width, box.height)).toBeGreaterThanOrEqual(44);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Test context integration flows like settings, audio and bookmarks.\n */\nexport async function testContextIntegration(page: Page): Promise<void> {\n  // Test Settings context - font size changes\n  const settingsButton = page.locator('[data-testid=\"settings-button\"]');\n  if (await settingsButton.isVisible()) {\n    await settingsButton.click();\n\n    const fontSizeSlider = page.locator('[data-testid=\"font-size-slider\"]');\n    if (await fontSizeSlider.isVisible()) {\n      await fontSizeSlider.fill('20');\n\n      // Verify font size change is applied\n      const verseText = page.locator('[data-testid=\"verse-text\"]').first();\n      const fontSize = await verseText.evaluate((el) => window.getComputedStyle(el).fontSize);\n      expect(parseInt(fontSize)).toBeGreaterThanOrEqual(20);\n    }\n  }\n\n  // Test Audio context - playback controls\n  const playButton = page.locator('[data-testid=\"play-button\"]').first();\n  if (await playButton.isVisible()) {\n    await playButton.click();\n\n    // Verify audio player appears\n    await expect(page.locator('[data-testid=\"audio-player\"]')).toBeVisible();\n\n    // Verify play state\n    await expect(page.locator('[data-testid=\"pause-button\"]')).toBeVisible();\n  }\n\n  // Test Bookmark context - bookmark functionality\n  const bookmarkButton = page.locator('[data-testid=\"bookmark-button\"]').first();\n  if (await bookmarkButton.isVisible()) {\n    await bookmarkButton.click();\n\n    // Verify bookmark is active\n    await expect(bookmarkButton).toHaveClass(/active|bookmarked/);\n  }\n}\n\n/**\n * Test performance optimizations like memoization and virtual scrolling.\n */\nexport async function testPerformanceOptimizations(page: Page): Promise<void> {\n  // Test memo() effectiveness by checking for unnecessary re-renders\n  const startTime = Date.now();\n\n  // Navigate to different pages quickly\n  await page.goto('/surah/1');\n  await page.goto('/surah/2');\n  await page.goto('/surah/1');\n\n  const endTime = Date.now();\n  const navigationTime = endTime - startTime;\n\n  // Navigation should be fast due to memoization\n  expect(navigationTime).toBeLessThan(3000);\n\n  // Test virtual scrolling performance\n  const longSurah = page.locator('[data-testid=\"verse-card\"]');\n  const initialCount = await longSurah.count();\n\n  // Scroll down\n  await page.evaluate(() => window.scrollBy(0, 2000));\n  await page.waitForTimeout(100);\n\n  const afterScrollCount = await longSurah.count();\n\n  // More verses should be loaded, but not all at once (virtual scrolling)\n  expect(afterScrollCount).toBeGreaterThan(initialCount);\n  expect(afterScrollCount).toBeLessThan(100); // Reasonable limit\n}\n\n/**\n * Basic accessibility checks including keyboard nav and ARIA attributes.\n */\nexport async function testAccessibility(page: Page): Promise<void> {\n  // Test keyboard navigation\n  await page.keyboard.press('Tab');\n  const focusedElement = await page.evaluate(() =>\n    document.activeElement?.getAttribute('data-testid')\n  );\n  expect(focusedElement).toBeTruthy();\n\n  // Test ARIA attributes\n  const buttons = page.locator('[role=\"button\"], button');\n  const buttonCount = await buttons.count();\n\n  for (let i = 0; i < Math.min(buttonCount, 5); i++) {\n    const button = buttons.nth(i);\n    if (await button.isVisible()) {\n      const ariaLabel = await button.getAttribute('aria-label');\n      const text = await button.textContent();\n\n      // Button should have accessible text or aria-label\n      expect(ariaLabel || text?.trim()).toBeTruthy();\n    }\n  }\n\n  // Test contrast ratios (basic check)\n  const textElements = page.locator('p, span, h1, h2, h3, h4, h5, h6');\n  const textCount = await textElements.count();\n\n  for (let i = 0; i < Math.min(textCount, 3); i++) {\n    const textEl = textElements.nth(i);\n    if (await textEl.isVisible()) {\n      const styles = await textEl.evaluate((el) => {\n        const computed = window.getComputedStyle(el);\n        return {\n          color: computed.color,\n          backgroundColor: computed.backgroundColor,\n        };\n      });\n\n      // Basic check - elements should have color values\n      expect(styles.color).toBeTruthy();\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/accessibility.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/audio.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/bookmarking.spec.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (51). Maximum allowed is 50.","line":3,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":62,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createMockPage, MockPage } from './utils';\n\ndescribe('Bookmarking Functionality', () => {\n  let page: MockPage;\n\n  beforeEach(() => {\n    page = createMockPage();\n  });\n\n  it('should bookmark a verse', async () => {\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n\n    const bookmarkItem = await page.locator('[data-testid=\"bookmark-item-1-1\"]').isVisible();\n    expect(bookmarkItem).toBe(true);\n\n    const bookmarkText = await page\n      .locator('[data-testid=\"bookmark-item-1-1\"] .verse-reference')\n      .textContent();\n    expect(bookmarkText).toBe('1:1');\n  });\n\n  it('should remove bookmark when clicked again', async () => {\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n    await page.click('[data-testid=\"bookmark-button-1-1\"]');\n\n    (page.locator as jest.Mock).mockImplementation((selector: string) => {\n      if (selector === '[data-testid=\"bookmark-item-1-1\"]') {\n        return {\n          count: jest.fn(),\n          textContent: jest.fn(),\n          isVisible: jest.fn().mockResolvedValue(false),\n        };\n      }\n      return {\n        count: jest.fn().mockResolvedValue(7),\n        textContent: jest.fn().mockResolvedValue('بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ'),\n        isVisible: jest.fn().mockResolvedValue(true),\n      };\n    });\n\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n    const bookmarkItem = await page.locator('[data-testid=\"bookmark-item-1-1\"]').isVisible();\n    expect(bookmarkItem).toBe(false);\n  });\n\n  it('should navigate to bookmarked verse from sidebar', async () => {\n    await page.goto('http://localhost:3000/surah/2');\n    await page.click('[data-testid=\"bookmark-button-2-255\"]');\n    await page.goto('http://localhost:3000/surah/1');\n    await page.click('[data-testid=\"bookmarks-sidebar-trigger\"]');\n    await page.click('[data-testid=\"bookmark-item-2-255\"]');\n    await page.waitForURL('**/surah/2');\n\n    const highlightedVerse = await page\n      .locator('[data-testid=\"verse-2-255\"].highlighted')\n      .isVisible();\n    expect(highlightedVerse).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/navigation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/performance.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/responsive.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/search.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/translation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/e2e/reading/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/BookmarkRepository.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/TafsirRepository.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.bulk.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (108). Maximum allowed is 50.","line":3,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":139,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createRepository, mockApiVerse, mockApiVerses } from './test-utils';\n\ndescribe('VerseRepository bulk retrieval', () => {\n  let repository: ReturnType<typeof createRepository>;\n\n  beforeEach(() => {\n    repository = createRepository();\n    jest.clearAllMocks();\n  });\n\n  describe('findBySurah', () => {\n    it('should find all verses in a surah', async () => {\n      const surahVerses = [\n        mockApiVerse,\n        { ...mockApiVerse, id: 2, verse_key: '1:2' },\n        { ...mockApiVerse, id: 3, verse_key: '1:3' },\n      ];\n\n      mockApiVerses.getVersesByChapter.mockResolvedValue({\n        verses: surahVerses,\n        totalPages: 1,\n      });\n\n      const verses = await repository.findBySurah(1);\n\n      expect(verses).toHaveLength(3);\n      expect(verses[0].ayahNumber).toBe(1);\n      expect(verses[1].ayahNumber).toBe(1);\n      expect(mockApiVerses.getVersesByChapter).toHaveBeenCalledWith({\n        id: 1,\n        translationIds: 20,\n        page: 1,\n        perPage: 300,\n      });\n    });\n\n    it('should return empty array on error', async () => {\n      mockApiVerses.getVersesByChapter.mockRejectedValue(new Error('API error'));\n\n      const verses = await repository.findBySurah(1);\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findByJuz', () => {\n    it('should find verses by Juz number', async () => {\n      mockApiVerses.getVersesByJuz.mockResolvedValue({\n        verses: [mockApiVerse],\n        totalPages: 1,\n      });\n\n      const verses = await repository.findByJuz(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getVersesByJuz).toHaveBeenCalledWith({\n        id: 1,\n        translationIds: 20,\n        page: 1,\n        perPage: 500,\n      });\n    });\n  });\n\n  describe('findByPage', () => {\n    it('should find verses by page number', async () => {\n      mockApiVerses.getVersesByPage.mockResolvedValue({\n        verses: [mockApiVerse],\n        totalPages: 1,\n      });\n\n      const verses = await repository.findByPage(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getVersesByPage).toHaveBeenCalledWith({\n        id: 1,\n        translationIds: 20,\n        page: 1,\n        perPage: 50,\n      });\n    });\n  });\n\n  describe('search', () => {\n    it('should search verses by query', async () => {\n      mockApiVerses.searchVerses.mockResolvedValue([mockApiVerse]);\n\n      const verses = await repository.search('Allah');\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.searchVerses).toHaveBeenCalledWith('Allah');\n    });\n\n    it('should return empty array on search error', async () => {\n      mockApiVerses.searchVerses.mockRejectedValue(new Error('Search failed'));\n\n      const verses = await repository.search('test');\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findRandom', () => {\n    it('should find a random verse', async () => {\n      mockApiVerses.getRandomVerse.mockResolvedValue(mockApiVerse);\n\n      const verses = await repository.findRandom(1);\n\n      expect(verses).toHaveLength(1);\n      expect(verses[0].id).toBe('1:1');\n      expect(mockApiVerses.getRandomVerse).toHaveBeenCalledWith(20);\n    });\n\n    it('should return empty array if random verse fails', async () => {\n      mockApiVerses.getRandomVerse.mockRejectedValue(new Error('Failed'));\n\n      const verses = await repository.findRandom(1);\n\n      expect(verses).toHaveLength(0);\n    });\n  });\n\n  describe('findByVerseKeys', () => {\n    it('should find verses by verse keys', async () => {\n      mockApiVerses.getVerseByKey\n        .mockResolvedValueOnce(mockApiVerse)\n        .mockResolvedValueOnce({ ...mockApiVerse, verse_key: '2:255' });\n\n      const verses = await repository.findByVerseKeys(['1:1', '2:255']);\n\n      expect(verses).toHaveLength(2);\n      expect(verses[0].verseKey).toBe('1:1');\n      expect(verses[1].verseKey).toBe('1:1');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.navigation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/VerseRepository.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/integration/repositories/VerseRepository/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/mobile-performance.interaction.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mobile-performance/mobile-performance.render.test.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { renderWithPerf } from './helpers';\n\ndescribe('mobile performance render', () => {\n  it('measures render duration', () => {\n    const Component = () => <div>mobile test</div>;\n    const nowSpy = jest.spyOn(performance, 'now').mockReturnValueOnce(0).mockReturnValueOnce(20);\n\n    const { duration } = renderWithPerf(<Component />);\n    nowSpy.mockRestore();\n\n    expect(duration).toBe(20);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/application/GetTafsirContentUseCase.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/application/GetTafsirResourcesUseCase.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.constructor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.difficulty.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.length.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.metrics.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (76). Maximum allowed is 50.","line":18,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":99,"endColumn":2},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (57). Maximum allowed is 50.","line":19,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":79,"endColumn":4},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":21,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":36,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (5). Maximum allowed is 3.","line":24,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":35,"endColumn":10},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":38,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":49,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":53,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":64,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":66,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":77,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":96,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":96,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Surah,\n  RevelationType,\n  getJuzNumbers,\n  isMufassalSurah,\n  isSevenLongSurah,\n} from '@/src/domain/entities';\n\nimport {\n  validName,\n  validArabicName,\n  validEnglishName,\n  validEnglishTranslation,\n  validNumberOfAyahs,\n  validRevelationType,\n} from './Surah/test-utils';\n\ndescribe('Surah Entity - Metrics', () => {\n  describe('special Surah classifications', () => {\n    describe('Seven Long Surahs', () => {\n      it('returns true for known Seven Long Surahs', () => {\n        const sevenLongSurahs = [2, 3, 4, 5, 6, 7, 9];\n\n        sevenLongSurahs.forEach((id) => {\n          const surah = new Surah(\n            id,\n            `Surah ${id}`,\n            `السورة ${id}`,\n            `Surah ${id}`,\n            `The ${id}`,\n            100,\n            RevelationType.MAKKI\n          );\n          expect(isSevenLongSurah(surah.id)).toBe(true);\n        });\n      });\n\n      it('returns false for non Seven Long Surahs', () => {\n        const regularSurah = new Surah(\n          8,\n          'الأنفال',\n          'الأنفال',\n          'Al-Anfal',\n          'The Spoils of War',\n          75,\n          RevelationType.MADANI\n        );\n        expect(isSevenLongSurah(regularSurah.id)).toBe(false);\n      });\n    });\n\n    describe('Mufassal Surahs', () => {\n      it('returns true for Mufassal Surahs', () => {\n        const mufassalSurah = new Surah(\n          49,\n          'الحجرات',\n          'الحجرات',\n          'Al-Hujurat',\n          'The Rooms',\n          18,\n          RevelationType.MADANI\n        );\n        expect(isMufassalSurah(mufassalSurah.id)).toBe(true);\n      });\n\n      it('returns false for non Mufassal Surahs', () => {\n        const nonMufassalSurah = new Surah(\n          48,\n          'الفتح',\n          'الفتح',\n          'Al-Fath',\n          'The Victory',\n          29,\n          RevelationType.MADANI\n        );\n        expect(isMufassalSurah(nonMufassalSurah.id)).toBe(false);\n      });\n    });\n  });\n\n  describe('getJuzNumbers', () => {\n    it('should return array of Juz numbers', () => {\n      const surah = new Surah(\n        1,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n\n      const juzNumbers = getJuzNumbers(surah.id);\n      expect(Array.isArray(juzNumbers)).toBe(true);\n      expect(juzNumbers.length).toBeGreaterThan(0);\n      expect(juzNumbers.every((num) => num >= 1 && num <= 30)).toBe(true);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah.revelation.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (189). Maximum allowed is 50.","line":25,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":223,"endColumn":2},{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":26,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":82,"endColumn":4},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":28,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":39,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":41,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":52,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":56,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":67,"endColumn":8},{"ruleId":"max-nested-callbacks","severity":1,"message":"Too many nested callbacks (4). Maximum allowed is 3.","line":69,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":80,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Surah,\n  RevelationType,\n  getEstimatedReadingTime,\n  getJuzNumbers,\n  getMemorizationDifficulty,\n  isLongSurah,\n  isMediumSurah,\n  isMufassalSurah,\n  isSevenLongSurah,\n  isShortSurah,\n} from '@/src/domain/entities';\n\nimport {\n  validId,\n  validName,\n  validArabicName,\n  validEnglishName,\n  validEnglishTranslation,\n  validNumberOfAyahs,\n  validRevelationType,\n  validRevelationOrder,\n} from './Surah/test-utils';\n\ndescribe('Surah Entity - Revelation', () => {\n  describe('revelation type methods', () => {\n    describe('isMakki', () => {\n      it('returns true when revelation type is MAKKI', () => {\n        const makkiSurah = new Surah(\n          validId,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          RevelationType.MAKKI\n        );\n        expect(makkiSurah.isMakki()).toBe(true);\n      });\n\n      it('returns false when revelation type is MADANI', () => {\n        const madaniSurah = new Surah(\n          2,\n          'البقرة',\n          'البقرة',\n          'Al-Baqarah',\n          'The Cow',\n          286,\n          RevelationType.MADANI\n        );\n        expect(madaniSurah.isMakki()).toBe(false);\n      });\n    });\n\n    describe('isMadani', () => {\n      it('returns true when revelation type is MADANI', () => {\n        const madaniSurah = new Surah(\n          2,\n          'البقرة',\n          'البقرة',\n          'Al-Baqarah',\n          'The Cow',\n          286,\n          RevelationType.MADANI\n        );\n        expect(madaniSurah.isMadani()).toBe(true);\n      });\n\n      it('returns false when revelation type is MAKKI', () => {\n        const makkiSurah = new Surah(\n          validId,\n          validName,\n          validArabicName,\n          validEnglishName,\n          validEnglishTranslation,\n          validNumberOfAyahs,\n          RevelationType.MAKKI\n        );\n        expect(makkiSurah.isMadani()).toBe(false);\n      });\n    });\n  });\n\n  describe('canBeReadInPrayer', () => {\n    it('should return true for most Surahs', () => {\n      const regularSurah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(regularSurah.canBeReadInPrayer()).toBe(true);\n    });\n\n    it('should return false for At-Tawbah (Surah 9)', () => {\n      const atTawbah = new Surah(\n        9,\n        'التوبة',\n        'التوبة',\n        'At-Tawbah',\n        'The Repentance',\n        129,\n        RevelationType.MADANI\n      );\n      expect(atTawbah.canBeReadInPrayer()).toBe(false);\n    });\n  });\n\n  describe('startWithBismillah', () => {\n    it('should return true for most Surahs', () => {\n      const regularSurah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(regularSurah.startWithBismillah()).toBe(true);\n    });\n\n    it('should return false for At-Tawbah (Surah 9)', () => {\n      const atTawbah = new Surah(\n        9,\n        'التوبة',\n        'التوبة',\n        'At-Tawbah',\n        'The Repentance',\n        129,\n        RevelationType.MADANI\n      );\n      expect(atTawbah.startWithBismillah()).toBe(false);\n    });\n  });\n\n  describe('equals', () => {\n    it('should return true for Surahs with same ID', () => {\n      const surah1 = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      const surah2 = new Surah(\n        validId,\n        'Different Name',\n        'اسم مختلف',\n        'Different English',\n        'Different Translation',\n        10,\n        RevelationType.MADANI\n      );\n      expect(surah1.equals(surah2)).toBe(true);\n    });\n\n    it('should return false for Surahs with different IDs', () => {\n      const surah1 = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      const surah2 = new Surah(\n        2,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType\n      );\n      expect(surah1.equals(surah2)).toBe(false);\n    });\n  });\n\n  describe('toPlainObject', () => {\n    it('should return plain object with all properties and computed values', () => {\n      const surah = new Surah(\n        validId,\n        validName,\n        validArabicName,\n        validEnglishName,\n        validEnglishTranslation,\n        validNumberOfAyahs,\n        validRevelationType,\n        validRevelationOrder\n      );\n      const plainObject = surah.toPlainObject();\n      expect(plainObject).toEqual({\n        id: validId,\n        name: validName,\n        arabicName: validArabicName,\n        englishName: validEnglishName,\n        englishTranslation: validEnglishTranslation,\n        numberOfAyahs: validNumberOfAyahs,\n        revelationType: validRevelationType,\n        revelationOrder: validRevelationOrder,\n        isMakki: true,\n        isMadani: false,\n        canBeReadInPrayer: true,\n        startWithBismillah: true,\n        memorizationDifficulty: getMemorizationDifficulty(validNumberOfAyahs),\n        estimatedReadingTime: getEstimatedReadingTime(validNumberOfAyahs),\n        isShortSurah: isShortSurah(validNumberOfAyahs),\n        isMediumSurah: isMediumSurah(validNumberOfAyahs),\n        isLongSurah: isLongSurah(validNumberOfAyahs),\n        isSevenLongSurah: isSevenLongSurah(validId),\n        isMufassalSurah: isMufassalSurah(validId),\n        juzNumbers: getJuzNumbers(validId),\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Surah/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.constructor.invalid.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (84). Maximum allowed is 50.","line":11,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":99,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Verse } from '@/src/domain/entities';\n\nimport {\n  validId,\n  validSurahId,\n  validAyahNumber,\n  validArabicText,\n  validUthmaniText,\n} from './Verse/test-utils';\n\ndescribe('Verse constructor (invalid cases)', () => {\n  it('throws error for empty ID', () => {\n    expect(\n      () =>\n        new Verse({\n          id: '',\n          surahId: validSurahId,\n          ayahNumber: validAyahNumber,\n          arabicText: validArabicText,\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Verse ID cannot be empty');\n  });\n\n  it('throws error for invalid Surah ID (below 1)', () => {\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: 0,\n          ayahNumber: validAyahNumber,\n          arabicText: validArabicText,\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Invalid Surah ID');\n  });\n\n  it('throws error for invalid Surah ID (above 114)', () => {\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: 115,\n          ayahNumber: validAyahNumber,\n          arabicText: validArabicText,\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Invalid Surah ID');\n  });\n\n  it('throws error for invalid Ayah number (below 1)', () => {\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: validSurahId,\n          ayahNumber: 0,\n          arabicText: validArabicText,\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Invalid Ayah number');\n  });\n\n  it('throws error for empty or whitespace-only Arabic text', () => {\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: validSurahId,\n          ayahNumber: validAyahNumber,\n          arabicText: '',\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Arabic text cannot be empty');\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: validSurahId,\n          ayahNumber: validAyahNumber,\n          arabicText: '   ',\n          uthmaniText: validUthmaniText,\n        })\n    ).toThrow('Arabic text cannot be empty');\n  });\n\n  it('throws error for empty Uthmani text', () => {\n    expect(\n      () =>\n        new Verse({\n          id: validId,\n          surahId: validSurahId,\n          ayahNumber: validAyahNumber,\n          arabicText: validArabicText,\n          uthmaniText: '',\n        })\n    ).toThrow('Uthmani text cannot be empty');\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.constructor.valid.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.equalsAndTranslation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.isSajdah.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.properties.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.serialization.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse.textUtils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/entities/Verse/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkImportService.export.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkImportService.import.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (62). Maximum allowed is 50.","line":68,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":136,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Verse } from '@/src/domain/entities';\nimport { IBookmarkRepository } from '@/src/domain/repositories/IBookmarkRepository';\nimport { IVerseRepository } from '@/src/domain/repositories/IVerseRepository';\nimport { BookmarkImportService } from '@/src/domain/services/BookmarkImportService';\n\nconst mockBookmarkRepository: jest.Mocked<IBookmarkRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  existsByUserAndVerse: jest.fn(),\n  findByUser: jest.fn(),\n  findByUserWithOptions: jest.fn(),\n  findRecent: jest.fn(),\n  findByVerse: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByPosition: jest.fn(),\n  findByTags: jest.fn(),\n  findWithNotes: jest.fn(),\n  findByDateRange: jest.fn(),\n  search: jest.fn(),\n  existsAtPosition: jest.fn(),\n  getCountByUser: jest.fn(),\n  getCountBySurah: jest.fn(),\n  getTagsByUser: jest.fn(),\n  getStatistics: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findNearPosition: jest.fn(),\n  saveMany: jest.fn(),\n  removeMany: jest.fn(),\n  removeAllByUser: jest.fn(),\n  removeBySurah: jest.fn(),\n  exportBookmarks: jest.fn(),\n  importBookmarks: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\nconst mockVerseRepository: jest.Mocked<IVerseRepository> = {\n  findById: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n  exists: jest.fn(),\n  findBySurahAndAyah: jest.fn(),\n  findBySurah: jest.fn(),\n  findBySurahRange: jest.fn(),\n  findByJuz: jest.fn(),\n  findByPage: jest.fn(),\n  findByHizb: jest.fn(),\n  findByRubAlHizb: jest.fn(),\n  search: jest.fn(),\n  findSajdahVerses: jest.fn(),\n  findFirstVerses: jest.fn(),\n  findByVerseKeys: jest.fn(),\n  findRandom: jest.fn(),\n  getTotalCount: jest.fn(),\n  getCountBySurah: jest.fn(),\n  findNext: jest.fn(),\n  findPrevious: jest.fn(),\n  findWithTranslation: jest.fn(),\n  findByRevelationType: jest.fn(),\n  cacheForOffline: jest.fn(),\n  clearCache: jest.fn(),\n};\n\ndescribe('BookmarkImportService import', () => {\n  let importService: BookmarkImportService;\n  const userId = 'user123';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    importService = new BookmarkImportService(mockBookmarkRepository, mockVerseRepository);\n  });\n\n  it('successfully imports valid bookmarks', async () => {\n    const importData = [\n      { surahId: 1, ayahNumber: 1, notes: 'Opening verse' },\n      { surahId: 2, ayahNumber: 255, tags: ['powerful', 'ayat-kursi'] },\n    ];\n    const mockVerse1 = new Verse({\n      id: 'v1',\n      surahId: 1,\n      ayahNumber: 1,\n      arabicText: 'text1',\n      uthmaniText: 'uthmani1',\n    });\n    const mockVerse2 = new Verse({\n      id: 'v2',\n      surahId: 2,\n      ayahNumber: 255,\n      arabicText: 'text2',\n      uthmaniText: 'uthmani2',\n    });\n    mockVerseRepository.findBySurahAndAyah\n      .mockResolvedValueOnce(mockVerse1)\n      .mockResolvedValueOnce(mockVerse2);\n    mockBookmarkRepository.existsAtPosition\n      .mockResolvedValueOnce(false)\n      .mockResolvedValueOnce(false);\n    mockBookmarkRepository.saveMany.mockResolvedValue(undefined);\n\n    const result = await importService.importBookmarks(userId, importData);\n\n    expect(result).toHaveLength(2);\n    expect(result[0].notes).toBe('Opening verse');\n    expect(result[1].tags).toEqual(['powerful', 'ayat-kursi']);\n    expect(mockBookmarkRepository.saveMany).toHaveBeenCalledWith(result);\n  });\n\n  it('skips invalid or existing bookmarks', async () => {\n    const importData = [\n      { surahId: 1, ayahNumber: 1 },\n      { surahId: 999, ayahNumber: 999 },\n    ];\n    mockVerseRepository.findBySurahAndAyah\n      .mockResolvedValueOnce(\n        new Verse({\n          id: 'v1',\n          surahId: 1,\n          ayahNumber: 1,\n          arabicText: 'text1',\n          uthmaniText: 'uthmani1',\n        })\n      )\n      .mockResolvedValueOnce(null);\n    mockBookmarkRepository.existsAtPosition.mockResolvedValueOnce(false);\n    mockBookmarkRepository.saveMany.mockResolvedValue(undefined);\n\n    const result = await importService.importBookmarks(userId, importData);\n\n    expect(result).toHaveLength(1);\n    expect(mockBookmarkRepository.saveMany).toHaveBeenCalledWith(result);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.addTag.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.removeTag.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.updateNotes.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkMutationService.updateTags.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.bookmarkVerse.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.isBookmarked.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.queries.test.ts","messages":[{"ruleId":"max-lines-per-function","severity":1,"message":"Arrow function has too many lines (54). Maximum allowed is 50.","line":16,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"exceed","endLine":75,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Bookmark, Verse } from '@/src/domain/entities';\nimport { VerseNotFoundError } from '@/src/domain/errors/DomainErrors';\nimport { BookmarkService } from '@/src/domain/services/BookmarkService';\nimport { BookmarkPosition } from '@/src/domain/value-objects/BookmarkPosition';\n\nimport {\n  createMockBookmarkRepository,\n  createMockVerseRepository,\n  userId,\n  surahId,\n  ayahNumber,\n  verseId,\n  bookmarkId,\n} from './test-utils';\n\ndescribe('BookmarkService queries', () => {\n  let service: BookmarkService;\n  let mockBookmarkRepo = createMockBookmarkRepository();\n  let mockVerseRepo = createMockVerseRepository();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockBookmarkRepo = createMockBookmarkRepository();\n    mockVerseRepo = createMockVerseRepository();\n    service = new BookmarkService(mockBookmarkRepo, mockVerseRepo);\n  });\n\n  // moved to dedicated test file\n\n  it('getBookmarksWithVerses returns bookmarks with verses', async () => {\n    const base = new Bookmark(\n      bookmarkId,\n      userId,\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    const verse = new Verse({\n      id: verseId,\n      surahId,\n      ayahNumber,\n      arabicText: 'text',\n      uthmaniText: 'uthmani',\n    });\n    mockBookmarkRepo.findByUser.mockResolvedValue([base]);\n    mockVerseRepo.findById.mockResolvedValue(verse);\n    const result = await service.getBookmarksWithVerses(userId);\n    expect(result[0]).toEqual({ bookmark: base, verse });\n  });\n\n  it('getBookmarksWithVerses throws when verse missing', async () => {\n    const base = new Bookmark(\n      bookmarkId,\n      userId,\n      verseId,\n      new BookmarkPosition(surahId, ayahNumber, new Date()),\n      new Date()\n    );\n    mockBookmarkRepo.findByUser.mockResolvedValue([base]);\n    mockVerseRepo.findById.mockResolvedValue(null);\n    await expect(service.getBookmarksWithVerses(userId)).rejects.toThrow(VerseNotFoundError);\n  });\n\n  it('organizeBookmarksBySurah organizes and sorts', async () => {\n    const bookmarks = [\n      new Bookmark('b1', userId, 'v1', new BookmarkPosition(1, 3, new Date()), new Date()),\n      new Bookmark('b2', userId, 'v2', new BookmarkPosition(1, 1, new Date()), new Date()),\n      new Bookmark('b3', userId, 'v3', new BookmarkPosition(2, 5, new Date()), new Date()),\n    ];\n    mockBookmarkRepo.findByUser.mockResolvedValue(bookmarks);\n    const result = await service.organizeBookmarksBySurah(userId);\n    expect(result.get(1)?.map((b) => b.position.ayahNumber)).toEqual([1, 3]);\n    expect(result.get(2)?.length).toBe(1);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/BookmarkService.removeBookmark.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/services/BookmarkService/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.classification.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.compareTo.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.formatting.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.methods.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.navigation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.ordering.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.rangeAndEquals.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.surahAndDistance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition.validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/BookmarkPosition/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.equalsAndPlainObject.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.languageAndContains.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.parsing.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.previewAndLength.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation.wordAndCharCount.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/domain/value-objects/Translation/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/errors/ErrorHandler.actions1.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/errors/ErrorHandler.actions2.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/MemoryTransport.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteErrorTracker.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteTransport.flushing.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tests/unit/infrastructure/monitoring/RemoteTransport.retries.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/eslint/no-raw-color-classes.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/eslint/no-theme-conditionals.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/fetchData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generate-component.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generate-tokens.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":39,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":39,"endColumn":12,"suggestions":[{"fix":{"range":[1149,1188],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync, writeFileSync } from 'fs';\nimport path from 'path';\n\nfunction hexToRgb(hex: string): string {\n  const sanitized = hex.replace('#', '');\n  const bigint = parseInt(sanitized, 16);\n  const r = (bigint >> 16) & 255;\n  const g = (bigint >> 8) & 255;\n  const b = bigint & 255;\n  return `${r} ${g} ${b}`;\n}\n\nfunction kebabCase(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nconst designSystemPath = path.resolve('design-system.json');\nconst themePath = path.resolve('app/theme.css');\n\nconst design = JSON.parse(readFileSync(designSystemPath, 'utf8'));\nconst colors = design.colors as Record<string, string>;\n\nconst baseKeys = Object.keys(colors).filter((key) => !key.endsWith('Dark'));\n\nconst rootVars = baseKeys\n  .map((key) => `  --color-${kebabCase(key)}: ${hexToRgb(colors[key])};`)\n  .join('\\n');\n\nconst darkVars = baseKeys\n  .map((key) => {\n    const darkKey = `${key}Dark`;\n    return `  --color-${kebabCase(key)}: ${hexToRgb(colors[darkKey] || colors[key])};`;\n  })\n  .join('\\n');\n\nconst css = `:root {\\n${rootVars}\\n}\\n\\n.dark {\\n${darkVars}\\n}\\n`;\n\nwriteFileSync(themePath, css);\nconsole.log('Generated theme tokens.');\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/generateFeature.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":97,"column":3,"nodeType":"MemberExpression","messageId":"limited","endLine":97,"endColumn":14,"suggestions":[{"fix":{"range":[2882,2935],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Scaffolds a new feature page along with a basic test file.\n *\n * Expects a kebab-case feature name as the first CLI argument and generates:\n * - `app/(features)/<name>/page.tsx`\n * - `app/(features)/<name>/components/.gitkeep`\n * - `app/(features)/<name>/__tests__/<Pascal>Page.test.tsx`\n */\n\nimport { mkdir, writeFile } from 'fs/promises';\n\nfunction toPascalCase(name: string): string {\n  return name\n    .split(/[-_]/)\n    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n    .join('');\n}\n\nasync function main(): Promise<void> {\n  const name = process.argv[2];\n  if (!name) {\n    console.error('Usage: ts-node scripts/generateFeature.ts <name>');\n    process.exit(1);\n  }\n\n  const pascal = toPascalCase(name);\n  const dir = `app/(features)/${name}`;\n  await mkdir(dir, { recursive: true });\n  await Promise.all([\n    mkdir(`${dir}/context`, { recursive: true }),\n    mkdir(`${dir}/hooks`, { recursive: true }),\n    mkdir(`${dir}/lib`, { recursive: true }),\n    mkdir(`${dir}/components`, { recursive: true }),\n    mkdir(`${dir}/__tests__`, { recursive: true }),\n  ]);\n  await Promise.all([\n    writeFile(`${dir}/context/.gitkeep`, ''),\n    writeFile(`${dir}/hooks/.gitkeep`, ''),\n    writeFile(`${dir}/lib/.gitkeep`, ''),\n    writeFile(`${dir}/components/.gitkeep`, ''),\n  ]);\n\n  const page = `// ${dir}/page.tsx\n'use client';\nimport { useEffect, useState } from 'react';\nimport { useSettings } from '@/app/providers/SettingsContext';\nimport { getRandomVerse } from '@/lib/api';\nimport { Verse } from '@/types';\n\nexport const ${pascal}Page = () => {\n  const { settings } = useSettings();\n  const [verse, setVerse] = useState<Verse | null>(null);\n\n  useEffect(() => {\n    getRandomVerse(settings.translationId).then(setVerse);\n  }, [settings.translationId]);\n\n  if (!verse) return <p>Loading...</p>;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">${pascal}</h1>\n      <p>{verse.text_uthmani}</p>\n    </div>\n  );\n};\n`;\n\n  await writeFile(`${dir}/page.tsx`, page);\n\n  const test = `import { render, screen } from '@testing-library/react';\nimport { SettingsProvider } from '@/app/providers/SettingsContext';\nimport * as api from '@/lib/api';\nimport { Verse } from '@/types';\nimport { ${pascal}Page } from '@/app/(features)/${name}/page';\n\njest.mock('react-i18next', () => ({ useTranslation: () => ({ t: (key: string) => key }) }));\njest.mock('@/lib/api');\n\nconst mockVerse: Verse = { id: 1, verse_key: '1:1', text_uthmani: '${name} verse', words: [] } as Verse;\n\nbeforeEach(() => {\n  (api.getRandomVerse as jest.Mock).mockResolvedValue(mockVerse);\n});\n\ntest('renders API data', async () => {\n  render(\n    <SettingsProvider>\n      <${pascal}Page />\n    </SettingsProvider>\n  );\n  expect(await screen.findByText('${name} verse')).toBeInTheDocument();\n});\n`;\n\n  await writeFile(`${dir}/__tests__/${pascal}Page.test.tsx`, test);\n  console.log(`Generated feature '${name}' at ${dir}`);\n}\n\nmain().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/migrate-tokens.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/rg.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/tools/scripts/validate-tokens.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":122,"column":1,"nodeType":"MemberExpression","messageId":"limited","endLine":122,"endColumn":12,"suggestions":[{"fix":{"range":[2588,2655],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readdirSync, readFileSync } from 'fs';\nimport path from 'path';\n\nfunction kebabCase(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nconst designPath = path.resolve(__dirname, '..', 'design-system.json');\nconst design = JSON.parse(readFileSync(designPath, 'utf8'));\nconst allowedTokens = new Set(\n  Object.keys(design.colors)\n    .filter((key) => !key.endsWith('Dark'))\n    .map(kebabCase)\n);\n\nconst ignore: Record<string, Set<string>> = {\n  text: new Set([\n    'center',\n    'left',\n    'right',\n    'justify',\n    'start',\n    'end',\n    'xs',\n    'sm',\n    'base',\n    'lg',\n    'xl',\n    '2xl',\n    '3xl',\n    '4xl',\n    '5xl',\n    '6xl',\n    '7xl',\n    '8xl',\n    '9xl',\n  ]),\n  bg: new Set([\n    'cover',\n    'contain',\n    'center',\n    'fixed',\n    'local',\n    'no-repeat',\n    'repeat',\n    'repeat-x',\n    'repeat-y',\n    'auto',\n    'bottom',\n    'top',\n    'left',\n    'right',\n  ]),\n  border: new Set([\n    '0',\n    '2',\n    '4',\n    '8',\n    't',\n    'b',\n    'l',\n    'r',\n    'x',\n    'y',\n    'solid',\n    'dashed',\n    'double',\n    'collapse',\n    'separate',\n  ]),\n};\n\nconst tokenRegex = /(bg|text|border)-([a-zA-Z0-9-]+)/g;\n\nfunction getFiles(dir: string): string[] {\n  const entries = readdirSync(dir, { withFileTypes: true });\n  const files: string[] = [];\n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n    if (entry.isDirectory()) {\n      if (['node_modules', '.git', '.next', 'public'].includes(entry.name)) {\n        continue;\n      }\n      files.push(...getFiles(fullPath));\n    } else if (/\\.(ts|tsx|js|jsx)$/.test(entry.name)) {\n      files.push(fullPath);\n    }\n  }\n  return files;\n}\n\nconst rootDir = path.resolve(__dirname, '..');\nconst files = getFiles(rootDir);\nconst undefinedTokens: Record<string, Set<string>> = {};\n\nfor (const file of files) {\n  const content = readFileSync(file, 'utf8');\n  let match: RegExpExecArray | null;\n  while ((match = tokenRegex.exec(content))) {\n    const prefix = match[1];\n    const token = match[2];\n    if (ignore[prefix]?.has(token)) continue;\n    if (!allowedTokens.has(token)) {\n      const key = `${prefix}-${token}`;\n      undefinedTokens[key] ||= new Set();\n      undefinedTokens[key].add(path.relative(rootDir, file));\n    }\n  }\n}\n\nif (Object.keys(undefinedTokens).length > 0) {\n  console.error('Undefined design tokens found:');\n  for (const [token, files] of Object.entries(undefinedTokens)) {\n    console.error(`  ${token}`);\n    for (const f of files) {\n      console.error(`    - ${f}`);\n    }\n  }\n  process.exit(1);\n}\n\nconsole.log('All token classes are defined in design-system.json');\n","usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/bookmark.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/chapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/juz.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/quran-meta.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/surah.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/tafsir.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/translation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/verse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/yasinhossain/quran-app/types/word.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
